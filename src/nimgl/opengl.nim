# Copyright (C) CavariuX. License on the root folder.
# Written by Leonardo Mariscal <cavariux@cleverbyte.io>, 2018

## Opengl Module | Glew Bindings - An OpenGL loading Library
## ====
## `return <../nimgl.html>`_.  
## 
## There are too many procedures and constants, please run while you can
## but if you want to kill the monster you can add the procedures you still need
## you can use `https://docs.gl/<https://docs.gl/>`_ to get references of how every
## procedure works.
## 
## Or if you want `the official specification<https://www.khronos.org/registry/OpenGL-Refpages/gl4/>`_
## 
## All of this code was automatically generated by gl2nim, you can find the project
## in the root under the tools folder as a submodule.
##
## NOTE: This bindings only support modern opengl (v3.x >) so fixed pipelines are not
## supported.

from os import splitPath

{.passC: "-DGLEW_NO_GLU -DGLEW_BUILD -DGLEW_STATIC -I" & currentSourcePath().splitPath.head & "/private/glew/include/GL".}

when defined(glewDLL):
  when defined(windows):
    const glew_dll* = "glew32.dll"
  elif defined(macosx):
    const glew_dll* = "libglew.dylib"
  else:
    const glew_dll* = "libglew.so"
  {.pragma: glew_lib, dynlib: glew_dll, cdecl, header: "<glew.h>".}
else:
  {.compile: "private/glew/src/glew.c"}
  {.pragma: glew_lib, cdecl, header: "<glew.h>".}

type
  GLenum*   = uint32
  GLenum64* = uint64

# Constants
const
  GL_VERSION_1_1*: GLenum = 1
  GL_ZERO*: GLenum = 0
  GL_FALSE*: GLenum = 0
  GL_LOGIC_OP*: GLenum = 0x0BF1
  GL_NONE*: GLenum = 0
  GL_TEXTURE_COMPONENTS*: GLenum = 0x1003
  GL_NO_ERROR*: GLenum = 0
  GL_POINTS*: GLenum = 0x0000
  GL_CURRENT_BIT*: GLenum = 0x00000001
  GL_TRUE*: GLenum = 1
  GL_ONE*: GLenum = 1
  GL_CLIENT_PIXEL_STORE_BIT*: GLenum = 0x00000001
  GL_LINES*: GLenum = 0x0001
  GL_LINE_LOOP*: GLenum = 0x0002
  GL_POINT_BIT*: GLenum = 0x00000002
  GL_CLIENT_VERTEX_ARRAY_BIT*: GLenum = 0x00000002
  GL_LINE_STRIP*: GLenum = 0x0003
  GL_LINE_BIT*: GLenum = 0x00000004
  GL_TRIANGLES*: GLenum = 0x0004
  GL_TRIANGLE_STRIP*: GLenum = 0x0005
  GL_TRIANGLE_FAN*: GLenum = 0x0006
  GL_QUADS*: GLenum = 0x0007
  GL_QUAD_STRIP*: GLenum = 0x0008
  GL_POLYGON_BIT*: GLenum = 0x00000008
  GL_POLYGON*: GLenum = 0x0009
  GL_POLYGON_STIPPLE_BIT*: GLenum = 0x00000010
  GL_PIXEL_MODE_BIT*: GLenum = 0x00000020
  GL_LIGHTING_BIT*: GLenum = 0x00000040
  GL_FOG_BIT*: GLenum = 0x00000080
  GL_DEPTH_BUFFER_BIT*: GLenum = 0x00000100
  GL_ACCUM*: GLenum = 0x0100
  GL_LOAD*: GLenum = 0x0101
  GL_RETURN*: GLenum = 0x0102
  GL_MULT*: GLenum = 0x0103
  GL_ADD*: GLenum = 0x0104
  GL_NEVER*: GLenum = 0x0200
  GL_ACCUM_BUFFER_BIT*: GLenum = 0x00000200
  GL_LESS*: GLenum = 0x0201
  GL_EQUAL*: GLenum = 0x0202
  GL_LEQUAL*: GLenum = 0x0203
  GL_GREATER*: GLenum = 0x0204
  GL_NOTEQUAL*: GLenum = 0x0205
  GL_GEQUAL*: GLenum = 0x0206
  GL_ALWAYS*: GLenum = 0x0207
  GL_SRC_COLOR*: GLenum = 0x0300
  GL_ONE_MINUS_SRC_COLOR*: GLenum = 0x0301
  GL_SRC_ALPHA*: GLenum = 0x0302
  GL_ONE_MINUS_SRC_ALPHA*: GLenum = 0x0303
  GL_DST_ALPHA*: GLenum = 0x0304
  GL_ONE_MINUS_DST_ALPHA*: GLenum = 0x0305
  GL_DST_COLOR*: GLenum = 0x0306
  GL_ONE_MINUS_DST_COLOR*: GLenum = 0x0307
  GL_SRC_ALPHA_SATURATE*: GLenum = 0x0308
  GL_STENCIL_BUFFER_BIT*: GLenum = 0x00000400
  GL_FRONT_LEFT*: GLenum = 0x0400
  GL_FRONT_RIGHT*: GLenum = 0x0401
  GL_BACK_LEFT*: GLenum = 0x0402
  GL_BACK_RIGHT*: GLenum = 0x0403
  GL_FRONT*: GLenum = 0x0404
  GL_BACK*: GLenum = 0x0405
  GL_LEFT*: GLenum = 0x0406
  GL_RIGHT*: GLenum = 0x0407
  GL_FRONT_AND_BACK*: GLenum = 0x0408
  GL_AUX0*: GLenum = 0x0409
  GL_AUX1*: GLenum = 0x040A
  GL_AUX2*: GLenum = 0x040B
  GL_AUX3*: GLenum = 0x040C
  GL_INVALID_ENUM*: GLenum = 0x0500
  GL_INVALID_VALUE*: GLenum = 0x0501
  GL_INVALID_OPERATION*: GLenum = 0x0502
  GL_STACK_OVERFLOW*: GLenum = 0x0503
  GL_STACK_UNDERFLOW*: GLenum = 0x0504
  GL_OUT_OF_MEMORY*: GLenum = 0x0505
  GL_2D*: GLenum = 0x0600
  GL_3D*: GLenum = 0x0601
  GL_3D_COLOR*: GLenum = 0x0602
  GL_3D_COLOR_TEXTURE*: GLenum = 0x0603
  GL_4D_COLOR_TEXTURE*: GLenum = 0x0604
  GL_PASS_THROUGH_TOKEN*: GLenum = 0x0700
  GL_POINT_TOKEN*: GLenum = 0x0701
  GL_LINE_TOKEN*: GLenum = 0x0702
  GL_POLYGON_TOKEN*: GLenum = 0x0703
  GL_BITMAP_TOKEN*: GLenum = 0x0704
  GL_DRAW_PIXEL_TOKEN*: GLenum = 0x0705
  GL_COPY_PIXEL_TOKEN*: GLenum = 0x0706
  GL_LINE_RESET_TOKEN*: GLenum = 0x0707
  GL_EXP*: GLenum = 0x0800
  GL_VIEWPORT_BIT*: GLenum = 0x00000800
  GL_EXP2*: GLenum = 0x0801
  GL_CW*: GLenum = 0x0900
  GL_CCW*: GLenum = 0x0901
  GL_COEFF*: GLenum = 0x0A00
  GL_ORDER*: GLenum = 0x0A01
  GL_DOMAIN*: GLenum = 0x0A02
  GL_CURRENT_COLOR*: GLenum = 0x0B00
  GL_CURRENT_INDEX*: GLenum = 0x0B01
  GL_CURRENT_NORMAL*: GLenum = 0x0B02
  GL_CURRENT_TEXTURE_COORDS*: GLenum = 0x0B03
  GL_CURRENT_RASTER_COLOR*: GLenum = 0x0B04
  GL_CURRENT_RASTER_INDEX*: GLenum = 0x0B05
  GL_CURRENT_RASTER_TEXTURE_COORDS*: GLenum = 0x0B06
  GL_CURRENT_RASTER_POSITION*: GLenum = 0x0B07
  GL_CURRENT_RASTER_POSITION_VALID*: GLenum = 0x0B08
  GL_CURRENT_RASTER_DISTANCE*: GLenum = 0x0B09
  GL_POINT_SMOOTH*: GLenum = 0x0B10
  GL_POINT_SIZE*: GLenum = 0x0B11
  GL_POINT_SIZE_RANGE*: GLenum = 0x0B12
  GL_POINT_SIZE_GRANULARITY*: GLenum = 0x0B13
  GL_LINE_SMOOTH*: GLenum = 0x0B20
  GL_LINE_WIDTH*: GLenum = 0x0B21
  GL_LINE_WIDTH_RANGE*: GLenum = 0x0B22
  GL_LINE_WIDTH_GRANULARITY*: GLenum = 0x0B23
  GL_LINE_STIPPLE*: GLenum = 0x0B24
  GL_LINE_STIPPLE_PATTERN*: GLenum = 0x0B25
  GL_LINE_STIPPLE_REPEAT*: GLenum = 0x0B26
  GL_LIST_MODE*: GLenum = 0x0B30
  GL_MAX_LIST_NESTING*: GLenum = 0x0B31
  GL_LIST_BASE*: GLenum = 0x0B32
  GL_LIST_INDEX*: GLenum = 0x0B33
  GL_POLYGON_MODE*: GLenum = 0x0B40
  GL_POLYGON_SMOOTH*: GLenum = 0x0B41
  GL_POLYGON_STIPPLE*: GLenum = 0x0B42
  GL_EDGE_FLAG*: GLenum = 0x0B43
  GL_CULL_FACE*: GLenum = 0x0B44
  GL_CULL_FACE_MODE*: GLenum = 0x0B45
  GL_FRONT_FACE*: GLenum = 0x0B46
  GL_LIGHTING*: GLenum = 0x0B50
  GL_LIGHT_MODEL_LOCAL_VIEWER*: GLenum = 0x0B51
  GL_LIGHT_MODEL_TWO_SIDE*: GLenum = 0x0B52
  GL_LIGHT_MODEL_AMBIENT*: GLenum = 0x0B53
  GL_SHADE_MODEL*: GLenum = 0x0B54
  GL_COLOR_MATERIAL_FACE*: GLenum = 0x0B55
  GL_COLOR_MATERIAL_PARAMETER*: GLenum = 0x0B56
  GL_COLOR_MATERIAL*: GLenum = 0x0B57
  GL_FOG*: GLenum = 0x0B60
  GL_FOG_INDEX*: GLenum = 0x0B61
  GL_FOG_DENSITY*: GLenum = 0x0B62
  GL_FOG_START*: GLenum = 0x0B63
  GL_FOG_END*: GLenum = 0x0B64
  GL_FOG_MODE*: GLenum = 0x0B65
  GL_FOG_COLOR*: GLenum = 0x0B66
  GL_DEPTH_RANGE*: GLenum = 0x0B70
  GL_DEPTH_TEST*: GLenum = 0x0B71
  GL_DEPTH_WRITEMASK*: GLenum = 0x0B72
  GL_DEPTH_CLEAR_VALUE*: GLenum = 0x0B73
  GL_DEPTH_FUNC*: GLenum = 0x0B74
  GL_ACCUM_CLEAR_VALUE*: GLenum = 0x0B80
  GL_STENCIL_TEST*: GLenum = 0x0B90
  GL_STENCIL_CLEAR_VALUE*: GLenum = 0x0B91
  GL_STENCIL_FUNC*: GLenum = 0x0B92
  GL_STENCIL_VALUE_MASK*: GLenum = 0x0B93
  GL_STENCIL_FAIL*: GLenum = 0x0B94
  GL_STENCIL_PASS_DEPTH_FAIL*: GLenum = 0x0B95
  GL_STENCIL_PASS_DEPTH_PASS*: GLenum = 0x0B96
  GL_STENCIL_REF*: GLenum = 0x0B97
  GL_STENCIL_WRITEMASK*: GLenum = 0x0B98
  GL_MATRIX_MODE*: GLenum = 0x0BA0
  GL_NORMALIZE*: GLenum = 0x0BA1
  GL_VIEWPORT*: GLenum = 0x0BA2
  GL_MODELVIEW_STACK_DEPTH*: GLenum = 0x0BA3
  GL_PROJECTION_STACK_DEPTH*: GLenum = 0x0BA4
  GL_TEXTURE_STACK_DEPTH*: GLenum = 0x0BA5
  GL_MODELVIEW_MATRIX*: GLenum = 0x0BA6
  GL_PROJECTION_MATRIX*: GLenum = 0x0BA7
  GL_TEXTURE_MATRIX*: GLenum = 0x0BA8
  GL_ATTRIB_STACK_DEPTH*: GLenum = 0x0BB0
  GL_CLIENT_ATTRIB_STACK_DEPTH*: GLenum = 0x0BB1
  GL_ALPHA_TEST*: GLenum = 0x0BC0
  GL_ALPHA_TEST_FUNC*: GLenum = 0x0BC1
  GL_ALPHA_TEST_REF*: GLenum = 0x0BC2
  GL_DITHER*: GLenum = 0x0BD0
  GL_BLEND_DST*: GLenum = 0x0BE0
  GL_BLEND_SRC*: GLenum = 0x0BE1
  GL_BLEND*: GLenum = 0x0BE2
  GL_LOGIC_OP_MODE*: GLenum = 0x0BF0
  GL_INDEX_LOGIC_OP*: GLenum = 0x0BF1
  GL_COLOR_LOGIC_OP*: GLenum = 0x0BF2
  GL_AUX_BUFFERS*: GLenum = 0x0C00
  GL_DRAW_BUFFER*: GLenum = 0x0C01
  GL_READ_BUFFER*: GLenum = 0x0C02
  GL_SCISSOR_BOX*: GLenum = 0x0C10
  GL_SCISSOR_TEST*: GLenum = 0x0C11
  GL_INDEX_CLEAR_VALUE*: GLenum = 0x0C20
  GL_INDEX_WRITEMASK*: GLenum = 0x0C21
  GL_COLOR_CLEAR_VALUE*: GLenum = 0x0C22
  GL_COLOR_WRITEMASK*: GLenum = 0x0C23
  GL_INDEX_MODE*: GLenum = 0x0C30
  GL_RGBA_MODE*: GLenum = 0x0C31
  GL_DOUBLEBUFFER*: GLenum = 0x0C32
  GL_STEREO*: GLenum = 0x0C33
  GL_RENDER_MODE*: GLenum = 0x0C40
  GL_PERSPECTIVE_CORRECTION_HINT*: GLenum = 0x0C50
  GL_POINT_SMOOTH_HINT*: GLenum = 0x0C51
  GL_LINE_SMOOTH_HINT*: GLenum = 0x0C52
  GL_POLYGON_SMOOTH_HINT*: GLenum = 0x0C53
  GL_FOG_HINT*: GLenum = 0x0C54
  GL_TEXTURE_GEN_S*: GLenum = 0x0C60
  GL_TEXTURE_GEN_T*: GLenum = 0x0C61
  GL_TEXTURE_GEN_R*: GLenum = 0x0C62
  GL_TEXTURE_GEN_Q*: GLenum = 0x0C63
  GL_PIXEL_MAP_I_TO_I*: GLenum = 0x0C70
  GL_PIXEL_MAP_S_TO_S*: GLenum = 0x0C71
  GL_PIXEL_MAP_I_TO_R*: GLenum = 0x0C72
  GL_PIXEL_MAP_I_TO_G*: GLenum = 0x0C73
  GL_PIXEL_MAP_I_TO_B*: GLenum = 0x0C74
  GL_PIXEL_MAP_I_TO_A*: GLenum = 0x0C75
  GL_PIXEL_MAP_R_TO_R*: GLenum = 0x0C76
  GL_PIXEL_MAP_G_TO_G*: GLenum = 0x0C77
  GL_PIXEL_MAP_B_TO_B*: GLenum = 0x0C78
  GL_PIXEL_MAP_A_TO_A*: GLenum = 0x0C79
  GL_PIXEL_MAP_I_TO_I_SIZE*: GLenum = 0x0CB0
  GL_PIXEL_MAP_S_TO_S_SIZE*: GLenum = 0x0CB1
  GL_PIXEL_MAP_I_TO_R_SIZE*: GLenum = 0x0CB2
  GL_PIXEL_MAP_I_TO_G_SIZE*: GLenum = 0x0CB3
  GL_PIXEL_MAP_I_TO_B_SIZE*: GLenum = 0x0CB4
  GL_PIXEL_MAP_I_TO_A_SIZE*: GLenum = 0x0CB5
  GL_PIXEL_MAP_R_TO_R_SIZE*: GLenum = 0x0CB6
  GL_PIXEL_MAP_G_TO_G_SIZE*: GLenum = 0x0CB7
  GL_PIXEL_MAP_B_TO_B_SIZE*: GLenum = 0x0CB8
  GL_PIXEL_MAP_A_TO_A_SIZE*: GLenum = 0x0CB9
  GL_UNPACK_SWAP_BYTES*: GLenum = 0x0CF0
  GL_UNPACK_LSB_FIRST*: GLenum = 0x0CF1
  GL_UNPACK_ROW_LENGTH*: GLenum = 0x0CF2
  GL_UNPACK_SKIP_ROWS*: GLenum = 0x0CF3
  GL_UNPACK_SKIP_PIXELS*: GLenum = 0x0CF4
  GL_UNPACK_ALIGNMENT*: GLenum = 0x0CF5
  GL_PACK_SWAP_BYTES*: GLenum = 0x0D00
  GL_PACK_LSB_FIRST*: GLenum = 0x0D01
  GL_PACK_ROW_LENGTH*: GLenum = 0x0D02
  GL_PACK_SKIP_ROWS*: GLenum = 0x0D03
  GL_PACK_SKIP_PIXELS*: GLenum = 0x0D04
  GL_PACK_ALIGNMENT*: GLenum = 0x0D05
  GL_MAP_COLOR*: GLenum = 0x0D10
  GL_MAP_STENCIL*: GLenum = 0x0D11
  GL_INDEX_SHIFT*: GLenum = 0x0D12
  GL_INDEX_OFFSET*: GLenum = 0x0D13
  GL_RED_SCALE*: GLenum = 0x0D14
  GL_RED_BIAS*: GLenum = 0x0D15
  GL_ZOOM_X*: GLenum = 0x0D16
  GL_ZOOM_Y*: GLenum = 0x0D17
  GL_GREEN_SCALE*: GLenum = 0x0D18
  GL_GREEN_BIAS*: GLenum = 0x0D19
  GL_BLUE_SCALE*: GLenum = 0x0D1A
  GL_BLUE_BIAS*: GLenum = 0x0D1B
  GL_ALPHA_SCALE*: GLenum = 0x0D1C
  GL_ALPHA_BIAS*: GLenum = 0x0D1D
  GL_DEPTH_SCALE*: GLenum = 0x0D1E
  GL_DEPTH_BIAS*: GLenum = 0x0D1F
  GL_MAX_EVAL_ORDER*: GLenum = 0x0D30
  GL_MAX_LIGHTS*: GLenum = 0x0D31
  GL_MAX_CLIP_PLANES*: GLenum = 0x0D32
  GL_MAX_TEXTURE_SIZE*: GLenum = 0x0D33
  GL_MAX_PIXEL_MAP_TABLE*: GLenum = 0x0D34
  GL_MAX_ATTRIB_STACK_DEPTH*: GLenum = 0x0D35
  GL_MAX_MODELVIEW_STACK_DEPTH*: GLenum = 0x0D36
  GL_MAX_NAME_STACK_DEPTH*: GLenum = 0x0D37
  GL_MAX_PROJECTION_STACK_DEPTH*: GLenum = 0x0D38
  GL_MAX_TEXTURE_STACK_DEPTH*: GLenum = 0x0D39
  GL_MAX_VIEWPORT_DIMS*: GLenum = 0x0D3A
  GL_MAX_CLIENT_ATTRIB_STACK_DEPTH*: GLenum = 0x0D3B
  GL_SUBPIXEL_BITS*: GLenum = 0x0D50
  GL_INDEX_BITS*: GLenum = 0x0D51
  GL_RED_BITS*: GLenum = 0x0D52
  GL_GREEN_BITS*: GLenum = 0x0D53
  GL_BLUE_BITS*: GLenum = 0x0D54
  GL_ALPHA_BITS*: GLenum = 0x0D55
  GL_DEPTH_BITS*: GLenum = 0x0D56
  GL_STENCIL_BITS*: GLenum = 0x0D57
  GL_ACCUM_RED_BITS*: GLenum = 0x0D58
  GL_ACCUM_GREEN_BITS*: GLenum = 0x0D59
  GL_ACCUM_BLUE_BITS*: GLenum = 0x0D5A
  GL_ACCUM_ALPHA_BITS*: GLenum = 0x0D5B
  GL_NAME_STACK_DEPTH*: GLenum = 0x0D70
  GL_AUTO_NORMAL*: GLenum = 0x0D80
  GL_MAP1_COLOR_4*: GLenum = 0x0D90
  GL_MAP1_INDEX*: GLenum = 0x0D91
  GL_MAP1_NORMAL*: GLenum = 0x0D92
  GL_MAP1_TEXTURE_COORD_1*: GLenum = 0x0D93
  GL_MAP1_TEXTURE_COORD_2*: GLenum = 0x0D94
  GL_MAP1_TEXTURE_COORD_3*: GLenum = 0x0D95
  GL_MAP1_TEXTURE_COORD_4*: GLenum = 0x0D96
  GL_MAP1_VERTEX_3*: GLenum = 0x0D97
  GL_MAP1_VERTEX_4*: GLenum = 0x0D98
  GL_MAP2_COLOR_4*: GLenum = 0x0DB0
  GL_MAP2_INDEX*: GLenum = 0x0DB1
  GL_MAP2_NORMAL*: GLenum = 0x0DB2
  GL_MAP2_TEXTURE_COORD_1*: GLenum = 0x0DB3
  GL_MAP2_TEXTURE_COORD_2*: GLenum = 0x0DB4
  GL_MAP2_TEXTURE_COORD_3*: GLenum = 0x0DB5
  GL_MAP2_TEXTURE_COORD_4*: GLenum = 0x0DB6
  GL_MAP2_VERTEX_3*: GLenum = 0x0DB7
  GL_MAP2_VERTEX_4*: GLenum = 0x0DB8
  GL_MAP1_GRID_DOMAIN*: GLenum = 0x0DD0
  GL_MAP1_GRID_SEGMENTS*: GLenum = 0x0DD1
  GL_MAP2_GRID_DOMAIN*: GLenum = 0x0DD2
  GL_MAP2_GRID_SEGMENTS*: GLenum = 0x0DD3
  GL_TEXTURE_1D*: GLenum = 0x0DE0
  GL_TEXTURE_2D*: GLenum = 0x0DE1
  GL_FEEDBACK_BUFFER_POINTER*: GLenum = 0x0DF0
  GL_FEEDBACK_BUFFER_SIZE*: GLenum = 0x0DF1
  GL_FEEDBACK_BUFFER_TYPE*: GLenum = 0x0DF2
  GL_SELECTION_BUFFER_POINTER*: GLenum = 0x0DF3
  GL_SELECTION_BUFFER_SIZE*: GLenum = 0x0DF4
  GL_TEXTURE_WIDTH*: GLenum = 0x1000
  GL_TRANSFORM_BIT*: GLenum = 0x00001000
  GL_TEXTURE_HEIGHT*: GLenum = 0x1001
  GL_TEXTURE_INTERNAL_FORMAT*: GLenum = 0x1003
  GL_TEXTURE_BORDER_COLOR*: GLenum = 0x1004
  GL_TEXTURE_BORDER*: GLenum = 0x1005
  GL_DONT_CARE*: GLenum = 0x1100
  GL_FASTEST*: GLenum = 0x1101
  GL_NICEST*: GLenum = 0x1102
  GL_AMBIENT*: GLenum = 0x1200
  GL_DIFFUSE*: GLenum = 0x1201
  GL_SPECULAR*: GLenum = 0x1202
  GL_POSITION*: GLenum = 0x1203
  GL_SPOT_DIRECTION*: GLenum = 0x1204
  GL_SPOT_EXPONENT*: GLenum = 0x1205
  GL_SPOT_CUTOFF*: GLenum = 0x1206
  GL_CONSTANT_ATTENUATION*: GLenum = 0x1207
  GL_LINEAR_ATTENUATION*: GLenum = 0x1208
  GL_QUADRATIC_ATTENUATION*: GLenum = 0x1209
  GL_COMPILE*: GLenum = 0x1300
  GL_COMPILE_AND_EXECUTE*: GLenum = 0x1301
  GL_BYTE*: GLenum = 0x1400
  GL_UNSIGNED_BYTE*: GLenum = 0x1401
  GL_SHORT*: GLenum = 0x1402
  GL_UNSIGNED_SHORT*: GLenum = 0x1403
  GL_INT*: GLenum = 0x1404
  GL_UNSIGNED_INT*: GLenum = 0x1405
  GL_FLOAT*: GLenum = 0x1406
  GL_2_BYTES*: GLenum = 0x1407
  GL_3_BYTES*: GLenum = 0x1408
  GL_4_BYTES*: GLenum = 0x1409
  GL_DOUBLE*: GLenum = 0x140A
  GL_CLEAR*: GLenum = 0x1500
  GL_AND*: GLenum = 0x1501
  GL_AND_REVERSE*: GLenum = 0x1502
  GL_COPY*: GLenum = 0x1503
  GL_AND_INVERTED*: GLenum = 0x1504
  GL_NOOP*: GLenum = 0x1505
  GL_XOR*: GLenum = 0x1506
  GL_OR*: GLenum = 0x1507
  GL_NOR*: GLenum = 0x1508
  GL_EQUIV*: GLenum = 0x1509
  GL_INVERT*: GLenum = 0x150A
  GL_OR_REVERSE*: GLenum = 0x150B
  GL_COPY_INVERTED*: GLenum = 0x150C
  GL_OR_INVERTED*: GLenum = 0x150D
  GL_NAND*: GLenum = 0x150E
  GL_SET*: GLenum = 0x150F
  GL_EMISSION*: GLenum = 0x1600
  GL_SHININESS*: GLenum = 0x1601
  GL_AMBIENT_AND_DIFFUSE*: GLenum = 0x1602
  GL_COLOR_INDEXES*: GLenum = 0x1603
  GL_MODELVIEW*: GLenum = 0x1700
  GL_PROJECTION*: GLenum = 0x1701
  GL_TEXTURE*: GLenum = 0x1702
  GL_COLOR*: GLenum = 0x1800
  GL_DEPTH*: GLenum = 0x1801
  GL_STENCIL*: GLenum = 0x1802
  GL_COLOR_INDEX*: GLenum = 0x1900
  GL_STENCIL_INDEX*: GLenum = 0x1901
  GL_DEPTH_COMPONENT*: GLenum = 0x1902
  GL_RED*: GLenum = 0x1903
  GL_GREEN*: GLenum = 0x1904
  GL_BLUE*: GLenum = 0x1905
  GL_ALPHA*: GLenum = 0x1906
  GL_RGB*: GLenum = 0x1907
  GL_RGBA*: GLenum = 0x1908
  GL_LUMINANCE*: GLenum = 0x1909
  GL_LUMINANCE_ALPHA*: GLenum = 0x190A
  GL_BITMAP*: GLenum = 0x1A00
  GL_POINT*: GLenum = 0x1B00
  GL_LINE*: GLenum = 0x1B01
  GL_FILL*: GLenum = 0x1B02
  GL_RENDER*: GLenum = 0x1C00
  GL_FEEDBACK*: GLenum = 0x1C01
  GL_SELECT*: GLenum = 0x1C02
  GL_FLAT*: GLenum = 0x1D00
  GL_SMOOTH*: GLenum = 0x1D01
  GL_KEEP*: GLenum = 0x1E00
  GL_REPLACE*: GLenum = 0x1E01
  GL_INCR*: GLenum = 0x1E02
  GL_DECR*: GLenum = 0x1E03
  GL_VENDOR*: GLenum = 0x1F00
  GL_RENDERER*: GLenum = 0x1F01
  GL_VERSION*: GLenum = 0x1F02
  GL_EXTENSIONS*: GLenum = 0x1F03
  GL_S*: GLenum = 0x2000
  GL_ENABLE_BIT*: GLenum = 0x00002000
  GL_T*: GLenum = 0x2001
  GL_R*: GLenum = 0x2002
  GL_Q*: GLenum = 0x2003
  GL_MODULATE*: GLenum = 0x2100
  GL_DECAL*: GLenum = 0x2101
  GL_TEXTURE_ENV_MODE*: GLenum = 0x2200
  GL_TEXTURE_ENV_COLOR*: GLenum = 0x2201
  GL_TEXTURE_ENV*: GLenum = 0x2300
  GL_EYE_LINEAR*: GLenum = 0x2400
  GL_OBJECT_LINEAR*: GLenum = 0x2401
  GL_SPHERE_MAP*: GLenum = 0x2402
  GL_TEXTURE_GEN_MODE*: GLenum = 0x2500
  GL_OBJECT_PLANE*: GLenum = 0x2501
  GL_EYE_PLANE*: GLenum = 0x2502
  GL_NEAREST*: GLenum = 0x2600
  GL_LINEAR*: GLenum = 0x2601
  GL_NEAREST_MIPMAP_NEAREST*: GLenum = 0x2700
  GL_LINEAR_MIPMAP_NEAREST*: GLenum = 0x2701
  GL_NEAREST_MIPMAP_LINEAR*: GLenum = 0x2702
  GL_LINEAR_MIPMAP_LINEAR*: GLenum = 0x2703
  GL_TEXTURE_MAG_FILTER*: GLenum = 0x2800
  GL_TEXTURE_MIN_FILTER*: GLenum = 0x2801
  GL_TEXTURE_WRAP_S*: GLenum = 0x2802
  GL_TEXTURE_WRAP_T*: GLenum = 0x2803
  GL_CLAMP*: GLenum = 0x2900
  GL_REPEAT*: GLenum = 0x2901
  GL_POLYGON_OFFSET_UNITS*: GLenum = 0x2A00
  GL_POLYGON_OFFSET_POINT*: GLenum = 0x2A01
  GL_POLYGON_OFFSET_LINE*: GLenum = 0x2A02
  GL_R3_G3_B2*: GLenum = 0x2A10
  GL_V2F*: GLenum = 0x2A20
  GL_V3F*: GLenum = 0x2A21
  GL_C4UB_V2F*: GLenum = 0x2A22
  GL_C4UB_V3F*: GLenum = 0x2A23
  GL_C3F_V3F*: GLenum = 0x2A24
  GL_N3F_V3F*: GLenum = 0x2A25
  GL_C4F_N3F_V3F*: GLenum = 0x2A26
  GL_T2F_V3F*: GLenum = 0x2A27
  GL_T4F_V4F*: GLenum = 0x2A28
  GL_T2F_C4UB_V3F*: GLenum = 0x2A29
  GL_T2F_C3F_V3F*: GLenum = 0x2A2A
  GL_T2F_N3F_V3F*: GLenum = 0x2A2B
  GL_T2F_C4F_N3F_V3F*: GLenum = 0x2A2C
  GL_T4F_C4F_N3F_V4F*: GLenum = 0x2A2D
  GL_CLIP_PLANE0*: GLenum = 0x3000
  GL_CLIP_PLANE1*: GLenum = 0x3001
  GL_CLIP_PLANE2*: GLenum = 0x3002
  GL_CLIP_PLANE3*: GLenum = 0x3003
  GL_CLIP_PLANE4*: GLenum = 0x3004
  GL_CLIP_PLANE5*: GLenum = 0x3005
  GL_LIGHT0*: GLenum = 0x4000
  GL_COLOR_BUFFER_BIT*: GLenum = 0x00004000
  GL_LIGHT1*: GLenum = 0x4001
  GL_LIGHT2*: GLenum = 0x4002
  GL_LIGHT3*: GLenum = 0x4003
  GL_LIGHT4*: GLenum = 0x4004
  GL_LIGHT5*: GLenum = 0x4005
  GL_LIGHT6*: GLenum = 0x4006
  GL_LIGHT7*: GLenum = 0x4007
  GL_HINT_BIT*: GLenum = 0x00008000
  GL_POLYGON_OFFSET_FILL*: GLenum = 0x8037
  GL_POLYGON_OFFSET_FACTOR*: GLenum = 0x8038
  GL_ALPHA4*: GLenum = 0x803B
  GL_ALPHA8*: GLenum = 0x803C
  GL_ALPHA12*: GLenum = 0x803D
  GL_ALPHA16*: GLenum = 0x803E
  GL_LUMINANCE4*: GLenum = 0x803F
  GL_LUMINANCE8*: GLenum = 0x8040
  GL_LUMINANCE12*: GLenum = 0x8041
  GL_LUMINANCE16*: GLenum = 0x8042
  GL_LUMINANCE4_ALPHA4*: GLenum = 0x8043
  GL_LUMINANCE6_ALPHA2*: GLenum = 0x8044
  GL_LUMINANCE8_ALPHA8*: GLenum = 0x8045
  GL_LUMINANCE12_ALPHA4*: GLenum = 0x8046
  GL_LUMINANCE12_ALPHA12*: GLenum = 0x8047
  GL_LUMINANCE16_ALPHA16*: GLenum = 0x8048
  GL_INTENSITY*: GLenum = 0x8049
  GL_INTENSITY4*: GLenum = 0x804A
  GL_INTENSITY8*: GLenum = 0x804B
  GL_INTENSITY12*: GLenum = 0x804C
  GL_INTENSITY16*: GLenum = 0x804D
  GL_RGB4*: GLenum = 0x804F
  GL_RGB5*: GLenum = 0x8050
  GL_RGB8*: GLenum = 0x8051
  GL_RGB10*: GLenum = 0x8052
  GL_RGB12*: GLenum = 0x8053
  GL_RGB16*: GLenum = 0x8054
  GL_RGBA2*: GLenum = 0x8055
  GL_RGBA4*: GLenum = 0x8056
  GL_RGB5_A1*: GLenum = 0x8057
  GL_RGBA8*: GLenum = 0x8058
  GL_RGB10_A2*: GLenum = 0x8059
  GL_RGBA12*: GLenum = 0x805A
  GL_RGBA16*: GLenum = 0x805B
  GL_TEXTURE_RED_SIZE*: GLenum = 0x805C
  GL_TEXTURE_GREEN_SIZE*: GLenum = 0x805D
  GL_TEXTURE_BLUE_SIZE*: GLenum = 0x805E
  GL_TEXTURE_ALPHA_SIZE*: GLenum = 0x805F
  GL_TEXTURE_LUMINANCE_SIZE*: GLenum = 0x8060
  GL_TEXTURE_INTENSITY_SIZE*: GLenum = 0x8061
  GL_PROXY_TEXTURE_1D*: GLenum = 0x8063
  GL_PROXY_TEXTURE_2D*: GLenum = 0x8064
  GL_TEXTURE_PRIORITY*: GLenum = 0x8066
  GL_TEXTURE_RESIDENT*: GLenum = 0x8067
  GL_TEXTURE_BINDING_1D*: GLenum = 0x8068
  GL_TEXTURE_BINDING_2D*: GLenum = 0x8069
  GL_VERTEX_ARRAY*: GLenum = 0x8074
  GL_NORMAL_ARRAY*: GLenum = 0x8075
  GL_COLOR_ARRAY*: GLenum = 0x8076
  GL_INDEX_ARRAY*: GLenum = 0x8077
  GL_TEXTURE_COORD_ARRAY*: GLenum = 0x8078
  GL_EDGE_FLAG_ARRAY*: GLenum = 0x8079
  GL_VERTEX_ARRAY_SIZE*: GLenum = 0x807A
  GL_VERTEX_ARRAY_TYPE*: GLenum = 0x807B
  GL_VERTEX_ARRAY_STRIDE*: GLenum = 0x807C
  GL_NORMAL_ARRAY_TYPE*: GLenum = 0x807E
  GL_NORMAL_ARRAY_STRIDE*: GLenum = 0x807F
  GL_COLOR_ARRAY_SIZE*: GLenum = 0x8081
  GL_COLOR_ARRAY_TYPE*: GLenum = 0x8082
  GL_COLOR_ARRAY_STRIDE*: GLenum = 0x8083
  GL_INDEX_ARRAY_TYPE*: GLenum = 0x8085
  GL_INDEX_ARRAY_STRIDE*: GLenum = 0x8086
  GL_TEXTURE_COORD_ARRAY_SIZE*: GLenum = 0x8088
  GL_TEXTURE_COORD_ARRAY_TYPE*: GLenum = 0x8089
  GL_TEXTURE_COORD_ARRAY_STRIDE*: GLenum = 0x808A
  GL_EDGE_FLAG_ARRAY_STRIDE*: GLenum = 0x808C
  GL_VERTEX_ARRAY_POINTER*: GLenum = 0x808E
  GL_NORMAL_ARRAY_POINTER*: GLenum = 0x808F
  GL_COLOR_ARRAY_POINTER*: GLenum = 0x8090
  GL_INDEX_ARRAY_POINTER*: GLenum = 0x8091
  GL_TEXTURE_COORD_ARRAY_POINTER*: GLenum = 0x8092
  GL_EDGE_FLAG_ARRAY_POINTER*: GLenum = 0x8093
  GL_COLOR_INDEX1_EXT*: GLenum = 0x80E2
  GL_COLOR_INDEX2_EXT*: GLenum = 0x80E3
  GL_COLOR_INDEX4_EXT*: GLenum = 0x80E4
  GL_COLOR_INDEX8_EXT*: GLenum = 0x80E5
  GL_COLOR_INDEX12_EXT*: GLenum = 0x80E6
  GL_COLOR_INDEX16_EXT*: GLenum = 0x80E7
  GL_EVAL_BIT*: GLenum = 0x00010000
  GL_LIST_BIT*: GLenum = 0x00020000
  GL_TEXTURE_BIT*: GLenum = 0x00040000
  GL_SCISSOR_BIT*: GLenum = 0x00080000
  GL_ALL_ATTRIB_BITS*: GLenum = 0x000fffff
  GL_CLIENT_ALL_ATTRIB_BITS*: GLenum64 = 0xffffffffu
  GL_VERSION_1_2*: GLenum = 1
  GL_SMOOTH_POINT_SIZE_RANGE*: GLenum = 0x0B12
  GL_SMOOTH_POINT_SIZE_GRANULARITY*: GLenum = 0x0B13
  GL_SMOOTH_LINE_WIDTH_RANGE*: GLenum = 0x0B22
  GL_SMOOTH_LINE_WIDTH_GRANULARITY*: GLenum = 0x0B23
  GL_UNSIGNED_BYTE_3_3_2*: GLenum = 0x8032
  GL_UNSIGNED_SHORT_4_4_4_4*: GLenum = 0x8033
  GL_UNSIGNED_SHORT_5_5_5_1*: GLenum = 0x8034
  GL_UNSIGNED_INT_8_8_8_8*: GLenum = 0x8035
  GL_UNSIGNED_INT_10_10_10_2*: GLenum = 0x8036
  GL_RESCALE_NORMAL*: GLenum = 0x803A
  GL_TEXTURE_BINDING_3D*: GLenum = 0x806A
  GL_PACK_SKIP_IMAGES*: GLenum = 0x806B
  GL_PACK_IMAGE_HEIGHT*: GLenum = 0x806C
  GL_UNPACK_SKIP_IMAGES*: GLenum = 0x806D
  GL_UNPACK_IMAGE_HEIGHT*: GLenum = 0x806E
  GL_TEXTURE_3D*: GLenum = 0x806F
  GL_PROXY_TEXTURE_3D*: GLenum = 0x8070
  GL_TEXTURE_DEPTH*: GLenum = 0x8071
  GL_TEXTURE_WRAP_R*: GLenum = 0x8072
  GL_MAX_3D_TEXTURE_SIZE*: GLenum = 0x8073
  GL_BGR*: GLenum = 0x80E0
  GL_BGRA*: GLenum = 0x80E1
  GL_MAX_ELEMENTS_VERTICES*: GLenum = 0x80E8
  GL_MAX_ELEMENTS_INDICES*: GLenum = 0x80E9
  GL_CLAMP_TO_EDGE*: GLenum = 0x812F
  GL_TEXTURE_MIN_LOD*: GLenum = 0x813A
  GL_TEXTURE_MAX_LOD*: GLenum = 0x813B
  GL_TEXTURE_BASE_LEVEL*: GLenum = 0x813C
  GL_TEXTURE_MAX_LEVEL*: GLenum = 0x813D
  GL_LIGHT_MODEL_COLOR_CONTROL*: GLenum = 0x81F8
  GL_SINGLE_COLOR*: GLenum = 0x81F9
  GL_SEPARATE_SPECULAR_COLOR*: GLenum = 0x81FA
  GL_UNSIGNED_BYTE_2_3_3_REV*: GLenum = 0x8362
  GL_UNSIGNED_SHORT_5_6_5*: GLenum = 0x8363
  GL_UNSIGNED_SHORT_5_6_5_REV*: GLenum = 0x8364
  GL_UNSIGNED_SHORT_4_4_4_4_REV*: GLenum = 0x8365
  GL_UNSIGNED_SHORT_1_5_5_5_REV*: GLenum = 0x8366
  GL_UNSIGNED_INT_8_8_8_8_REV*: GLenum = 0x8367
  GL_ALIASED_POINT_SIZE_RANGE*: GLenum = 0x846D
  GL_ALIASED_LINE_WIDTH_RANGE*: GLenum = 0x846E
  GL_VERSION_1_2_1*: GLenum = 1
  GL_VERSION_1_3*: GLenum = 1
  GL_MULTISAMPLE*: GLenum = 0x809D
  GL_SAMPLE_ALPHA_TO_COVERAGE*: GLenum = 0x809E
  GL_SAMPLE_ALPHA_TO_ONE*: GLenum = 0x809F
  GL_SAMPLE_COVERAGE*: GLenum = 0x80A0
  GL_SAMPLE_BUFFERS*: GLenum = 0x80A8
  GL_SAMPLES*: GLenum = 0x80A9
  GL_SAMPLE_COVERAGE_VALUE*: GLenum = 0x80AA
  GL_SAMPLE_COVERAGE_INVERT*: GLenum = 0x80AB
  GL_CLAMP_TO_BORDER*: GLenum = 0x812D
  GL_TEXTURE0*: GLenum = 0x84C0
  GL_TEXTURE1*: GLenum = 0x84C1
  GL_TEXTURE2*: GLenum = 0x84C2
  GL_TEXTURE3*: GLenum = 0x84C3
  GL_TEXTURE4*: GLenum = 0x84C4
  GL_TEXTURE5*: GLenum = 0x84C5
  GL_TEXTURE6*: GLenum = 0x84C6
  GL_TEXTURE7*: GLenum = 0x84C7
  GL_TEXTURE8*: GLenum = 0x84C8
  GL_TEXTURE9*: GLenum = 0x84C9
  GL_TEXTURE10*: GLenum = 0x84CA
  GL_TEXTURE11*: GLenum = 0x84CB
  GL_TEXTURE12*: GLenum = 0x84CC
  GL_TEXTURE13*: GLenum = 0x84CD
  GL_TEXTURE14*: GLenum = 0x84CE
  GL_TEXTURE15*: GLenum = 0x84CF
  GL_TEXTURE16*: GLenum = 0x84D0
  GL_TEXTURE17*: GLenum = 0x84D1
  GL_TEXTURE18*: GLenum = 0x84D2
  GL_TEXTURE19*: GLenum = 0x84D3
  GL_TEXTURE20*: GLenum = 0x84D4
  GL_TEXTURE21*: GLenum = 0x84D5
  GL_TEXTURE22*: GLenum = 0x84D6
  GL_TEXTURE23*: GLenum = 0x84D7
  GL_TEXTURE24*: GLenum = 0x84D8
  GL_TEXTURE25*: GLenum = 0x84D9
  GL_TEXTURE26*: GLenum = 0x84DA
  GL_TEXTURE27*: GLenum = 0x84DB
  GL_TEXTURE28*: GLenum = 0x84DC
  GL_TEXTURE29*: GLenum = 0x84DD
  GL_TEXTURE30*: GLenum = 0x84DE
  GL_TEXTURE31*: GLenum = 0x84DF
  GL_ACTIVE_TEXTURE*: GLenum = 0x84E0
  GL_CLIENT_ACTIVE_TEXTURE*: GLenum = 0x84E1
  GL_MAX_TEXTURE_UNITS*: GLenum = 0x84E2
  GL_TRANSPOSE_MODELVIEW_MATRIX*: GLenum = 0x84E3
  GL_TRANSPOSE_PROJECTION_MATRIX*: GLenum = 0x84E4
  GL_TRANSPOSE_TEXTURE_MATRIX*: GLenum = 0x84E5
  GL_TRANSPOSE_COLOR_MATRIX*: GLenum = 0x84E6
  GL_SUBTRACT*: GLenum = 0x84E7
  GL_COMPRESSED_ALPHA*: GLenum = 0x84E9
  GL_COMPRESSED_LUMINANCE*: GLenum = 0x84EA
  GL_COMPRESSED_LUMINANCE_ALPHA*: GLenum = 0x84EB
  GL_COMPRESSED_INTENSITY*: GLenum = 0x84EC
  GL_COMPRESSED_RGB*: GLenum = 0x84ED
  GL_COMPRESSED_RGBA*: GLenum = 0x84EE
  GL_TEXTURE_COMPRESSION_HINT*: GLenum = 0x84EF
  GL_NORMAL_MAP*: GLenum = 0x8511
  GL_REFLECTION_MAP*: GLenum = 0x8512
  GL_TEXTURE_CUBE_MAP*: GLenum = 0x8513
  GL_TEXTURE_BINDING_CUBE_MAP*: GLenum = 0x8514
  GL_TEXTURE_CUBE_MAP_POSITIVE_X*: GLenum = 0x8515
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X*: GLenum = 0x8516
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y*: GLenum = 0x8517
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y*: GLenum = 0x8518
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z*: GLenum = 0x8519
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z*: GLenum = 0x851A
  GL_PROXY_TEXTURE_CUBE_MAP*: GLenum = 0x851B
  GL_MAX_CUBE_MAP_TEXTURE_SIZE*: GLenum = 0x851C
  GL_COMBINE*: GLenum = 0x8570
  GL_COMBINE_RGB*: GLenum = 0x8571
  GL_COMBINE_ALPHA*: GLenum = 0x8572
  GL_RGB_SCALE*: GLenum = 0x8573
  GL_ADD_SIGNED*: GLenum = 0x8574
  GL_INTERPOLATE*: GLenum = 0x8575
  GL_CONSTANT*: GLenum = 0x8576
  GL_PRIMARY_COLOR*: GLenum = 0x8577
  GL_PREVIOUS*: GLenum = 0x8578
  GL_SOURCE0_RGB*: GLenum = 0x8580
  GL_SOURCE1_RGB*: GLenum = 0x8581
  GL_SOURCE2_RGB*: GLenum = 0x8582
  GL_SOURCE0_ALPHA*: GLenum = 0x8588
  GL_SOURCE1_ALPHA*: GLenum = 0x8589
  GL_SOURCE2_ALPHA*: GLenum = 0x858A
  GL_OPERAND0_RGB*: GLenum = 0x8590
  GL_OPERAND1_RGB*: GLenum = 0x8591
  GL_OPERAND2_RGB*: GLenum = 0x8592
  GL_OPERAND0_ALPHA*: GLenum = 0x8598
  GL_OPERAND1_ALPHA*: GLenum = 0x8599
  GL_OPERAND2_ALPHA*: GLenum = 0x859A
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE*: GLenum = 0x86A0
  GL_TEXTURE_COMPRESSED*: GLenum = 0x86A1
  GL_NUM_COMPRESSED_TEXTURE_FORMATS*: GLenum = 0x86A2
  GL_COMPRESSED_TEXTURE_FORMATS*: GLenum = 0x86A3
  GL_DOT3_RGB*: GLenum = 0x86AE
  GL_DOT3_RGBA*: GLenum = 0x86AF
  GL_MULTISAMPLE_BIT*: GLenum64 = 0x20000000u
  GL_VERSION_1_4*: GLenum = 1
  GL_BLEND_DST_RGB*: GLenum = 0x80C8
  GL_BLEND_SRC_RGB*: GLenum = 0x80C9
  GL_BLEND_DST_ALPHA*: GLenum = 0x80CA
  GL_BLEND_SRC_ALPHA*: GLenum = 0x80CB
  GL_POINT_SIZE_MIN*: GLenum = 0x8126
  GL_POINT_SIZE_MAX*: GLenum = 0x8127
  GL_POINT_FADE_THRESHOLD_SIZE*: GLenum = 0x8128
  GL_POINT_DISTANCE_ATTENUATION*: GLenum = 0x8129
  GL_GENERATE_MIPMAP*: GLenum = 0x8191
  GL_GENERATE_MIPMAP_HINT*: GLenum = 0x8192
  GL_DEPTH_COMPONENT16*: GLenum = 0x81A5
  GL_DEPTH_COMPONENT24*: GLenum = 0x81A6
  GL_DEPTH_COMPONENT32*: GLenum = 0x81A7
  GL_MIRRORED_REPEAT*: GLenum = 0x8370
  GL_FOG_COORDINATE_SOURCE*: GLenum = 0x8450
  GL_FOG_COORDINATE*: GLenum = 0x8451
  GL_FRAGMENT_DEPTH*: GLenum = 0x8452
  GL_CURRENT_FOG_COORDINATE*: GLenum = 0x8453
  GL_FOG_COORDINATE_ARRAY_TYPE*: GLenum = 0x8454
  GL_FOG_COORDINATE_ARRAY_STRIDE*: GLenum = 0x8455
  GL_FOG_COORDINATE_ARRAY_POINTER*: GLenum = 0x8456
  GL_FOG_COORDINATE_ARRAY*: GLenum = 0x8457
  GL_COLOR_SUM*: GLenum = 0x8458
  GL_CURRENT_SECONDARY_COLOR*: GLenum = 0x8459
  GL_SECONDARY_COLOR_ARRAY_SIZE*: GLenum = 0x845A
  GL_SECONDARY_COLOR_ARRAY_TYPE*: GLenum = 0x845B
  GL_SECONDARY_COLOR_ARRAY_STRIDE*: GLenum = 0x845C
  GL_SECONDARY_COLOR_ARRAY_POINTER*: GLenum = 0x845D
  GL_SECONDARY_COLOR_ARRAY*: GLenum = 0x845E
  GL_MAX_TEXTURE_LOD_BIAS*: GLenum = 0x84FD
  GL_TEXTURE_FILTER_CONTROL*: GLenum = 0x8500
  GL_TEXTURE_LOD_BIAS*: GLenum = 0x8501
  GL_INCR_WRAP*: GLenum = 0x8507
  GL_DECR_WRAP*: GLenum = 0x8508
  GL_TEXTURE_DEPTH_SIZE*: GLenum = 0x884A
  GL_DEPTH_TEXTURE_MODE*: GLenum = 0x884B
  GL_TEXTURE_COMPARE_MODE*: GLenum = 0x884C
  GL_TEXTURE_COMPARE_FUNC*: GLenum = 0x884D
  GL_COMPARE_R_TO_TEXTURE*: GLenum = 0x884E
  GL_VERSION_1_5*: GLenum = 1
  GL_CURRENT_FOG_COORD*: GLenum = 0x8453
  GL_FOG_COORD*: GLenum = 0x8451
  GL_FOG_COORD_ARRAY*: GLenum = 0x8457
  GL_FOG_COORD_ARRAY_POINTER*: GLenum = 0x8456
  GL_FOG_COORD_ARRAY_STRIDE*: GLenum = 0x8455
  GL_FOG_COORD_ARRAY_TYPE*: GLenum = 0x8454
  GL_FOG_COORD_SRC*: GLenum = 0x8450
  GL_SRC0_ALPHA*: GLenum = 0x8588
  GL_SRC0_RGB*: GLenum = 0x8580
  GL_SRC1_ALPHA*: GLenum = 0x8589
  GL_SRC1_RGB*: GLenum = 0x8581
  GL_SRC2_ALPHA*: GLenum = 0x858A
  GL_SRC2_RGB*: GLenum = 0x8582
  GL_BUFFER_SIZE*: GLenum = 0x8764
  GL_BUFFER_USAGE*: GLenum = 0x8765
  GL_QUERY_COUNTER_BITS*: GLenum = 0x8864
  GL_CURRENT_QUERY*: GLenum = 0x8865
  GL_QUERY_RESULT*: GLenum = 0x8866
  GL_QUERY_RESULT_AVAILABLE*: GLenum = 0x8867
  GL_ARRAY_BUFFER*: GLenum = 0x8892
  GL_ELEMENT_ARRAY_BUFFER*: GLenum = 0x8893
  GL_ARRAY_BUFFER_BINDING*: GLenum = 0x8894
  GL_ELEMENT_ARRAY_BUFFER_BINDING*: GLenum = 0x8895
  GL_VERTEX_ARRAY_BUFFER_BINDING*: GLenum = 0x8896
  GL_NORMAL_ARRAY_BUFFER_BINDING*: GLenum = 0x8897
  GL_COLOR_ARRAY_BUFFER_BINDING*: GLenum = 0x8898
  GL_INDEX_ARRAY_BUFFER_BINDING*: GLenum = 0x8899
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING*: GLenum = 0x889A
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING*: GLenum = 0x889B
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING*: GLenum = 0x889C
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING*: GLenum = 0x889D
  GL_WEIGHT_ARRAY_BUFFER_BINDING*: GLenum = 0x889E
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*: GLenum = 0x889F
  GL_READ_ONLY*: GLenum = 0x88B8
  GL_WRITE_ONLY*: GLenum = 0x88B9
  GL_READ_WRITE*: GLenum = 0x88BA
  GL_BUFFER_ACCESS*: GLenum = 0x88BB
  GL_BUFFER_MAPPED*: GLenum = 0x88BC
  GL_BUFFER_MAP_POINTER*: GLenum = 0x88BD
  GL_STREAM_DRAW*: GLenum = 0x88E0
  GL_STREAM_READ*: GLenum = 0x88E1
  GL_STREAM_COPY*: GLenum = 0x88E2
  GL_STATIC_DRAW*: GLenum = 0x88E4
  GL_STATIC_READ*: GLenum = 0x88E5
  GL_STATIC_COPY*: GLenum = 0x88E6
  GL_DYNAMIC_DRAW*: GLenum = 0x88E8
  GL_DYNAMIC_READ*: GLenum = 0x88E9
  GL_DYNAMIC_COPY*: GLenum = 0x88EA
  GL_SAMPLES_PASSED*: GLenum = 0x8914
  GL_VERSION_2_0*: GLenum = 1
  GL_VERTEX_ATTRIB_ARRAY_ENABLED*: GLenum = 0x8622
  GL_VERTEX_ATTRIB_ARRAY_SIZE*: GLenum = 0x8623
  GL_VERTEX_ATTRIB_ARRAY_STRIDE*: GLenum = 0x8624
  GL_VERTEX_ATTRIB_ARRAY_TYPE*: GLenum = 0x8625
  GL_CURRENT_VERTEX_ATTRIB*: GLenum = 0x8626
  GL_VERTEX_PROGRAM_POINT_SIZE*: GLenum = 0x8642
  GL_VERTEX_PROGRAM_TWO_SIDE*: GLenum = 0x8643
  GL_VERTEX_ATTRIB_ARRAY_POINTER*: GLenum = 0x8645
  GL_STENCIL_BACK_FUNC*: GLenum = 0x8800
  GL_STENCIL_BACK_FAIL*: GLenum = 0x8801
  GL_STENCIL_BACK_PASS_DEPTH_FAIL*: GLenum = 0x8802
  GL_STENCIL_BACK_PASS_DEPTH_PASS*: GLenum = 0x8803
  GL_MAX_DRAW_BUFFERS*: GLenum = 0x8824
  GL_DRAW_BUFFER0*: GLenum = 0x8825
  GL_DRAW_BUFFER1*: GLenum = 0x8826
  GL_DRAW_BUFFER2*: GLenum = 0x8827
  GL_DRAW_BUFFER3*: GLenum = 0x8828
  GL_DRAW_BUFFER4*: GLenum = 0x8829
  GL_DRAW_BUFFER5*: GLenum = 0x882A
  GL_DRAW_BUFFER6*: GLenum = 0x882B
  GL_DRAW_BUFFER7*: GLenum = 0x882C
  GL_DRAW_BUFFER8*: GLenum = 0x882D
  GL_DRAW_BUFFER9*: GLenum = 0x882E
  GL_DRAW_BUFFER10*: GLenum = 0x882F
  GL_DRAW_BUFFER11*: GLenum = 0x8830
  GL_DRAW_BUFFER12*: GLenum = 0x8831
  GL_DRAW_BUFFER13*: GLenum = 0x8832
  GL_DRAW_BUFFER14*: GLenum = 0x8833
  GL_DRAW_BUFFER15*: GLenum = 0x8834
  GL_BLEND_EQUATION_ALPHA*: GLenum = 0x883D
  GL_POINT_SPRITE*: GLenum = 0x8861
  GL_COORD_REPLACE*: GLenum = 0x8862
  GL_MAX_VERTEX_ATTRIBS*: GLenum = 0x8869
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED*: GLenum = 0x886A
  GL_MAX_TEXTURE_COORDS*: GLenum = 0x8871
  GL_MAX_TEXTURE_IMAGE_UNITS*: GLenum = 0x8872
  GL_FRAGMENT_SHADER*: GLenum = 0x8B30
  GL_VERTEX_SHADER*: GLenum = 0x8B31
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS*: GLenum = 0x8B49
  GL_MAX_VERTEX_UNIFORM_COMPONENTS*: GLenum = 0x8B4A
  GL_MAX_VARYING_FLOATS*: GLenum = 0x8B4B
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS*: GLenum = 0x8B4C
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS*: GLenum = 0x8B4D
  GL_SHADER_TYPE*: GLenum = 0x8B4F
  GL_FLOAT_VEC2*: GLenum = 0x8B50
  GL_FLOAT_VEC3*: GLenum = 0x8B51
  GL_FLOAT_VEC4*: GLenum = 0x8B52
  GL_INT_VEC2*: GLenum = 0x8B53
  GL_INT_VEC3*: GLenum = 0x8B54
  GL_INT_VEC4*: GLenum = 0x8B55
  GL_BOOL*: GLenum = 0x8B56
  GL_BOOL_VEC2*: GLenum = 0x8B57
  GL_BOOL_VEC3*: GLenum = 0x8B58
  GL_BOOL_VEC4*: GLenum = 0x8B59
  GL_FLOAT_MAT2*: GLenum = 0x8B5A
  GL_FLOAT_MAT3*: GLenum = 0x8B5B
  GL_FLOAT_MAT4*: GLenum = 0x8B5C
  GL_SAMPLER_1D*: GLenum = 0x8B5D
  GL_SAMPLER_2D*: GLenum = 0x8B5E
  GL_SAMPLER_3D*: GLenum = 0x8B5F
  GL_SAMPLER_CUBE*: GLenum = 0x8B60
  GL_SAMPLER_1D_SHADOW*: GLenum = 0x8B61
  GL_SAMPLER_2D_SHADOW*: GLenum = 0x8B62
  GL_DELETE_STATUS*: GLenum = 0x8B80
  GL_COMPILE_STATUS*: GLenum = 0x8B81
  GL_LINK_STATUS*: GLenum = 0x8B82
  GL_VALIDATE_STATUS*: GLenum = 0x8B83
  GL_INFO_LOG_LENGTH*: GLenum = 0x8B84
  GL_ATTACHED_SHADERS*: GLenum = 0x8B85
  GL_ACTIVE_UNIFORMS*: GLenum = 0x8B86
  GL_ACTIVE_UNIFORM_MAX_LENGTH*: GLenum = 0x8B87
  GL_SHADER_SOURCE_LENGTH*: GLenum = 0x8B88
  GL_ACTIVE_ATTRIBUTES*: GLenum = 0x8B89
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH*: GLenum = 0x8B8A
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT*: GLenum = 0x8B8B
  GL_SHADING_LANGUAGE_VERSION*: GLenum = 0x8B8C
  GL_CURRENT_PROGRAM*: GLenum = 0x8B8D
  GL_POINT_SPRITE_COORD_ORIGIN*: GLenum = 0x8CA0
  GL_LOWER_LEFT*: GLenum = 0x8CA1
  GL_UPPER_LEFT*: GLenum = 0x8CA2
  GL_STENCIL_BACK_REF*: GLenum = 0x8CA3
  GL_STENCIL_BACK_VALUE_MASK*: GLenum = 0x8CA4
  GL_STENCIL_BACK_WRITEMASK*: GLenum = 0x8CA5
  GL_VERSION_2_1*: GLenum = 1
  GL_CURRENT_RASTER_SECONDARY_COLOR*: GLenum = 0x845F
  GL_PIXEL_PACK_BUFFER*: GLenum = 0x88EB
  GL_PIXEL_UNPACK_BUFFER*: GLenum = 0x88EC
  GL_PIXEL_PACK_BUFFER_BINDING*: GLenum = 0x88ED
  GL_PIXEL_UNPACK_BUFFER_BINDING*: GLenum = 0x88EF
  GL_FLOAT_MAT2x3*: GLenum = 0x8B65
  GL_FLOAT_MAT2x4*: GLenum = 0x8B66
  GL_FLOAT_MAT3x2*: GLenum = 0x8B67
  GL_FLOAT_MAT3x4*: GLenum = 0x8B68
  GL_FLOAT_MAT4x2*: GLenum = 0x8B69
  GL_FLOAT_MAT4x3*: GLenum = 0x8B6A
  GL_SRGB*: GLenum = 0x8C40
  GL_SRGB8*: GLenum = 0x8C41
  GL_SRGB_ALPHA*: GLenum = 0x8C42
  GL_SRGB8_ALPHA8*: GLenum = 0x8C43
  GL_SLUMINANCE_ALPHA*: GLenum = 0x8C44
  GL_SLUMINANCE8_ALPHA8*: GLenum = 0x8C45
  GL_SLUMINANCE*: GLenum = 0x8C46
  GL_SLUMINANCE8*: GLenum = 0x8C47
  GL_COMPRESSED_SRGB*: GLenum = 0x8C48
  GL_COMPRESSED_SRGB_ALPHA*: GLenum = 0x8C49
  GL_COMPRESSED_SLUMINANCE*: GLenum = 0x8C4A
  GL_COMPRESSED_SLUMINANCE_ALPHA*: GLenum = 0x8C4B
  GL_VERSION_3_0*: GLenum = 1
  GL_CLIP_DISTANCE0*: GLenum = 0x3000
  GL_CLIP_DISTANCE1*: GLenum = 0x3001
  GL_CLIP_DISTANCE2*: GLenum = 0x3002
  GL_CLIP_DISTANCE3*: GLenum = 0x3003
  GL_CLIP_DISTANCE4*: GLenum = 0x3004
  GL_CLIP_DISTANCE5*: GLenum = 0x3005
  GL_MAX_CLIP_DISTANCES*: GLenum = 0x0D32
  GL_MAX_VARYING_COMPONENTS*: GLenum = 0x8B4B
  GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT*: GLenum = 0x0001
  GL_MAJOR_VERSION*: GLenum = 0x821B
  GL_MINOR_VERSION*: GLenum = 0x821C
  GL_NUM_EXTENSIONS*: GLenum = 0x821D
  GL_CONTEXT_FLAGS*: GLenum = 0x821E
  GL_DEPTH_BUFFER*: GLenum = 0x8223
  GL_STENCIL_BUFFER*: GLenum = 0x8224
  GL_RGBA32F*: GLenum = 0x8814
  GL_RGB32F*: GLenum = 0x8815
  GL_RGBA16F*: GLenum = 0x881A
  GL_RGB16F*: GLenum = 0x881B
  GL_VERTEX_ATTRIB_ARRAY_INTEGER*: GLenum = 0x88FD
  GL_MAX_ARRAY_TEXTURE_LAYERS*: GLenum = 0x88FF
  GL_MIN_PROGRAM_TEXEL_OFFSET*: GLenum = 0x8904
  GL_MAX_PROGRAM_TEXEL_OFFSET*: GLenum = 0x8905
  GL_CLAMP_VERTEX_COLOR*: GLenum = 0x891A
  GL_CLAMP_FRAGMENT_COLOR*: GLenum = 0x891B
  GL_CLAMP_READ_COLOR*: GLenum = 0x891C
  GL_FIXED_ONLY*: GLenum = 0x891D
  GL_TEXTURE_RED_TYPE*: GLenum = 0x8C10
  GL_TEXTURE_GREEN_TYPE*: GLenum = 0x8C11
  GL_TEXTURE_BLUE_TYPE*: GLenum = 0x8C12
  GL_TEXTURE_ALPHA_TYPE*: GLenum = 0x8C13
  GL_TEXTURE_LUMINANCE_TYPE*: GLenum = 0x8C14
  GL_TEXTURE_INTENSITY_TYPE*: GLenum = 0x8C15
  GL_TEXTURE_DEPTH_TYPE*: GLenum = 0x8C16
  GL_TEXTURE_1D_ARRAY*: GLenum = 0x8C18
  GL_PROXY_TEXTURE_1D_ARRAY*: GLenum = 0x8C19
  GL_TEXTURE_2D_ARRAY*: GLenum = 0x8C1A
  GL_PROXY_TEXTURE_2D_ARRAY*: GLenum = 0x8C1B
  GL_TEXTURE_BINDING_1D_ARRAY*: GLenum = 0x8C1C
  GL_TEXTURE_BINDING_2D_ARRAY*: GLenum = 0x8C1D
  GL_R11F_G11F_B10F*: GLenum = 0x8C3A
  GL_UNSIGNED_INT_10F_11F_11F_REV*: GLenum = 0x8C3B
  GL_RGB9_E5*: GLenum = 0x8C3D
  GL_UNSIGNED_INT_5_9_9_9_REV*: GLenum = 0x8C3E
  GL_TEXTURE_SHARED_SIZE*: GLenum = 0x8C3F
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH*: GLenum = 0x8C76
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE*: GLenum = 0x8C7F
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS*: GLenum = 0x8C80
  GL_TRANSFORM_FEEDBACK_VARYINGS*: GLenum = 0x8C83
  GL_TRANSFORM_FEEDBACK_BUFFER_START*: GLenum = 0x8C84
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE*: GLenum = 0x8C85
  GL_PRIMITIVES_GENERATED*: GLenum = 0x8C87
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN*: GLenum = 0x8C88
  GL_RASTERIZER_DISCARD*: GLenum = 0x8C89
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS*: GLenum = 0x8C8A
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS*: GLenum = 0x8C8B
  GL_INTERLEAVED_ATTRIBS*: GLenum = 0x8C8C
  GL_SEPARATE_ATTRIBS*: GLenum = 0x8C8D
  GL_TRANSFORM_FEEDBACK_BUFFER*: GLenum = 0x8C8E
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING*: GLenum = 0x8C8F
  GL_RGBA32UI*: GLenum = 0x8D70
  GL_RGB32UI*: GLenum = 0x8D71
  GL_RGBA16UI*: GLenum = 0x8D76
  GL_RGB16UI*: GLenum = 0x8D77
  GL_RGBA8UI*: GLenum = 0x8D7C
  GL_RGB8UI*: GLenum = 0x8D7D
  GL_RGBA32I*: GLenum = 0x8D82
  GL_RGB32I*: GLenum = 0x8D83
  GL_RGBA16I*: GLenum = 0x8D88
  GL_RGB16I*: GLenum = 0x8D89
  GL_RGBA8I*: GLenum = 0x8D8E
  GL_RGB8I*: GLenum = 0x8D8F
  GL_RED_INTEGER*: GLenum = 0x8D94
  GL_GREEN_INTEGER*: GLenum = 0x8D95
  GL_BLUE_INTEGER*: GLenum = 0x8D96
  GL_ALPHA_INTEGER*: GLenum = 0x8D97
  GL_RGB_INTEGER*: GLenum = 0x8D98
  GL_RGBA_INTEGER*: GLenum = 0x8D99
  GL_BGR_INTEGER*: GLenum = 0x8D9A
  GL_BGRA_INTEGER*: GLenum = 0x8D9B
  GL_SAMPLER_1D_ARRAY*: GLenum = 0x8DC0
  GL_SAMPLER_2D_ARRAY*: GLenum = 0x8DC1
  GL_SAMPLER_1D_ARRAY_SHADOW*: GLenum = 0x8DC3
  GL_SAMPLER_2D_ARRAY_SHADOW*: GLenum = 0x8DC4
  GL_SAMPLER_CUBE_SHADOW*: GLenum = 0x8DC5
  GL_UNSIGNED_INT_VEC2*: GLenum = 0x8DC6
  GL_UNSIGNED_INT_VEC3*: GLenum = 0x8DC7
  GL_UNSIGNED_INT_VEC4*: GLenum = 0x8DC8
  GL_INT_SAMPLER_1D*: GLenum = 0x8DC9
  GL_INT_SAMPLER_2D*: GLenum = 0x8DCA
  GL_INT_SAMPLER_3D*: GLenum = 0x8DCB
  GL_INT_SAMPLER_CUBE*: GLenum = 0x8DCC
  GL_INT_SAMPLER_1D_ARRAY*: GLenum = 0x8DCE
  GL_INT_SAMPLER_2D_ARRAY*: GLenum = 0x8DCF
  GL_UNSIGNED_INT_SAMPLER_1D*: GLenum = 0x8DD1
  GL_UNSIGNED_INT_SAMPLER_2D*: GLenum = 0x8DD2
  GL_UNSIGNED_INT_SAMPLER_3D*: GLenum = 0x8DD3
  GL_UNSIGNED_INT_SAMPLER_CUBE*: GLenum = 0x8DD4
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY*: GLenum = 0x8DD6
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY*: GLenum = 0x8DD7
  GL_QUERY_WAIT*: GLenum = 0x8E13
  GL_QUERY_NO_WAIT*: GLenum = 0x8E14
  GL_QUERY_BY_REGION_WAIT*: GLenum = 0x8E15
  GL_QUERY_BY_REGION_NO_WAIT*: GLenum = 0x8E16
  GL_VERSION_3_1*: GLenum = 1
  GL_TEXTURE_RECTANGLE*: GLenum = 0x84F5
  GL_TEXTURE_BINDING_RECTANGLE*: GLenum = 0x84F6
  GL_PROXY_TEXTURE_RECTANGLE*: GLenum = 0x84F7
  GL_MAX_RECTANGLE_TEXTURE_SIZE*: GLenum = 0x84F8
  GL_SAMPLER_2D_RECT*: GLenum = 0x8B63
  GL_SAMPLER_2D_RECT_SHADOW*: GLenum = 0x8B64
  GL_TEXTURE_BUFFER*: GLenum = 0x8C2A
  GL_MAX_TEXTURE_BUFFER_SIZE*: GLenum = 0x8C2B
  GL_TEXTURE_BINDING_BUFFER*: GLenum = 0x8C2C
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING*: GLenum = 0x8C2D
  GL_TEXTURE_BUFFER_FORMAT*: GLenum = 0x8C2E
  GL_SAMPLER_BUFFER*: GLenum = 0x8DC2
  GL_INT_SAMPLER_2D_RECT*: GLenum = 0x8DCD
  GL_INT_SAMPLER_BUFFER*: GLenum = 0x8DD0
  GL_UNSIGNED_INT_SAMPLER_2D_RECT*: GLenum = 0x8DD5
  GL_UNSIGNED_INT_SAMPLER_BUFFER*: GLenum = 0x8DD8
  GL_RED_SNORM*: GLenum = 0x8F90
  GL_RG_SNORM*: GLenum = 0x8F91
  GL_RGB_SNORM*: GLenum = 0x8F92
  GL_RGBA_SNORM*: GLenum = 0x8F93
  GL_R8_SNORM*: GLenum = 0x8F94
  GL_RG8_SNORM*: GLenum = 0x8F95
  GL_RGB8_SNORM*: GLenum = 0x8F96
  GL_RGBA8_SNORM*: GLenum = 0x8F97
  GL_R16_SNORM*: GLenum = 0x8F98
  GL_RG16_SNORM*: GLenum = 0x8F99
  GL_RGB16_SNORM*: GLenum = 0x8F9A
  GL_RGBA16_SNORM*: GLenum = 0x8F9B
  GL_SIGNED_NORMALIZED*: GLenum = 0x8F9C
  GL_PRIMITIVE_RESTART*: GLenum = 0x8F9D
  GL_PRIMITIVE_RESTART_INDEX*: GLenum = 0x8F9E
  GL_BUFFER_ACCESS_FLAGS*: GLenum = 0x911F
  GL_BUFFER_MAP_LENGTH*: GLenum = 0x9120
  GL_BUFFER_MAP_OFFSET*: GLenum = 0x9121
  GL_VERSION_3_2*: GLenum = 1
  GL_CONTEXT_CORE_PROFILE_BIT*: GLenum = 0x00000001
  GL_CONTEXT_COMPATIBILITY_PROFILE_BIT*: GLenum = 0x00000002
  GL_LINES_ADJACENCY*: GLenum = 0x000A
  GL_LINE_STRIP_ADJACENCY*: GLenum = 0x000B
  GL_TRIANGLES_ADJACENCY*: GLenum = 0x000C
  GL_TRIANGLE_STRIP_ADJACENCY*: GLenum = 0x000D
  GL_PROGRAM_POINT_SIZE*: GLenum = 0x8642
  GL_GEOMETRY_VERTICES_OUT*: GLenum = 0x8916
  GL_GEOMETRY_INPUT_TYPE*: GLenum = 0x8917
  GL_GEOMETRY_OUTPUT_TYPE*: GLenum = 0x8918
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS*: GLenum = 0x8C29
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED*: GLenum = 0x8DA7
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS*: GLenum = 0x8DA8
  GL_GEOMETRY_SHADER*: GLenum = 0x8DD9
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS*: GLenum = 0x8DDF
  GL_MAX_GEOMETRY_OUTPUT_VERTICES*: GLenum = 0x8DE0
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS*: GLenum = 0x8DE1
  GL_MAX_VERTEX_OUTPUT_COMPONENTS*: GLenum = 0x9122
  GL_MAX_GEOMETRY_INPUT_COMPONENTS*: GLenum = 0x9123
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS*: GLenum = 0x9124
  GL_MAX_FRAGMENT_INPUT_COMPONENTS*: GLenum = 0x9125
  GL_CONTEXT_PROFILE_MASK*: GLenum = 0x9126
  GL_VERSION_3_3*: GLenum = 1
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR*: GLenum = 0x88FE
  GL_RGB10_A2UI*: GLenum = 0x906F
  GL_VERSION_4_0*: GLenum = 1
  GL_SAMPLE_SHADING*: GLenum = 0x8C36
  GL_MIN_SAMPLE_SHADING_VALUE*: GLenum = 0x8C37
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET*: GLenum = 0x8E5E
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET*: GLenum = 0x8E5F
  GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS*: GLenum = 0x8F9F
  GL_TEXTURE_CUBE_MAP_ARRAY*: GLenum = 0x9009
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY*: GLenum = 0x900A
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY*: GLenum = 0x900B
  GL_SAMPLER_CUBE_MAP_ARRAY*: GLenum = 0x900C
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW*: GLenum = 0x900D
  GL_INT_SAMPLER_CUBE_MAP_ARRAY*: GLenum = 0x900E
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY*: GLenum = 0x900F
  GL_VERSION_4_1*: GLenum = 1
  GL_VERSION_4_2*: GLenum = 1
  GL_TRANSFORM_FEEDBACK_PAUSED*: GLenum = 0x8E23
  GL_TRANSFORM_FEEDBACK_ACTIVE*: GLenum = 0x8E24
  GL_COMPRESSED_RGBA_BPTC_UNORM*: GLenum = 0x8E8C
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM*: GLenum = 0x8E8D
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT*: GLenum = 0x8E8E
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT*: GLenum = 0x8E8F
  GL_COPY_READ_BUFFER_BINDING*: GLenum = 0x8F36
  GL_COPY_WRITE_BUFFER_BINDING*: GLenum = 0x8F37
  GL_VERSION_4_3*: GLenum = 1
  GL_NUM_SHADING_LANGUAGE_VERSIONS*: GLenum = 0x82E9
  GL_VERTEX_ATTRIB_ARRAY_LONG*: GLenum = 0x874E
  GL_VERSION_4_4*: GLenum = 1
  GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED*: GLenum = 0x8221
  GL_MAX_VERTEX_ATTRIB_STRIDE*: GLenum = 0x82E5
  GL_TEXTURE_BUFFER_BINDING*: GLenum = 0x8C2A
  GL_VERSION_4_5*: GLenum = 1
  GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT*: GLenum = 0x00000004
  GL_VERSION_4_6*: GLenum = 1
  GL_CONTEXT_FLAG_NO_ERROR_BIT*: GLenum = 0x00000008
  GL_PARAMETER_BUFFER*: GLenum = 0x80EE
  GL_PARAMETER_BUFFER_BINDING*: GLenum = 0x80EF
  GL_TRANSFORM_FEEDBACK_OVERFLOW*: GLenum = 0x82EC
  GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW*: GLenum = 0x82ED
  GL_VERTICES_SUBMITTED*: GLenum = 0x82EE
  GL_PRIMITIVES_SUBMITTED*: GLenum = 0x82EF
  GL_VERTEX_SHADER_INVOCATIONS*: GLenum = 0x82F0
  GL_TESS_CONTROL_SHADER_PATCHES*: GLenum = 0x82F1
  GL_TESS_EVALUATION_SHADER_INVOCATIONS*: GLenum = 0x82F2
  GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED*: GLenum = 0x82F3
  GL_FRAGMENT_SHADER_INVOCATIONS*: GLenum = 0x82F4
  GL_COMPUTE_SHADER_INVOCATIONS*: GLenum = 0x82F5
  GL_CLIPPING_INPUT_PRIMITIVES*: GLenum = 0x82F6
  GL_CLIPPING_OUTPUT_PRIMITIVES*: GLenum = 0x82F7
  GL_TEXTURE_MAX_ANISOTROPY*: GLenum = 0x84FE
  GL_MAX_TEXTURE_MAX_ANISOTROPY*: GLenum = 0x84FF
  GL_POLYGON_OFFSET_CLAMP*: GLenum = 0x8E1B
  GL_SHADER_BINARY_FORMAT_SPIR_V*: GLenum = 0x9551
  GL_SPIR_V_BINARY*: GLenum = 0x9552
  GL_SPIR_V_EXTENSIONS*: GLenum = 0x9553
  GL_NUM_SPIR_V_EXTENSIONS*: GLenum = 0x9554
  GL_3DFX_multisample*: GLenum = 1
  GL_MULTISAMPLE_3DFX*: GLenum = 0x86B2
  GL_SAMPLE_BUFFERS_3DFX*: GLenum = 0x86B3
  GL_SAMPLES_3DFX*: GLenum = 0x86B4
  GL_MULTISAMPLE_BIT_3DFX*: GLenum64 = 0x20000000u
  GL_3DFX_tbuffer*: GLenum = 1
  GL_3DFX_texture_compression_FXT1*: GLenum = 1
  GL_COMPRESSED_RGB_FXT1_3DFX*: GLenum = 0x86B0
  GL_COMPRESSED_RGBA_FXT1_3DFX*: GLenum = 0x86B1
  GL_AMD_blend_minmax_factor*: GLenum = 1
  GL_FACTOR_MIN_AMD*: GLenum = 0x901C
  GL_FACTOR_MAX_AMD*: GLenum = 0x901D
  GL_AMD_compressed_3DC_texture*: GLenum = 1
  GL_3DC_X_AMD*: GLenum = 0x87F9
  GL_3DC_XY_AMD*: GLenum = 0x87FA
  GL_AMD_compressed_ATC_texture*: GLenum = 1
  GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD*: GLenum = 0x87EE
  GL_ATC_RGB_AMD*: GLenum = 0x8C92
  GL_ATC_RGBA_EXPLICIT_ALPHA_AMD*: GLenum = 0x8C93
  GL_AMD_conservative_depth*: GLenum = 1
  GL_AMD_debug_output*: GLenum = 1
  GL_MAX_DEBUG_MESSAGE_LENGTH_AMD*: GLenum = 0x9143
  GL_MAX_DEBUG_LOGGED_MESSAGES_AMD*: GLenum = 0x9144
  GL_DEBUG_LOGGED_MESSAGES_AMD*: GLenum = 0x9145
  GL_DEBUG_SEVERITY_HIGH_AMD*: GLenum = 0x9146
  GL_DEBUG_SEVERITY_MEDIUM_AMD*: GLenum = 0x9147
  GL_DEBUG_SEVERITY_LOW_AMD*: GLenum = 0x9148
  GL_DEBUG_CATEGORY_API_ERROR_AMD*: GLenum = 0x9149
  GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD*: GLenum = 0x914A
  GL_DEBUG_CATEGORY_DEPRECATION_AMD*: GLenum = 0x914B
  GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD*: GLenum = 0x914C
  GL_DEBUG_CATEGORY_PERFORMANCE_AMD*: GLenum = 0x914D
  GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD*: GLenum = 0x914E
  GL_DEBUG_CATEGORY_APPLICATION_AMD*: GLenum = 0x914F
  GL_DEBUG_CATEGORY_OTHER_AMD*: GLenum = 0x9150
  GL_AMD_depth_clamp_separate*: GLenum = 1
  GL_DEPTH_CLAMP_NEAR_AMD*: GLenum = 0x901E
  GL_DEPTH_CLAMP_FAR_AMD*: GLenum = 0x901F
  GL_AMD_draw_buffers_blend*: GLenum = 1
  GL_AMD_framebuffer_sample_positions*: GLenum = 1
  GL_SUBSAMPLE_DISTANCE_AMD*: GLenum = 0x883F
  GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD*: GLenum = 0x91AE
  GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD*: GLenum = 0x91AF
  GL_ALL_PIXELS_AMD*: GLenum64 = 0xFFFFFFFFu
  GL_AMD_gcn_shader*: GLenum = 1
  GL_AMD_gpu_shader_half_float*: GLenum = 1
  GL_FLOAT16_NV*: GLenum = 0x8FF8
  GL_FLOAT16_VEC2_NV*: GLenum = 0x8FF9
  GL_FLOAT16_VEC3_NV*: GLenum = 0x8FFA
  GL_FLOAT16_VEC4_NV*: GLenum = 0x8FFB
  GL_FLOAT16_MAT2_AMD*: GLenum = 0x91C5
  GL_FLOAT16_MAT3_AMD*: GLenum = 0x91C6
  GL_FLOAT16_MAT4_AMD*: GLenum = 0x91C7
  GL_FLOAT16_MAT2x3_AMD*: GLenum = 0x91C8
  GL_FLOAT16_MAT2x4_AMD*: GLenum = 0x91C9
  GL_FLOAT16_MAT3x2_AMD*: GLenum = 0x91CA
  GL_FLOAT16_MAT3x4_AMD*: GLenum = 0x91CB
  GL_FLOAT16_MAT4x2_AMD*: GLenum = 0x91CC
  GL_FLOAT16_MAT4x3_AMD*: GLenum = 0x91CD
  GL_AMD_gpu_shader_int16*: GLenum = 1
  GL_AMD_gpu_shader_int64*: GLenum = 1
  GL_AMD_interleaved_elements*: GLenum = 1
  GL_RG8UI*: GLenum = 0x8238
  GL_RG16UI*: GLenum = 0x823A
  GL_VERTEX_ELEMENT_SWIZZLE_AMD*: GLenum = 0x91A4
  GL_VERTEX_ID_SWIZZLE_AMD*: GLenum = 0x91A5
  GL_AMD_multi_draw_indirect*: GLenum = 1
  GL_AMD_name_gen_delete*: GLenum = 1
  GL_DATA_BUFFER_AMD*: GLenum = 0x9151
  GL_PERFORMANCE_MONITOR_AMD*: GLenum = 0x9152
  GL_QUERY_OBJECT_AMD*: GLenum = 0x9153
  GL_VERTEX_ARRAY_OBJECT_AMD*: GLenum = 0x9154
  GL_SAMPLER_OBJECT_AMD*: GLenum = 0x9155
  GL_AMD_occlusion_query_event*: GLenum = 1
  GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD*: GLenum = 0x00000001
  GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD*: GLenum = 0x00000002
  GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD*: GLenum = 0x00000004
  GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD*: GLenum = 0x00000008
  GL_OCCLUSION_QUERY_EVENT_MASK_AMD*: GLenum = 0x874F
  GL_QUERY_ALL_EVENT_BITS_AMD*: GLenum64 = 0xFFFFFFFFu
  GL_AMD_performance_monitor*: GLenum = 1
  GL_COUNTER_TYPE_AMD*: GLenum = 0x8BC0
  GL_COUNTER_RANGE_AMD*: GLenum = 0x8BC1
  GL_UNSIGNED_INT64_AMD*: GLenum = 0x8BC2
  GL_PERCENTAGE_AMD*: GLenum = 0x8BC3
  GL_PERFMON_RESULT_AVAILABLE_AMD*: GLenum = 0x8BC4
  GL_PERFMON_RESULT_SIZE_AMD*: GLenum = 0x8BC5
  GL_PERFMON_RESULT_AMD*: GLenum = 0x8BC6
  GL_AMD_pinned_memory*: GLenum = 1
  GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD*: GLenum = 0x9160
  GL_AMD_program_binary_Z400*: GLenum = 1
  GL_Z400_BINARY_AMD*: GLenum = 0x8740
  GL_AMD_query_buffer_object*: GLenum = 1
  GL_QUERY_BUFFER_AMD*: GLenum = 0x9192
  GL_QUERY_BUFFER_BINDING_AMD*: GLenum = 0x9193
  GL_QUERY_RESULT_NO_WAIT_AMD*: GLenum = 0x9194
  GL_AMD_sample_positions*: GLenum = 1
  GL_AMD_seamless_cubemap_per_texture*: GLenum = 1
  GL_TEXTURE_CUBE_MAP_SEAMLESS*: GLenum = 0x884F
  GL_AMD_shader_atomic_counter_ops*: GLenum = 1
  GL_AMD_shader_ballot*: GLenum = 1
  GL_AMD_shader_explicit_vertex_parameter*: GLenum = 1
  GL_AMD_shader_stencil_export*: GLenum = 1
  GL_AMD_shader_stencil_value_export*: GLenum = 1
  GL_AMD_shader_trinary_minmax*: GLenum = 1
  GL_AMD_sparse_texture*: GLenum = 1
  GL_TEXTURE_STORAGE_SPARSE_BIT_AMD*: GLenum = 0x00000001
  GL_VIRTUAL_PAGE_SIZE_X_AMD*: GLenum = 0x9195
  GL_VIRTUAL_PAGE_SIZE_Y_AMD*: GLenum = 0x9196
  GL_VIRTUAL_PAGE_SIZE_Z_AMD*: GLenum = 0x9197
  GL_MAX_SPARSE_TEXTURE_SIZE_AMD*: GLenum = 0x9198
  GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD*: GLenum = 0x9199
  GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS*: GLenum = 0x919A
  GL_MIN_SPARSE_LEVEL_AMD*: GLenum = 0x919B
  GL_MIN_LOD_WARNING_AMD*: GLenum = 0x919C
  GL_AMD_stencil_operation_extended*: GLenum = 1
  GL_SET_AMD*: GLenum = 0x874A
  GL_REPLACE_VALUE_AMD*: GLenum = 0x874B
  GL_STENCIL_OP_VALUE_AMD*: GLenum = 0x874C
  GL_STENCIL_BACK_OP_VALUE_AMD*: GLenum = 0x874D
  GL_AMD_texture_gather_bias_lod*: GLenum = 1
  GL_AMD_texture_texture4*: GLenum = 1
  GL_AMD_transform_feedback3_lines_triangles*: GLenum = 1
  GL_AMD_transform_feedback4*: GLenum = 1
  GL_STREAM_RASTERIZATION_AMD*: GLenum = 0x91A0
  GL_AMD_vertex_shader_layer*: GLenum = 1
  GL_AMD_vertex_shader_tessellator*: GLenum = 1
  GL_SAMPLER_BUFFER_AMD*: GLenum = 0x9001
  GL_INT_SAMPLER_BUFFER_AMD*: GLenum = 0x9002
  GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD*: GLenum = 0x9003
  GL_TESSELLATION_MODE_AMD*: GLenum = 0x9004
  GL_TESSELLATION_FACTOR_AMD*: GLenum = 0x9005
  GL_DISCRETE_AMD*: GLenum = 0x9006
  GL_CONTINUOUS_AMD*: GLenum = 0x9007
  GL_AMD_vertex_shader_viewport_index*: GLenum = 1
  GL_ANDROID_extension_pack_es31a*: GLenum = 1
  GL_ANGLE_depth_texture*: GLenum = 1
  GL_ANGLE_framebuffer_blit*: GLenum = 1
  GL_DRAW_FRAMEBUFFER_BINDING_ANGLE*: GLenum = 0x8CA6
  GL_READ_FRAMEBUFFER_ANGLE*: GLenum = 0x8CA8
  GL_DRAW_FRAMEBUFFER_ANGLE*: GLenum = 0x8CA9
  GL_READ_FRAMEBUFFER_BINDING_ANGLE*: GLenum = 0x8CAA
  GL_ANGLE_framebuffer_multisample*: GLenum = 1
  GL_RENDERBUFFER_SAMPLES_ANGLE*: GLenum = 0x8CAB
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE*: GLenum = 0x8D56
  GL_MAX_SAMPLES_ANGLE*: GLenum = 0x8D57
  GL_ANGLE_instanced_arrays*: GLenum = 1
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE*: GLenum = 0x88FE
  GL_ANGLE_pack_reverse_row_order*: GLenum = 1
  GL_PACK_REVERSE_ROW_ORDER_ANGLE*: GLenum = 0x93A4
  GL_ANGLE_program_binary*: GLenum = 1
  GL_PROGRAM_BINARY_ANGLE*: GLenum = 0x93A6
  GL_ANGLE_texture_compression_dxt1*: GLenum = 1
  GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE*: GLenum = 0x83F0
  GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE*: GLenum = 0x83F1
  GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE*: GLenum = 0x83F2
  GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE*: GLenum = 0x83F3
  GL_ANGLE_texture_compression_dxt3*: GLenum = 1
  GL_ANGLE_texture_compression_dxt5*: GLenum = 1
  GL_ANGLE_texture_usage*: GLenum = 1
  GL_TEXTURE_USAGE_ANGLE*: GLenum = 0x93A2
  GL_FRAMEBUFFER_ATTACHMENT_ANGLE*: GLenum = 0x93A3
  GL_ANGLE_timer_query*: GLenum = 1
  GL_QUERY_COUNTER_BITS_ANGLE*: GLenum = 0x8864
  GL_CURRENT_QUERY_ANGLE*: GLenum = 0x8865
  GL_QUERY_RESULT_ANGLE*: GLenum = 0x8866
  GL_QUERY_RESULT_AVAILABLE_ANGLE*: GLenum = 0x8867
  GL_TIME_ELAPSED_ANGLE*: GLenum = 0x88BF
  GL_TIMESTAMP_ANGLE*: GLenum = 0x8E28
  GL_ANGLE_translated_shader_source*: GLenum = 1
  GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE*: GLenum = 0x93A0
  GL_APPLE_aux_depth_stencil*: GLenum = 1
  GL_AUX_DEPTH_STENCIL_APPLE*: GLenum = 0x8A14
  GL_APPLE_client_storage*: GLenum = 1
  GL_UNPACK_CLIENT_STORAGE_APPLE*: GLenum = 0x85B2
  GL_APPLE_clip_distance*: GLenum = 1
  GL_MAX_CLIP_DISTANCES_APPLE*: GLenum = 0x0D32
  GL_CLIP_DISTANCE0_APPLE*: GLenum = 0x3000
  GL_CLIP_DISTANCE1_APPLE*: GLenum = 0x3001
  GL_CLIP_DISTANCE2_APPLE*: GLenum = 0x3002
  GL_CLIP_DISTANCE3_APPLE*: GLenum = 0x3003
  GL_CLIP_DISTANCE4_APPLE*: GLenum = 0x3004
  GL_CLIP_DISTANCE5_APPLE*: GLenum = 0x3005
  GL_CLIP_DISTANCE6_APPLE*: GLenum = 0x3006
  GL_CLIP_DISTANCE7_APPLE*: GLenum = 0x3007
  GL_APPLE_color_buffer_packed_float*: GLenum = 1
  GL_APPLE_copy_texture_levels*: GLenum = 1
  GL_APPLE_element_array*: GLenum = 1
  GL_ELEMENT_ARRAY_APPLE*: GLenum = 0x8A0C
  GL_ELEMENT_ARRAY_TYPE_APPLE*: GLenum = 0x8A0D
  GL_ELEMENT_ARRAY_POINTER_APPLE*: GLenum = 0x8A0E
  GL_APPLE_fence*: GLenum = 1
  GL_DRAW_PIXELS_APPLE*: GLenum = 0x8A0A
  GL_FENCE_APPLE*: GLenum = 0x8A0B
  GL_APPLE_float_pixels*: GLenum = 1
  GL_HALF_APPLE*: GLenum = 0x140B
  GL_RGBA_FLOAT32_APPLE*: GLenum = 0x8814
  GL_RGB_FLOAT32_APPLE*: GLenum = 0x8815
  GL_ALPHA_FLOAT32_APPLE*: GLenum = 0x8816
  GL_INTENSITY_FLOAT32_APPLE*: GLenum = 0x8817
  GL_LUMINANCE_FLOAT32_APPLE*: GLenum = 0x8818
  GL_LUMINANCE_ALPHA_FLOAT32_APPLE*: GLenum = 0x8819
  GL_RGBA_FLOAT16_APPLE*: GLenum = 0x881A
  GL_RGB_FLOAT16_APPLE*: GLenum = 0x881B
  GL_ALPHA_FLOAT16_APPLE*: GLenum = 0x881C
  GL_INTENSITY_FLOAT16_APPLE*: GLenum = 0x881D
  GL_LUMINANCE_FLOAT16_APPLE*: GLenum = 0x881E
  GL_LUMINANCE_ALPHA_FLOAT16_APPLE*: GLenum = 0x881F
  GL_COLOR_FLOAT_APPLE*: GLenum = 0x8A0F
  GL_APPLE_flush_buffer_range*: GLenum = 1
  GL_BUFFER_SERIALIZED_MODIFY_APPLE*: GLenum = 0x8A12
  GL_BUFFER_FLUSHING_UNMAP_APPLE*: GLenum = 0x8A13
  GL_APPLE_framebuffer_multisample*: GLenum = 1
  GL_DRAW_FRAMEBUFFER_BINDING_APPLE*: GLenum = 0x8CA6
  GL_READ_FRAMEBUFFER_APPLE*: GLenum = 0x8CA8
  GL_DRAW_FRAMEBUFFER_APPLE*: GLenum = 0x8CA9
  GL_READ_FRAMEBUFFER_BINDING_APPLE*: GLenum = 0x8CAA
  GL_RENDERBUFFER_SAMPLES_APPLE*: GLenum = 0x8CAB
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE*: GLenum = 0x8D56
  GL_MAX_SAMPLES_APPLE*: GLenum = 0x8D57
  GL_APPLE_object_purgeable*: GLenum = 1
  GL_BUFFER_OBJECT_APPLE*: GLenum = 0x85B3
  GL_RELEASED_APPLE*: GLenum = 0x8A19
  GL_VOLATILE_APPLE*: GLenum = 0x8A1A
  GL_RETAINED_APPLE*: GLenum = 0x8A1B
  GL_UNDEFINED_APPLE*: GLenum = 0x8A1C
  GL_PURGEABLE_APPLE*: GLenum = 0x8A1D
  GL_APPLE_pixel_buffer*: GLenum = 1
  GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE*: GLenum = 0x8A10
  GL_APPLE_rgb_422*: GLenum = 1
  GL_UNSIGNED_SHORT_8_8_APPLE*: GLenum = 0x85BA
  GL_UNSIGNED_SHORT_8_8_REV_APPLE*: GLenum = 0x85BB
  GL_RGB_422_APPLE*: GLenum = 0x8A1F
  GL_RGB_RAW_422_APPLE*: GLenum = 0x8A51
  GL_APPLE_row_bytes*: GLenum = 1
  GL_PACK_ROW_BYTES_APPLE*: GLenum = 0x8A15
  GL_UNPACK_ROW_BYTES_APPLE*: GLenum = 0x8A16
  GL_APPLE_specular_vector*: GLenum = 1
  GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE*: GLenum = 0x85B0
  GL_APPLE_sync*: GLenum = 1
  GL_SYNC_FLUSH_COMMANDS_BIT_APPLE*: GLenum = 0x00000001
  GL_SYNC_OBJECT_APPLE*: GLenum = 0x8A53
  GL_MAX_SERVER_WAIT_TIMEOUT_APPLE*: GLenum = 0x9111
  GL_OBJECT_TYPE_APPLE*: GLenum = 0x9112
  GL_SYNC_CONDITION_APPLE*: GLenum = 0x9113
  GL_SYNC_STATUS_APPLE*: GLenum = 0x9114
  GL_SYNC_FLAGS_APPLE*: GLenum = 0x9115
  GL_SYNC_FENCE_APPLE*: GLenum = 0x9116
  GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE*: GLenum = 0x9117
  GL_UNSIGNALED_APPLE*: GLenum = 0x9118
  GL_SIGNALED_APPLE*: GLenum = 0x9119
  GL_ALREADY_SIGNALED_APPLE*: GLenum = 0x911A
  GL_TIMEOUT_EXPIRED_APPLE*: GLenum = 0x911B
  GL_CONDITION_SATISFIED_APPLE*: GLenum = 0x911C
  GL_WAIT_FAILED_APPLE*: GLenum = 0x911D
  GL_APPLE_texture_2D_limited_npot*: GLenum = 1
  GL_APPLE_texture_format_BGRA8888*: GLenum = 1
  GL_BGRA_EXT*: GLenum = 0x80E1
  GL_BGRA8_EXT*: GLenum = 0x93A1
  GL_APPLE_texture_max_level*: GLenum = 1
  GL_TEXTURE_MAX_LEVEL_APPLE*: GLenum = 0x813D
  GL_APPLE_texture_packed_float*: GLenum = 1
  GL_R11F_G11F_B10F_APPLE*: GLenum = 0x8C3A
  GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE*: GLenum = 0x8C3B
  GL_RGB9_E5_APPLE*: GLenum = 0x8C3D
  GL_UNSIGNED_INT_5_9_9_9_REV_APPLE*: GLenum = 0x8C3E
  GL_APPLE_texture_range*: GLenum = 1
  GL_TEXTURE_RANGE_LENGTH_APPLE*: GLenum = 0x85B7
  GL_TEXTURE_RANGE_POINTER_APPLE*: GLenum = 0x85B8
  GL_TEXTURE_STORAGE_HINT_APPLE*: GLenum = 0x85BC
  GL_STORAGE_PRIVATE_APPLE*: GLenum = 0x85BD
  GL_STORAGE_CACHED_APPLE*: GLenum = 0x85BE
  GL_STORAGE_SHARED_APPLE*: GLenum = 0x85BF
  GL_APPLE_transform_hint*: GLenum = 1
  GL_TRANSFORM_HINT_APPLE*: GLenum = 0x85B1
  GL_APPLE_vertex_array_object*: GLenum = 1
  GL_VERTEX_ARRAY_BINDING_APPLE*: GLenum = 0x85B5
  GL_APPLE_vertex_array_range*: GLenum = 1
  GL_VERTEX_ARRAY_RANGE_APPLE*: GLenum = 0x851D
  GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE*: GLenum = 0x851E
  GL_VERTEX_ARRAY_STORAGE_HINT_APPLE*: GLenum = 0x851F
  GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE*: GLenum = 0x8520
  GL_VERTEX_ARRAY_RANGE_POINTER_APPLE*: GLenum = 0x8521
  GL_STORAGE_CLIENT_APPLE*: GLenum = 0x85B4
  GL_APPLE_vertex_program_evaluators*: GLenum = 1
  GL_VERTEX_ATTRIB_MAP1_APPLE*: GLenum = 0x8A00
  GL_VERTEX_ATTRIB_MAP2_APPLE*: GLenum = 0x8A01
  GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE*: GLenum = 0x8A02
  GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE*: GLenum = 0x8A03
  GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE*: GLenum = 0x8A04
  GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE*: GLenum = 0x8A05
  GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE*: GLenum = 0x8A06
  GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE*: GLenum = 0x8A07
  GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE*: GLenum = 0x8A08
  GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE*: GLenum = 0x8A09
  GL_APPLE_ycbcr_422*: GLenum = 1
  GL_YCBCR_422_APPLE*: GLenum = 0x85B9
  GL_ARB_ES2_compatibility*: GLenum = 1
  GL_FIXED*: GLenum = 0x140C
  GL_IMPLEMENTATION_COLOR_READ_TYPE*: GLenum = 0x8B9A
  GL_IMPLEMENTATION_COLOR_READ_FORMAT*: GLenum = 0x8B9B
  GL_RGB565*: GLenum = 0x8D62
  GL_LOW_FLOAT*: GLenum = 0x8DF0
  GL_MEDIUM_FLOAT*: GLenum = 0x8DF1
  GL_HIGH_FLOAT*: GLenum = 0x8DF2
  GL_LOW_INT*: GLenum = 0x8DF3
  GL_MEDIUM_INT*: GLenum = 0x8DF4
  GL_HIGH_INT*: GLenum = 0x8DF5
  GL_SHADER_BINARY_FORMATS*: GLenum = 0x8DF8
  GL_NUM_SHADER_BINARY_FORMATS*: GLenum = 0x8DF9
  GL_SHADER_COMPILER*: GLenum = 0x8DFA
  GL_MAX_VERTEX_UNIFORM_VECTORS*: GLenum = 0x8DFB
  GL_MAX_VARYING_VECTORS*: GLenum = 0x8DFC
  GL_MAX_FRAGMENT_UNIFORM_VECTORS*: GLenum = 0x8DFD
  GL_ARB_ES3_1_compatibility*: GLenum = 1
  GL_ARB_ES3_2_compatibility*: GLenum = 1
  GL_PRIMITIVE_BOUNDING_BOX_ARB*: GLenum = 0x92BE
  GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB*: GLenum = 0x9381
  GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB*: GLenum = 0x9382
  GL_ARB_ES3_compatibility*: GLenum = 1
  GL_TEXTURE_IMMUTABLE_LEVELS*: GLenum = 0x82DF
  GL_PRIMITIVE_RESTART_FIXED_INDEX*: GLenum = 0x8D69
  GL_ANY_SAMPLES_PASSED_CONSERVATIVE*: GLenum = 0x8D6A
  GL_MAX_ELEMENT_INDEX*: GLenum = 0x8D6B
  GL_COMPRESSED_R11_EAC*: GLenum = 0x9270
  GL_COMPRESSED_SIGNED_R11_EAC*: GLenum = 0x9271
  GL_COMPRESSED_RG11_EAC*: GLenum = 0x9272
  GL_COMPRESSED_SIGNED_RG11_EAC*: GLenum = 0x9273
  GL_COMPRESSED_RGB8_ETC2*: GLenum = 0x9274
  GL_COMPRESSED_SRGB8_ETC2*: GLenum = 0x9275
  GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2*: GLenum = 0x9276
  GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2*: GLenum = 0x9277
  GL_COMPRESSED_RGBA8_ETC2_EAC*: GLenum = 0x9278
  GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC*: GLenum = 0x9279
  GL_ARB_arrays_of_arrays*: GLenum = 1
  GL_ARB_base_instance*: GLenum = 1
  GL_ARB_bindless_texture*: GLenum = 1
  GL_UNSIGNED_INT64_ARB*: GLenum = 0x140F
  GL_ARB_blend_func_extended*: GLenum = 1
  GL_SRC1_COLOR*: GLenum = 0x88F9
  GL_ONE_MINUS_SRC1_COLOR*: GLenum = 0x88FA
  GL_ONE_MINUS_SRC1_ALPHA*: GLenum = 0x88FB
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS*: GLenum = 0x88FC
  GL_ARB_buffer_storage*: GLenum = 1
  GL_MAP_READ_BIT*: GLenum = 0x0001
  GL_MAP_WRITE_BIT*: GLenum = 0x0002
  GL_MAP_PERSISTENT_BIT*: GLenum = 0x00000040
  GL_MAP_COHERENT_BIT*: GLenum = 0x00000080
  GL_DYNAMIC_STORAGE_BIT*: GLenum = 0x0100
  GL_CLIENT_STORAGE_BIT*: GLenum = 0x0200
  GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT*: GLenum = 0x00004000
  GL_BUFFER_IMMUTABLE_STORAGE*: GLenum = 0x821F
  GL_BUFFER_STORAGE_FLAGS*: GLenum = 0x8220
  GL_ARB_cl_event*: GLenum = 1
  GL_SYNC_CL_EVENT_ARB*: GLenum = 0x8240
  GL_SYNC_CL_EVENT_COMPLETE_ARB*: GLenum = 0x8241
  GL_ARB_clear_buffer_object*: GLenum = 1
  GL_ARB_clear_texture*: GLenum = 1
  GL_CLEAR_TEXTURE*: GLenum = 0x9365
  GL_ARB_clip_control*: GLenum = 1
  GL_CLIP_ORIGIN*: GLenum = 0x935C
  GL_CLIP_DEPTH_MODE*: GLenum = 0x935D
  GL_NEGATIVE_ONE_TO_ONE*: GLenum = 0x935E
  GL_ZERO_TO_ONE*: GLenum = 0x935F
  GL_ARB_color_buffer_float*: GLenum = 1
  GL_RGBA_FLOAT_MODE_ARB*: GLenum = 0x8820
  GL_CLAMP_VERTEX_COLOR_ARB*: GLenum = 0x891A
  GL_CLAMP_FRAGMENT_COLOR_ARB*: GLenum = 0x891B
  GL_CLAMP_READ_COLOR_ARB*: GLenum = 0x891C
  GL_FIXED_ONLY_ARB*: GLenum = 0x891D
  GL_ARB_compatibility*: GLenum = 1
  GL_ARB_compressed_texture_pixel_storage*: GLenum = 1
  GL_UNPACK_COMPRESSED_BLOCK_WIDTH*: GLenum = 0x9127
  GL_UNPACK_COMPRESSED_BLOCK_HEIGHT*: GLenum = 0x9128
  GL_UNPACK_COMPRESSED_BLOCK_DEPTH*: GLenum = 0x9129
  GL_UNPACK_COMPRESSED_BLOCK_SIZE*: GLenum = 0x912A
  GL_PACK_COMPRESSED_BLOCK_WIDTH*: GLenum = 0x912B
  GL_PACK_COMPRESSED_BLOCK_HEIGHT*: GLenum = 0x912C
  GL_PACK_COMPRESSED_BLOCK_DEPTH*: GLenum = 0x912D
  GL_PACK_COMPRESSED_BLOCK_SIZE*: GLenum = 0x912E
  GL_ARB_compute_shader*: GLenum = 1
  GL_COMPUTE_SHADER_BIT*: GLenum = 0x00000020
  GL_MAX_COMPUTE_SHARED_MEMORY_SIZE*: GLenum = 0x8262
  GL_MAX_COMPUTE_UNIFORM_COMPONENTS*: GLenum = 0x8263
  GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS*: GLenum = 0x8264
  GL_MAX_COMPUTE_ATOMIC_COUNTERS*: GLenum = 0x8265
  GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS*: GLenum = 0x8266
  GL_COMPUTE_WORK_GROUP_SIZE*: GLenum = 0x8267
  GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS*: GLenum = 0x90EB
  GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER*: GLenum = 0x90EC
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER*: GLenum = 0x90ED
  GL_DISPATCH_INDIRECT_BUFFER*: GLenum = 0x90EE
  GL_DISPATCH_INDIRECT_BUFFER_BINDING*: GLenum = 0x90EF
  GL_COMPUTE_SHADER*: GLenum = 0x91B9
  GL_MAX_COMPUTE_UNIFORM_BLOCKS*: GLenum = 0x91BB
  GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS*: GLenum = 0x91BC
  GL_MAX_COMPUTE_IMAGE_UNIFORMS*: GLenum = 0x91BD
  GL_MAX_COMPUTE_WORK_GROUP_COUNT*: GLenum = 0x91BE
  GL_MAX_COMPUTE_WORK_GROUP_SIZE*: GLenum = 0x91BF
  GL_ARB_compute_variable_group_size*: GLenum = 1
  GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB*: GLenum = 0x90EB
  GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB*: GLenum = 0x91BF
  GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB*: GLenum = 0x9344
  GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB*: GLenum = 0x9345
  GL_ARB_conditional_render_inverted*: GLenum = 1
  GL_QUERY_WAIT_INVERTED*: GLenum = 0x8E17
  GL_QUERY_NO_WAIT_INVERTED*: GLenum = 0x8E18
  GL_QUERY_BY_REGION_WAIT_INVERTED*: GLenum = 0x8E19
  GL_QUERY_BY_REGION_NO_WAIT_INVERTED*: GLenum = 0x8E1A
  GL_ARB_conservative_depth*: GLenum = 1
  GL_ARB_copy_buffer*: GLenum = 1
  GL_COPY_READ_BUFFER*: GLenum = 0x8F36
  GL_COPY_WRITE_BUFFER*: GLenum = 0x8F37
  GL_ARB_copy_image*: GLenum = 1
  GL_ARB_cull_distance*: GLenum = 1
  GL_MAX_CULL_DISTANCES*: GLenum = 0x82F9
  GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES*: GLenum = 0x82FA
  GL_ARB_debug_output*: GLenum = 1
  GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB*: GLenum = 0x8242
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB*: GLenum = 0x8243
  GL_DEBUG_CALLBACK_FUNCTION_ARB*: GLenum = 0x8244
  GL_DEBUG_CALLBACK_USER_PARAM_ARB*: GLenum = 0x8245
  GL_DEBUG_SOURCE_API_ARB*: GLenum = 0x8246
  GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB*: GLenum = 0x8247
  GL_DEBUG_SOURCE_SHADER_COMPILER_ARB*: GLenum = 0x8248
  GL_DEBUG_SOURCE_THIRD_PARTY_ARB*: GLenum = 0x8249
  GL_DEBUG_SOURCE_APPLICATION_ARB*: GLenum = 0x824A
  GL_DEBUG_SOURCE_OTHER_ARB*: GLenum = 0x824B
  GL_DEBUG_TYPE_ERROR_ARB*: GLenum = 0x824C
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB*: GLenum = 0x824D
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB*: GLenum = 0x824E
  GL_DEBUG_TYPE_PORTABILITY_ARB*: GLenum = 0x824F
  GL_DEBUG_TYPE_PERFORMANCE_ARB*: GLenum = 0x8250
  GL_DEBUG_TYPE_OTHER_ARB*: GLenum = 0x8251
  GL_MAX_DEBUG_MESSAGE_LENGTH_ARB*: GLenum = 0x9143
  GL_MAX_DEBUG_LOGGED_MESSAGES_ARB*: GLenum = 0x9144
  GL_DEBUG_LOGGED_MESSAGES_ARB*: GLenum = 0x9145
  GL_DEBUG_SEVERITY_HIGH_ARB*: GLenum = 0x9146
  GL_DEBUG_SEVERITY_MEDIUM_ARB*: GLenum = 0x9147
  GL_DEBUG_SEVERITY_LOW_ARB*: GLenum = 0x9148
  GL_ARB_depth_buffer_float*: GLenum = 1
  GL_DEPTH_COMPONENT32F*: GLenum = 0x8CAC
  GL_DEPTH32F_STENCIL8*: GLenum = 0x8CAD
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV*: GLenum = 0x8DAD
  GL_ARB_depth_clamp*: GLenum = 1
  GL_DEPTH_CLAMP*: GLenum = 0x864F
  GL_ARB_depth_texture*: GLenum = 1
  GL_DEPTH_COMPONENT16_ARB*: GLenum = 0x81A5
  GL_DEPTH_COMPONENT24_ARB*: GLenum = 0x81A6
  GL_DEPTH_COMPONENT32_ARB*: GLenum = 0x81A7
  GL_TEXTURE_DEPTH_SIZE_ARB*: GLenum = 0x884A
  GL_DEPTH_TEXTURE_MODE_ARB*: GLenum = 0x884B
  GL_ARB_derivative_control*: GLenum = 1
  GL_ARB_direct_state_access*: GLenum = 1
  GL_TEXTURE_TARGET*: GLenum = 0x1006
  GL_QUERY_TARGET*: GLenum = 0x82EA
  GL_ARB_draw_buffers*: GLenum = 1
  GL_MAX_DRAW_BUFFERS_ARB*: GLenum = 0x8824
  GL_DRAW_BUFFER0_ARB*: GLenum = 0x8825
  GL_DRAW_BUFFER1_ARB*: GLenum = 0x8826
  GL_DRAW_BUFFER2_ARB*: GLenum = 0x8827
  GL_DRAW_BUFFER3_ARB*: GLenum = 0x8828
  GL_DRAW_BUFFER4_ARB*: GLenum = 0x8829
  GL_DRAW_BUFFER5_ARB*: GLenum = 0x882A
  GL_DRAW_BUFFER6_ARB*: GLenum = 0x882B
  GL_DRAW_BUFFER7_ARB*: GLenum = 0x882C
  GL_DRAW_BUFFER8_ARB*: GLenum = 0x882D
  GL_DRAW_BUFFER9_ARB*: GLenum = 0x882E
  GL_DRAW_BUFFER10_ARB*: GLenum = 0x882F
  GL_DRAW_BUFFER11_ARB*: GLenum = 0x8830
  GL_DRAW_BUFFER12_ARB*: GLenum = 0x8831
  GL_DRAW_BUFFER13_ARB*: GLenum = 0x8832
  GL_DRAW_BUFFER14_ARB*: GLenum = 0x8833
  GL_DRAW_BUFFER15_ARB*: GLenum = 0x8834
  GL_ARB_draw_buffers_blend*: GLenum = 1
  GL_ARB_draw_elements_base_vertex*: GLenum = 1
  GL_ARB_draw_indirect*: GLenum = 1
  GL_DRAW_INDIRECT_BUFFER*: GLenum = 0x8F3F
  GL_DRAW_INDIRECT_BUFFER_BINDING*: GLenum = 0x8F43
  GL_ARB_draw_instanced*: GLenum = 1
  GL_ARB_enhanced_layouts*: GLenum = 1
  GL_LOCATION_COMPONENT*: GLenum = 0x934A
  GL_TRANSFORM_FEEDBACK_BUFFER_INDEX*: GLenum = 0x934B
  GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE*: GLenum = 0x934C
  GL_ARB_explicit_attrib_location*: GLenum = 1
  GL_ARB_explicit_uniform_location*: GLenum = 1
  GL_MAX_UNIFORM_LOCATIONS*: GLenum = 0x826E
  GL_ARB_fragment_coord_conventions*: GLenum = 1
  GL_ARB_fragment_layer_viewport*: GLenum = 1
  GL_ARB_fragment_program*: GLenum = 1
  GL_FRAGMENT_PROGRAM_ARB*: GLenum = 0x8804
  GL_PROGRAM_ALU_INSTRUCTIONS_ARB*: GLenum = 0x8805
  GL_PROGRAM_TEX_INSTRUCTIONS_ARB*: GLenum = 0x8806
  GL_PROGRAM_TEX_INDIRECTIONS_ARB*: GLenum = 0x8807
  GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB*: GLenum = 0x8808
  GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB*: GLenum = 0x8809
  GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB*: GLenum = 0x880A
  GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB*: GLenum = 0x880B
  GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB*: GLenum = 0x880C
  GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB*: GLenum = 0x880D
  GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB*: GLenum = 0x880E
  GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB*: GLenum = 0x880F
  GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB*: GLenum = 0x8810
  GL_MAX_TEXTURE_COORDS_ARB*: GLenum = 0x8871
  GL_MAX_TEXTURE_IMAGE_UNITS_ARB*: GLenum = 0x8872
  GL_ARB_fragment_program_shadow*: GLenum = 1
  GL_ARB_fragment_shader*: GLenum = 1
  GL_FRAGMENT_SHADER_ARB*: GLenum = 0x8B30
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB*: GLenum = 0x8B49
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB*: GLenum = 0x8B8B
  GL_ARB_fragment_shader_interlock*: GLenum = 1
  GL_ARB_framebuffer_no_attachments*: GLenum = 1
  GL_FRAMEBUFFER_DEFAULT_WIDTH*: GLenum = 0x9310
  GL_FRAMEBUFFER_DEFAULT_HEIGHT*: GLenum = 0x9311
  GL_FRAMEBUFFER_DEFAULT_LAYERS*: GLenum = 0x9312
  GL_FRAMEBUFFER_DEFAULT_SAMPLES*: GLenum = 0x9313
  GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS*: GLenum = 0x9314
  GL_MAX_FRAMEBUFFER_WIDTH*: GLenum = 0x9315
  GL_MAX_FRAMEBUFFER_HEIGHT*: GLenum = 0x9316
  GL_MAX_FRAMEBUFFER_LAYERS*: GLenum = 0x9317
  GL_MAX_FRAMEBUFFER_SAMPLES*: GLenum = 0x9318
  GL_ARB_framebuffer_object*: GLenum = 1
  GL_INVALID_FRAMEBUFFER_OPERATION*: GLenum = 0x0506
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING*: GLenum = 0x8210
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE*: GLenum = 0x8211
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE*: GLenum = 0x8212
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE*: GLenum = 0x8213
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE*: GLenum = 0x8214
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE*: GLenum = 0x8215
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE*: GLenum = 0x8216
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE*: GLenum = 0x8217
  GL_FRAMEBUFFER_DEFAULT*: GLenum = 0x8218
  GL_FRAMEBUFFER_UNDEFINED*: GLenum = 0x8219
  GL_DEPTH_STENCIL_ATTACHMENT*: GLenum = 0x821A
  GL_INDEX*: GLenum = 0x8222
  GL_MAX_RENDERBUFFER_SIZE*: GLenum = 0x84E8
  GL_DEPTH_STENCIL*: GLenum = 0x84F9
  GL_UNSIGNED_INT_24_8*: GLenum = 0x84FA
  GL_DEPTH24_STENCIL8*: GLenum = 0x88F0
  GL_TEXTURE_STENCIL_SIZE*: GLenum = 0x88F1
  GL_UNSIGNED_NORMALIZED*: GLenum = 0x8C17
  GL_DRAW_FRAMEBUFFER_BINDING*: GLenum = 0x8CA6
  GL_FRAMEBUFFER_BINDING*: GLenum = 0x8CA6
  GL_RENDERBUFFER_BINDING*: GLenum = 0x8CA7
  GL_READ_FRAMEBUFFER*: GLenum = 0x8CA8
  GL_DRAW_FRAMEBUFFER*: GLenum = 0x8CA9
  GL_READ_FRAMEBUFFER_BINDING*: GLenum = 0x8CAA
  GL_RENDERBUFFER_SAMPLES*: GLenum = 0x8CAB
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE*: GLenum = 0x8CD0
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME*: GLenum = 0x8CD1
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL*: GLenum = 0x8CD2
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE*: GLenum = 0x8CD3
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER*: GLenum = 0x8CD4
  GL_FRAMEBUFFER_COMPLETE*: GLenum = 0x8CD5
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT*: GLenum = 0x8CD6
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT*: GLenum = 0x8CD7
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER*: GLenum = 0x8CDB
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER*: GLenum = 0x8CDC
  GL_FRAMEBUFFER_UNSUPPORTED*: GLenum = 0x8CDD
  GL_MAX_COLOR_ATTACHMENTS*: GLenum = 0x8CDF
  GL_COLOR_ATTACHMENT0*: GLenum = 0x8CE0
  GL_COLOR_ATTACHMENT1*: GLenum = 0x8CE1
  GL_COLOR_ATTACHMENT2*: GLenum = 0x8CE2
  GL_COLOR_ATTACHMENT3*: GLenum = 0x8CE3
  GL_COLOR_ATTACHMENT4*: GLenum = 0x8CE4
  GL_COLOR_ATTACHMENT5*: GLenum = 0x8CE5
  GL_COLOR_ATTACHMENT6*: GLenum = 0x8CE6
  GL_COLOR_ATTACHMENT7*: GLenum = 0x8CE7
  GL_COLOR_ATTACHMENT8*: GLenum = 0x8CE8
  GL_COLOR_ATTACHMENT9*: GLenum = 0x8CE9
  GL_COLOR_ATTACHMENT10*: GLenum = 0x8CEA
  GL_COLOR_ATTACHMENT11*: GLenum = 0x8CEB
  GL_COLOR_ATTACHMENT12*: GLenum = 0x8CEC
  GL_COLOR_ATTACHMENT13*: GLenum = 0x8CED
  GL_COLOR_ATTACHMENT14*: GLenum = 0x8CEE
  GL_COLOR_ATTACHMENT15*: GLenum = 0x8CEF
  GL_DEPTH_ATTACHMENT*: GLenum = 0x8D00
  GL_STENCIL_ATTACHMENT*: GLenum = 0x8D20
  GL_FRAMEBUFFER*: GLenum = 0x8D40
  GL_RENDERBUFFER*: GLenum = 0x8D41
  GL_RENDERBUFFER_WIDTH*: GLenum = 0x8D42
  GL_RENDERBUFFER_HEIGHT*: GLenum = 0x8D43
  GL_RENDERBUFFER_INTERNAL_FORMAT*: GLenum = 0x8D44
  GL_STENCIL_INDEX1*: GLenum = 0x8D46
  GL_STENCIL_INDEX4*: GLenum = 0x8D47
  GL_STENCIL_INDEX8*: GLenum = 0x8D48
  GL_STENCIL_INDEX16*: GLenum = 0x8D49
  GL_RENDERBUFFER_RED_SIZE*: GLenum = 0x8D50
  GL_RENDERBUFFER_GREEN_SIZE*: GLenum = 0x8D51
  GL_RENDERBUFFER_BLUE_SIZE*: GLenum = 0x8D52
  GL_RENDERBUFFER_ALPHA_SIZE*: GLenum = 0x8D53
  GL_RENDERBUFFER_DEPTH_SIZE*: GLenum = 0x8D54
  GL_RENDERBUFFER_STENCIL_SIZE*: GLenum = 0x8D55
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE*: GLenum = 0x8D56
  GL_MAX_SAMPLES*: GLenum = 0x8D57
  GL_ARB_framebuffer_sRGB*: GLenum = 1
  GL_FRAMEBUFFER_SRGB*: GLenum = 0x8DB9
  GL_ARB_geometry_shader4*: GLenum = 1
  GL_LINES_ADJACENCY_ARB*: GLenum = 0xA
  GL_LINE_STRIP_ADJACENCY_ARB*: GLenum = 0xB
  GL_TRIANGLES_ADJACENCY_ARB*: GLenum = 0xC
  GL_TRIANGLE_STRIP_ADJACENCY_ARB*: GLenum = 0xD
  GL_PROGRAM_POINT_SIZE_ARB*: GLenum = 0x8642
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB*: GLenum = 0x8C29
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB*: GLenum = 0x8DA7
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB*: GLenum = 0x8DA8
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB*: GLenum = 0x8DA9
  GL_GEOMETRY_SHADER_ARB*: GLenum = 0x8DD9
  GL_GEOMETRY_VERTICES_OUT_ARB*: GLenum = 0x8DDA
  GL_GEOMETRY_INPUT_TYPE_ARB*: GLenum = 0x8DDB
  GL_GEOMETRY_OUTPUT_TYPE_ARB*: GLenum = 0x8DDC
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB*: GLenum = 0x8DDD
  GL_MAX_VERTEX_VARYING_COMPONENTS_ARB*: GLenum = 0x8DDE
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB*: GLenum = 0x8DDF
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB*: GLenum = 0x8DE0
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB*: GLenum = 0x8DE1
  GL_ARB_get_program_binary*: GLenum = 1
  GL_PROGRAM_BINARY_RETRIEVABLE_HINT*: GLenum = 0x8257
  GL_PROGRAM_BINARY_LENGTH*: GLenum = 0x8741
  GL_NUM_PROGRAM_BINARY_FORMATS*: GLenum = 0x87FE
  GL_PROGRAM_BINARY_FORMATS*: GLenum = 0x87FF
  GL_ARB_get_texture_sub_image*: GLenum = 1
  GL_ARB_gl_spirv*: GLenum = 1
  GL_SHADER_BINARY_FORMAT_SPIR_V_ARB*: GLenum = 0x9551
  GL_SPIR_V_BINARY_ARB*: GLenum = 0x9552
  GL_ARB_gpu_shader5*: GLenum = 1
  GL_GEOMETRY_SHADER_INVOCATIONS*: GLenum = 0x887F
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS*: GLenum = 0x8E5A
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET*: GLenum = 0x8E5B
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET*: GLenum = 0x8E5C
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS*: GLenum = 0x8E5D
  GL_MAX_VERTEX_STREAMS*: GLenum = 0x8E71
  GL_ARB_gpu_shader_fp64*: GLenum = 1
  GL_DOUBLE_MAT2*: GLenum = 0x8F46
  GL_DOUBLE_MAT3*: GLenum = 0x8F47
  GL_DOUBLE_MAT4*: GLenum = 0x8F48
  GL_DOUBLE_MAT2x3*: GLenum = 0x8F49
  GL_DOUBLE_MAT2x4*: GLenum = 0x8F4A
  GL_DOUBLE_MAT3x2*: GLenum = 0x8F4B
  GL_DOUBLE_MAT3x4*: GLenum = 0x8F4C
  GL_DOUBLE_MAT4x2*: GLenum = 0x8F4D
  GL_DOUBLE_MAT4x3*: GLenum = 0x8F4E
  GL_DOUBLE_VEC2*: GLenum = 0x8FFC
  GL_DOUBLE_VEC3*: GLenum = 0x8FFD
  GL_DOUBLE_VEC4*: GLenum = 0x8FFE
  GL_ARB_gpu_shader_int64*: GLenum = 1
  GL_INT64_ARB*: GLenum = 0x140E
  GL_INT64_VEC2_ARB*: GLenum = 0x8FE9
  GL_INT64_VEC3_ARB*: GLenum = 0x8FEA
  GL_INT64_VEC4_ARB*: GLenum = 0x8FEB
  GL_UNSIGNED_INT64_VEC2_ARB*: GLenum = 0x8FF5
  GL_UNSIGNED_INT64_VEC3_ARB*: GLenum = 0x8FF6
  GL_UNSIGNED_INT64_VEC4_ARB*: GLenum = 0x8FF7
  GL_ARB_half_float_pixel*: GLenum = 1
  GL_HALF_FLOAT_ARB*: GLenum = 0x140B
  GL_ARB_half_float_vertex*: GLenum = 1
  GL_HALF_FLOAT*: GLenum = 0x140B
  GL_ARB_imaging*: GLenum = 1
  GL_CONSTANT_COLOR*: GLenum = 0x8001
  GL_ONE_MINUS_CONSTANT_COLOR*: GLenum = 0x8002
  GL_CONSTANT_ALPHA*: GLenum = 0x8003
  GL_ONE_MINUS_CONSTANT_ALPHA*: GLenum = 0x8004
  GL_BLEND_COLOR*: GLenum = 0x8005
  GL_FUNC_ADD*: GLenum = 0x8006
  GL_MIN*: GLenum = 0x8007
  GL_MAX*: GLenum = 0x8008
  GL_BLEND_EQUATION*: GLenum = 0x8009
  GL_FUNC_SUBTRACT*: GLenum = 0x800A
  GL_FUNC_REVERSE_SUBTRACT*: GLenum = 0x800B
  GL_CONVOLUTION_1D*: GLenum = 0x8010
  GL_CONVOLUTION_2D*: GLenum = 0x8011
  GL_SEPARABLE_2D*: GLenum = 0x8012
  GL_CONVOLUTION_BORDER_MODE*: GLenum = 0x8013
  GL_CONVOLUTION_FILTER_SCALE*: GLenum = 0x8014
  GL_CONVOLUTION_FILTER_BIAS*: GLenum = 0x8015
  GL_REDUCE*: GLenum = 0x8016
  GL_CONVOLUTION_FORMAT*: GLenum = 0x8017
  GL_CONVOLUTION_WIDTH*: GLenum = 0x8018
  GL_CONVOLUTION_HEIGHT*: GLenum = 0x8019
  GL_MAX_CONVOLUTION_WIDTH*: GLenum = 0x801A
  GL_MAX_CONVOLUTION_HEIGHT*: GLenum = 0x801B
  GL_POST_CONVOLUTION_RED_SCALE*: GLenum = 0x801C
  GL_POST_CONVOLUTION_GREEN_SCALE*: GLenum = 0x801D
  GL_POST_CONVOLUTION_BLUE_SCALE*: GLenum = 0x801E
  GL_POST_CONVOLUTION_ALPHA_SCALE*: GLenum = 0x801F
  GL_POST_CONVOLUTION_RED_BIAS*: GLenum = 0x8020
  GL_POST_CONVOLUTION_GREEN_BIAS*: GLenum = 0x8021
  GL_POST_CONVOLUTION_BLUE_BIAS*: GLenum = 0x8022
  GL_POST_CONVOLUTION_ALPHA_BIAS*: GLenum = 0x8023
  GL_HISTOGRAM*: GLenum = 0x8024
  GL_PROXY_HISTOGRAM*: GLenum = 0x8025
  GL_HISTOGRAM_WIDTH*: GLenum = 0x8026
  GL_HISTOGRAM_FORMAT*: GLenum = 0x8027
  GL_HISTOGRAM_RED_SIZE*: GLenum = 0x8028
  GL_HISTOGRAM_GREEN_SIZE*: GLenum = 0x8029
  GL_HISTOGRAM_BLUE_SIZE*: GLenum = 0x802A
  GL_HISTOGRAM_ALPHA_SIZE*: GLenum = 0x802B
  GL_HISTOGRAM_LUMINANCE_SIZE*: GLenum = 0x802C
  GL_HISTOGRAM_SINK*: GLenum = 0x802D
  GL_MINMAX*: GLenum = 0x802E
  GL_MINMAX_FORMAT*: GLenum = 0x802F
  GL_MINMAX_SINK*: GLenum = 0x8030
  GL_TABLE_TOO_LARGE*: GLenum = 0x8031
  GL_COLOR_MATRIX*: GLenum = 0x80B1
  GL_COLOR_MATRIX_STACK_DEPTH*: GLenum = 0x80B2
  GL_MAX_COLOR_MATRIX_STACK_DEPTH*: GLenum = 0x80B3
  GL_POST_COLOR_MATRIX_RED_SCALE*: GLenum = 0x80B4
  GL_POST_COLOR_MATRIX_GREEN_SCALE*: GLenum = 0x80B5
  GL_POST_COLOR_MATRIX_BLUE_SCALE*: GLenum = 0x80B6
  GL_POST_COLOR_MATRIX_ALPHA_SCALE*: GLenum = 0x80B7
  GL_POST_COLOR_MATRIX_RED_BIAS*: GLenum = 0x80B8
  GL_POST_COLOR_MATRIX_GREEN_BIAS*: GLenum = 0x80B9
  GL_POST_COLOR_MATRIX_BLUE_BIAS*: GLenum = 0x80BA
  GL_POST_COLOR_MATRIX_ALPHA_BIAS*: GLenum = 0x80BB
  GL_COLOR_TABLE*: GLenum = 0x80D0
  GL_POST_CONVOLUTION_COLOR_TABLE*: GLenum = 0x80D1
  GL_POST_COLOR_MATRIX_COLOR_TABLE*: GLenum = 0x80D2
  GL_PROXY_COLOR_TABLE*: GLenum = 0x80D3
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE*: GLenum = 0x80D4
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE*: GLenum = 0x80D5
  GL_COLOR_TABLE_SCALE*: GLenum = 0x80D6
  GL_COLOR_TABLE_BIAS*: GLenum = 0x80D7
  GL_COLOR_TABLE_FORMAT*: GLenum = 0x80D8
  GL_COLOR_TABLE_WIDTH*: GLenum = 0x80D9
  GL_COLOR_TABLE_RED_SIZE*: GLenum = 0x80DA
  GL_COLOR_TABLE_GREEN_SIZE*: GLenum = 0x80DB
  GL_COLOR_TABLE_BLUE_SIZE*: GLenum = 0x80DC
  GL_COLOR_TABLE_ALPHA_SIZE*: GLenum = 0x80DD
  GL_COLOR_TABLE_LUMINANCE_SIZE*: GLenum = 0x80DE
  GL_COLOR_TABLE_INTENSITY_SIZE*: GLenum = 0x80DF
  GL_IGNORE_BORDER*: GLenum = 0x8150
  GL_CONSTANT_BORDER*: GLenum = 0x8151
  GL_WRAP_BORDER*: GLenum = 0x8152
  GL_REPLICATE_BORDER*: GLenum = 0x8153
  GL_CONVOLUTION_BORDER_COLOR*: GLenum = 0x8154
  GL_ARB_indirect_parameters*: GLenum = 1
  GL_PARAMETER_BUFFER_ARB*: GLenum = 0x80EE
  GL_PARAMETER_BUFFER_BINDING_ARB*: GLenum = 0x80EF
  GL_ARB_instanced_arrays*: GLenum = 1
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB*: GLenum = 0x88FE
  GL_ARB_internalformat_query*: GLenum = 1
  GL_NUM_SAMPLE_COUNTS*: GLenum = 0x9380
  GL_ARB_internalformat_query2*: GLenum = 1
  GL_INTERNALFORMAT_SUPPORTED*: GLenum = 0x826F
  GL_INTERNALFORMAT_PREFERRED*: GLenum = 0x8270
  GL_INTERNALFORMAT_RED_SIZE*: GLenum = 0x8271
  GL_INTERNALFORMAT_GREEN_SIZE*: GLenum = 0x8272
  GL_INTERNALFORMAT_BLUE_SIZE*: GLenum = 0x8273
  GL_INTERNALFORMAT_ALPHA_SIZE*: GLenum = 0x8274
  GL_INTERNALFORMAT_DEPTH_SIZE*: GLenum = 0x8275
  GL_INTERNALFORMAT_STENCIL_SIZE*: GLenum = 0x8276
  GL_INTERNALFORMAT_SHARED_SIZE*: GLenum = 0x8277
  GL_INTERNALFORMAT_RED_TYPE*: GLenum = 0x8278
  GL_INTERNALFORMAT_GREEN_TYPE*: GLenum = 0x8279
  GL_INTERNALFORMAT_BLUE_TYPE*: GLenum = 0x827A
  GL_INTERNALFORMAT_ALPHA_TYPE*: GLenum = 0x827B
  GL_INTERNALFORMAT_DEPTH_TYPE*: GLenum = 0x827C
  GL_INTERNALFORMAT_STENCIL_TYPE*: GLenum = 0x827D
  GL_MAX_WIDTH*: GLenum = 0x827E
  GL_MAX_HEIGHT*: GLenum = 0x827F
  GL_MAX_DEPTH*: GLenum = 0x8280
  GL_MAX_LAYERS*: GLenum = 0x8281
  GL_MAX_COMBINED_DIMENSIONS*: GLenum = 0x8282
  GL_COLOR_COMPONENTS*: GLenum = 0x8283
  GL_DEPTH_COMPONENTS*: GLenum = 0x8284
  GL_STENCIL_COMPONENTS*: GLenum = 0x8285
  GL_COLOR_RENDERABLE*: GLenum = 0x8286
  GL_DEPTH_RENDERABLE*: GLenum = 0x8287
  GL_STENCIL_RENDERABLE*: GLenum = 0x8288
  GL_FRAMEBUFFER_RENDERABLE*: GLenum = 0x8289
  GL_FRAMEBUFFER_RENDERABLE_LAYERED*: GLenum = 0x828A
  GL_FRAMEBUFFER_BLEND*: GLenum = 0x828B
  GL_READ_PIXELS*: GLenum = 0x828C
  GL_READ_PIXELS_FORMAT*: GLenum = 0x828D
  GL_READ_PIXELS_TYPE*: GLenum = 0x828E
  GL_TEXTURE_IMAGE_FORMAT*: GLenum = 0x828F
  GL_TEXTURE_IMAGE_TYPE*: GLenum = 0x8290
  GL_GET_TEXTURE_IMAGE_FORMAT*: GLenum = 0x8291
  GL_GET_TEXTURE_IMAGE_TYPE*: GLenum = 0x8292
  GL_MIPMAP*: GLenum = 0x8293
  GL_MANUAL_GENERATE_MIPMAP*: GLenum = 0x8294
  GL_AUTO_GENERATE_MIPMAP*: GLenum = 0x8295
  GL_COLOR_ENCODING*: GLenum = 0x8296
  GL_SRGB_READ*: GLenum = 0x8297
  GL_SRGB_WRITE*: GLenum = 0x8298
  GL_SRGB_DECODE_ARB*: GLenum = 0x8299
  GL_FILTER*: GLenum = 0x829A
  GL_VERTEX_TEXTURE*: GLenum = 0x829B
  GL_TESS_CONTROL_TEXTURE*: GLenum = 0x829C
  GL_TESS_EVALUATION_TEXTURE*: GLenum = 0x829D
  GL_GEOMETRY_TEXTURE*: GLenum = 0x829E
  GL_FRAGMENT_TEXTURE*: GLenum = 0x829F
  GL_COMPUTE_TEXTURE*: GLenum = 0x82A0
  GL_TEXTURE_SHADOW*: GLenum = 0x82A1
  GL_TEXTURE_GATHER*: GLenum = 0x82A2
  GL_TEXTURE_GATHER_SHADOW*: GLenum = 0x82A3
  GL_SHADER_IMAGE_LOAD*: GLenum = 0x82A4
  GL_SHADER_IMAGE_STORE*: GLenum = 0x82A5
  GL_SHADER_IMAGE_ATOMIC*: GLenum = 0x82A6
  GL_IMAGE_TEXEL_SIZE*: GLenum = 0x82A7
  GL_IMAGE_COMPATIBILITY_CLASS*: GLenum = 0x82A8
  GL_IMAGE_PIXEL_FORMAT*: GLenum = 0x82A9
  GL_IMAGE_PIXEL_TYPE*: GLenum = 0x82AA
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST*: GLenum = 0x82AC
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST*: GLenum = 0x82AD
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE*: GLenum = 0x82AE
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE*: GLenum = 0x82AF
  GL_TEXTURE_COMPRESSED_BLOCK_WIDTH*: GLenum = 0x82B1
  GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT*: GLenum = 0x82B2
  GL_TEXTURE_COMPRESSED_BLOCK_SIZE*: GLenum = 0x82B3
  GL_CLEAR_BUFFER*: GLenum = 0x82B4
  GL_TEXTURE_VIEW*: GLenum = 0x82B5
  GL_VIEW_COMPATIBILITY_CLASS*: GLenum = 0x82B6
  GL_FULL_SUPPORT*: GLenum = 0x82B7
  GL_CAVEAT_SUPPORT*: GLenum = 0x82B8
  GL_IMAGE_CLASS_4_X_32*: GLenum = 0x82B9
  GL_IMAGE_CLASS_2_X_32*: GLenum = 0x82BA
  GL_IMAGE_CLASS_1_X_32*: GLenum = 0x82BB
  GL_IMAGE_CLASS_4_X_16*: GLenum = 0x82BC
  GL_IMAGE_CLASS_2_X_16*: GLenum = 0x82BD
  GL_IMAGE_CLASS_1_X_16*: GLenum = 0x82BE
  GL_IMAGE_CLASS_4_X_8*: GLenum = 0x82BF
  GL_IMAGE_CLASS_2_X_8*: GLenum = 0x82C0
  GL_IMAGE_CLASS_1_X_8*: GLenum = 0x82C1
  GL_IMAGE_CLASS_11_11_10*: GLenum = 0x82C2
  GL_IMAGE_CLASS_10_10_10_2*: GLenum = 0x82C3
  GL_VIEW_CLASS_128_BITS*: GLenum = 0x82C4
  GL_VIEW_CLASS_96_BITS*: GLenum = 0x82C5
  GL_VIEW_CLASS_64_BITS*: GLenum = 0x82C6
  GL_VIEW_CLASS_48_BITS*: GLenum = 0x82C7
  GL_VIEW_CLASS_32_BITS*: GLenum = 0x82C8
  GL_VIEW_CLASS_24_BITS*: GLenum = 0x82C9
  GL_VIEW_CLASS_16_BITS*: GLenum = 0x82CA
  GL_VIEW_CLASS_8_BITS*: GLenum = 0x82CB
  GL_VIEW_CLASS_S3TC_DXT1_RGB*: GLenum = 0x82CC
  GL_VIEW_CLASS_S3TC_DXT1_RGBA*: GLenum = 0x82CD
  GL_VIEW_CLASS_S3TC_DXT3_RGBA*: GLenum = 0x82CE
  GL_VIEW_CLASS_S3TC_DXT5_RGBA*: GLenum = 0x82CF
  GL_VIEW_CLASS_RGTC1_RED*: GLenum = 0x82D0
  GL_VIEW_CLASS_RGTC2_RG*: GLenum = 0x82D1
  GL_VIEW_CLASS_BPTC_UNORM*: GLenum = 0x82D2
  GL_VIEW_CLASS_BPTC_FLOAT*: GLenum = 0x82D3
  GL_ARB_invalidate_subdata*: GLenum = 1
  GL_ARB_map_buffer_alignment*: GLenum = 1
  GL_MIN_MAP_BUFFER_ALIGNMENT*: GLenum = 0x90BC
  GL_ARB_map_buffer_range*: GLenum = 1
  GL_MAP_INVALIDATE_RANGE_BIT*: GLenum = 0x0004
  GL_MAP_INVALIDATE_BUFFER_BIT*: GLenum = 0x0008
  GL_MAP_FLUSH_EXPLICIT_BIT*: GLenum = 0x0010
  GL_MAP_UNSYNCHRONIZED_BIT*: GLenum = 0x0020
  GL_ARB_matrix_palette*: GLenum = 1
  GL_MATRIX_PALETTE_ARB*: GLenum = 0x8840
  GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB*: GLenum = 0x8841
  GL_MAX_PALETTE_MATRICES_ARB*: GLenum = 0x8842
  GL_CURRENT_PALETTE_MATRIX_ARB*: GLenum = 0x8843
  GL_MATRIX_INDEX_ARRAY_ARB*: GLenum = 0x8844
  GL_CURRENT_MATRIX_INDEX_ARB*: GLenum = 0x8845
  GL_MATRIX_INDEX_ARRAY_SIZE_ARB*: GLenum = 0x8846
  GL_MATRIX_INDEX_ARRAY_TYPE_ARB*: GLenum = 0x8847
  GL_MATRIX_INDEX_ARRAY_STRIDE_ARB*: GLenum = 0x8848
  GL_MATRIX_INDEX_ARRAY_POINTER_ARB*: GLenum = 0x8849
  GL_ARB_multi_bind*: GLenum = 1
  GL_ARB_multi_draw_indirect*: GLenum = 1
  GL_ARB_multisample*: GLenum = 1
  GL_MULTISAMPLE_ARB*: GLenum = 0x809D
  GL_SAMPLE_ALPHA_TO_COVERAGE_ARB*: GLenum = 0x809E
  GL_SAMPLE_ALPHA_TO_ONE_ARB*: GLenum = 0x809F
  GL_SAMPLE_COVERAGE_ARB*: GLenum = 0x80A0
  GL_SAMPLE_BUFFERS_ARB*: GLenum = 0x80A8
  GL_SAMPLES_ARB*: GLenum = 0x80A9
  GL_SAMPLE_COVERAGE_VALUE_ARB*: GLenum = 0x80AA
  GL_SAMPLE_COVERAGE_INVERT_ARB*: GLenum = 0x80AB
  GL_MULTISAMPLE_BIT_ARB*: GLenum64 = 0x20000000u
  GL_ARB_multitexture*: GLenum = 1
  GL_TEXTURE0_ARB*: GLenum = 0x84C0
  GL_TEXTURE1_ARB*: GLenum = 0x84C1
  GL_TEXTURE2_ARB*: GLenum = 0x84C2
  GL_TEXTURE3_ARB*: GLenum = 0x84C3
  GL_TEXTURE4_ARB*: GLenum = 0x84C4
  GL_TEXTURE5_ARB*: GLenum = 0x84C5
  GL_TEXTURE6_ARB*: GLenum = 0x84C6
  GL_TEXTURE7_ARB*: GLenum = 0x84C7
  GL_TEXTURE8_ARB*: GLenum = 0x84C8
  GL_TEXTURE9_ARB*: GLenum = 0x84C9
  GL_TEXTURE10_ARB*: GLenum = 0x84CA
  GL_TEXTURE11_ARB*: GLenum = 0x84CB
  GL_TEXTURE12_ARB*: GLenum = 0x84CC
  GL_TEXTURE13_ARB*: GLenum = 0x84CD
  GL_TEXTURE14_ARB*: GLenum = 0x84CE
  GL_TEXTURE15_ARB*: GLenum = 0x84CF
  GL_TEXTURE16_ARB*: GLenum = 0x84D0
  GL_TEXTURE17_ARB*: GLenum = 0x84D1
  GL_TEXTURE18_ARB*: GLenum = 0x84D2
  GL_TEXTURE19_ARB*: GLenum = 0x84D3
  GL_TEXTURE20_ARB*: GLenum = 0x84D4
  GL_TEXTURE21_ARB*: GLenum = 0x84D5
  GL_TEXTURE22_ARB*: GLenum = 0x84D6
  GL_TEXTURE23_ARB*: GLenum = 0x84D7
  GL_TEXTURE24_ARB*: GLenum = 0x84D8
  GL_TEXTURE25_ARB*: GLenum = 0x84D9
  GL_TEXTURE26_ARB*: GLenum = 0x84DA
  GL_TEXTURE27_ARB*: GLenum = 0x84DB
  GL_TEXTURE28_ARB*: GLenum = 0x84DC
  GL_TEXTURE29_ARB*: GLenum = 0x84DD
  GL_TEXTURE30_ARB*: GLenum = 0x84DE
  GL_TEXTURE31_ARB*: GLenum = 0x84DF
  GL_ACTIVE_TEXTURE_ARB*: GLenum = 0x84E0
  GL_CLIENT_ACTIVE_TEXTURE_ARB*: GLenum = 0x84E1
  GL_MAX_TEXTURE_UNITS_ARB*: GLenum = 0x84E2
  GL_ARB_occlusion_query*: GLenum = 1
  GL_QUERY_COUNTER_BITS_ARB*: GLenum = 0x8864
  GL_CURRENT_QUERY_ARB*: GLenum = 0x8865
  GL_QUERY_RESULT_ARB*: GLenum = 0x8866
  GL_QUERY_RESULT_AVAILABLE_ARB*: GLenum = 0x8867
  GL_SAMPLES_PASSED_ARB*: GLenum = 0x8914
  GL_ARB_occlusion_query2*: GLenum = 1
  GL_ANY_SAMPLES_PASSED*: GLenum = 0x8C2F
  GL_ARB_parallel_shader_compile*: GLenum = 1
  GL_MAX_SHADER_COMPILER_THREADS_ARB*: GLenum = 0x91B0
  GL_COMPLETION_STATUS_ARB*: GLenum = 0x91B1
  GL_ARB_pipeline_statistics_query*: GLenum = 1
  GL_VERTICES_SUBMITTED_ARB*: GLenum = 0x82EE
  GL_PRIMITIVES_SUBMITTED_ARB*: GLenum = 0x82EF
  GL_VERTEX_SHADER_INVOCATIONS_ARB*: GLenum = 0x82F0
  GL_TESS_CONTROL_SHADER_PATCHES_ARB*: GLenum = 0x82F1
  GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB*: GLenum = 0x82F2
  GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB*: GLenum = 0x82F3
  GL_FRAGMENT_SHADER_INVOCATIONS_ARB*: GLenum = 0x82F4
  GL_COMPUTE_SHADER_INVOCATIONS_ARB*: GLenum = 0x82F5
  GL_CLIPPING_INPUT_PRIMITIVES_ARB*: GLenum = 0x82F6
  GL_CLIPPING_OUTPUT_PRIMITIVES_ARB*: GLenum = 0x82F7
  GL_ARB_pixel_buffer_object*: GLenum = 1
  GL_PIXEL_PACK_BUFFER_ARB*: GLenum = 0x88EB
  GL_PIXEL_UNPACK_BUFFER_ARB*: GLenum = 0x88EC
  GL_PIXEL_PACK_BUFFER_BINDING_ARB*: GLenum = 0x88ED
  GL_PIXEL_UNPACK_BUFFER_BINDING_ARB*: GLenum = 0x88EF
  GL_ARB_point_parameters*: GLenum = 1
  GL_POINT_SIZE_MIN_ARB*: GLenum = 0x8126
  GL_POINT_SIZE_MAX_ARB*: GLenum = 0x8127
  GL_POINT_FADE_THRESHOLD_SIZE_ARB*: GLenum = 0x8128
  GL_POINT_DISTANCE_ATTENUATION_ARB*: GLenum = 0x8129
  GL_ARB_point_sprite*: GLenum = 1
  GL_POINT_SPRITE_ARB*: GLenum = 0x8861
  GL_COORD_REPLACE_ARB*: GLenum = 0x8862
  GL_ARB_polygon_offset_clamp*: GLenum = 1
  GL_ARB_post_depth_coverage*: GLenum = 1
  GL_ARB_program_interface_query*: GLenum = 1
  GL_UNIFORM*: GLenum = 0x92E1
  GL_UNIFORM_BLOCK*: GLenum = 0x92E2
  GL_PROGRAM_INPUT*: GLenum = 0x92E3
  GL_PROGRAM_OUTPUT*: GLenum = 0x92E4
  GL_BUFFER_VARIABLE*: GLenum = 0x92E5
  GL_SHADER_STORAGE_BLOCK*: GLenum = 0x92E6
  GL_IS_PER_PATCH*: GLenum = 0x92E7
  GL_VERTEX_SUBROUTINE*: GLenum = 0x92E8
  GL_TESS_CONTROL_SUBROUTINE*: GLenum = 0x92E9
  GL_TESS_EVALUATION_SUBROUTINE*: GLenum = 0x92EA
  GL_GEOMETRY_SUBROUTINE*: GLenum = 0x92EB
  GL_FRAGMENT_SUBROUTINE*: GLenum = 0x92EC
  GL_COMPUTE_SUBROUTINE*: GLenum = 0x92ED
  GL_VERTEX_SUBROUTINE_UNIFORM*: GLenum = 0x92EE
  GL_TESS_CONTROL_SUBROUTINE_UNIFORM*: GLenum = 0x92EF
  GL_TESS_EVALUATION_SUBROUTINE_UNIFORM*: GLenum = 0x92F0
  GL_GEOMETRY_SUBROUTINE_UNIFORM*: GLenum = 0x92F1
  GL_FRAGMENT_SUBROUTINE_UNIFORM*: GLenum = 0x92F2
  GL_COMPUTE_SUBROUTINE_UNIFORM*: GLenum = 0x92F3
  GL_TRANSFORM_FEEDBACK_VARYING*: GLenum = 0x92F4
  GL_ACTIVE_RESOURCES*: GLenum = 0x92F5
  GL_MAX_NAME_LENGTH*: GLenum = 0x92F6
  GL_MAX_NUM_ACTIVE_VARIABLES*: GLenum = 0x92F7
  GL_MAX_NUM_COMPATIBLE_SUBROUTINES*: GLenum = 0x92F8
  GL_NAME_LENGTH*: GLenum = 0x92F9
  GL_TYPE*: GLenum = 0x92FA
  GL_ARRAY_SIZE*: GLenum = 0x92FB
  GL_OFFSET*: GLenum = 0x92FC
  GL_BLOCK_INDEX*: GLenum = 0x92FD
  GL_ARRAY_STRIDE*: GLenum = 0x92FE
  GL_MATRIX_STRIDE*: GLenum = 0x92FF
  GL_IS_ROW_MAJOR*: GLenum = 0x9300
  GL_ATOMIC_COUNTER_BUFFER_INDEX*: GLenum = 0x9301
  GL_BUFFER_BINDING*: GLenum = 0x9302
  GL_BUFFER_DATA_SIZE*: GLenum = 0x9303
  GL_NUM_ACTIVE_VARIABLES*: GLenum = 0x9304
  GL_ACTIVE_VARIABLES*: GLenum = 0x9305
  GL_REFERENCED_BY_VERTEX_SHADER*: GLenum = 0x9306
  GL_REFERENCED_BY_TESS_CONTROL_SHADER*: GLenum = 0x9307
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER*: GLenum = 0x9308
  GL_REFERENCED_BY_GEOMETRY_SHADER*: GLenum = 0x9309
  GL_REFERENCED_BY_FRAGMENT_SHADER*: GLenum = 0x930A
  GL_REFERENCED_BY_COMPUTE_SHADER*: GLenum = 0x930B
  GL_TOP_LEVEL_ARRAY_SIZE*: GLenum = 0x930C
  GL_TOP_LEVEL_ARRAY_STRIDE*: GLenum = 0x930D
  GL_LOCATION*: GLenum = 0x930E
  GL_LOCATION_INDEX*: GLenum = 0x930F
  GL_ARB_provoking_vertex*: GLenum = 1
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION*: GLenum = 0x8E4C
  GL_FIRST_VERTEX_CONVENTION*: GLenum = 0x8E4D
  GL_LAST_VERTEX_CONVENTION*: GLenum = 0x8E4E
  GL_PROVOKING_VERTEX*: GLenum = 0x8E4F
  GL_ARB_query_buffer_object*: GLenum = 1
  GL_QUERY_BUFFER_BARRIER_BIT*: GLenum = 0x00008000
  GL_QUERY_BUFFER*: GLenum = 0x9192
  GL_QUERY_BUFFER_BINDING*: GLenum = 0x9193
  GL_QUERY_RESULT_NO_WAIT*: GLenum = 0x9194
  GL_ARB_robust_buffer_access_behavior*: GLenum = 1
  GL_ARB_robustness*: GLenum = 1
  GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB*: GLenum = 0x00000004
  GL_LOSE_CONTEXT_ON_RESET_ARB*: GLenum = 0x8252
  GL_GUILTY_CONTEXT_RESET_ARB*: GLenum = 0x8253
  GL_INNOCENT_CONTEXT_RESET_ARB*: GLenum = 0x8254
  GL_UNKNOWN_CONTEXT_RESET_ARB*: GLenum = 0x8255
  GL_RESET_NOTIFICATION_STRATEGY_ARB*: GLenum = 0x8256
  GL_NO_RESET_NOTIFICATION_ARB*: GLenum = 0x8261
  GL_ARB_robustness_application_isolation*: GLenum = 1
  GL_ARB_robustness_share_group_isolation*: GLenum = 1
  GL_ARB_sample_locations*: GLenum = 1
  GL_SAMPLE_LOCATION_ARB*: GLenum = 0x8E50
  GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB*: GLenum = 0x933D
  GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB*: GLenum = 0x933E
  GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB*: GLenum = 0x933F
  GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB*: GLenum = 0x9340
  GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB*: GLenum = 0x9341
  GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB*: GLenum = 0x9342
  GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB*: GLenum = 0x9343
  GL_ARB_sample_shading*: GLenum = 1
  GL_SAMPLE_SHADING_ARB*: GLenum = 0x8C36
  GL_MIN_SAMPLE_SHADING_VALUE_ARB*: GLenum = 0x8C37
  GL_ARB_sampler_objects*: GLenum = 1
  GL_SAMPLER_BINDING*: GLenum = 0x8919
  GL_ARB_seamless_cube_map*: GLenum = 1
  GL_ARB_seamless_cubemap_per_texture*: GLenum = 1
  GL_ARB_separate_shader_objects*: GLenum = 1
  GL_VERTEX_SHADER_BIT*: GLenum = 0x00000001
  GL_FRAGMENT_SHADER_BIT*: GLenum = 0x00000002
  GL_GEOMETRY_SHADER_BIT*: GLenum = 0x00000004
  GL_TESS_CONTROL_SHADER_BIT*: GLenum = 0x00000008
  GL_TESS_EVALUATION_SHADER_BIT*: GLenum = 0x00000010
  GL_PROGRAM_SEPARABLE*: GLenum = 0x8258
  GL_ACTIVE_PROGRAM*: GLenum = 0x8259
  GL_PROGRAM_PIPELINE_BINDING*: GLenum = 0x825A
  GL_ALL_SHADER_BITS*: GLenum64 = 0xFFFFFFFFu
  GL_ARB_shader_atomic_counter_ops*: GLenum = 1
  GL_ARB_shader_atomic_counters*: GLenum = 1
  GL_ATOMIC_COUNTER_BUFFER*: GLenum = 0x92C0
  GL_ATOMIC_COUNTER_BUFFER_BINDING*: GLenum = 0x92C1
  GL_ATOMIC_COUNTER_BUFFER_START*: GLenum = 0x92C2
  GL_ATOMIC_COUNTER_BUFFER_SIZE*: GLenum = 0x92C3
  GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE*: GLenum = 0x92C4
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS*: GLenum = 0x92C5
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES*: GLenum = 0x92C6
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER*: GLenum = 0x92C7
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER*: GLenum = 0x92C8
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER*: GLenum = 0x92C9
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER*: GLenum = 0x92CA
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER*: GLenum = 0x92CB
  GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS*: GLenum = 0x92CC
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS*: GLenum = 0x92CD
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS*: GLenum = 0x92CE
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS*: GLenum = 0x92CF
  GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS*: GLenum = 0x92D0
  GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS*: GLenum = 0x92D1
  GL_MAX_VERTEX_ATOMIC_COUNTERS*: GLenum = 0x92D2
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS*: GLenum = 0x92D3
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS*: GLenum = 0x92D4
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS*: GLenum = 0x92D5
  GL_MAX_FRAGMENT_ATOMIC_COUNTERS*: GLenum = 0x92D6
  GL_MAX_COMBINED_ATOMIC_COUNTERS*: GLenum = 0x92D7
  GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE*: GLenum = 0x92D8
  GL_ACTIVE_ATOMIC_COUNTER_BUFFERS*: GLenum = 0x92D9
  GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX*: GLenum = 0x92DA
  GL_UNSIGNED_INT_ATOMIC_COUNTER*: GLenum = 0x92DB
  GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS*: GLenum = 0x92DC
  GL_ARB_shader_ballot*: GLenum = 1
  GL_ARB_shader_bit_encoding*: GLenum = 1
  GL_ARB_shader_clock*: GLenum = 1
  GL_ARB_shader_draw_parameters*: GLenum = 1
  GL_ARB_shader_group_vote*: GLenum = 1
  GL_ARB_shader_image_load_store*: GLenum = 1
  GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT*: GLenum = 0x00000001
  GL_ELEMENT_ARRAY_BARRIER_BIT*: GLenum = 0x00000002
  GL_UNIFORM_BARRIER_BIT*: GLenum = 0x00000004
  GL_TEXTURE_FETCH_BARRIER_BIT*: GLenum = 0x00000008
  GL_SHADER_IMAGE_ACCESS_BARRIER_BIT*: GLenum = 0x00000020
  GL_COMMAND_BARRIER_BIT*: GLenum = 0x00000040
  GL_PIXEL_BUFFER_BARRIER_BIT*: GLenum = 0x00000080
  GL_TEXTURE_UPDATE_BARRIER_BIT*: GLenum = 0x00000100
  GL_BUFFER_UPDATE_BARRIER_BIT*: GLenum = 0x00000200
  GL_FRAMEBUFFER_BARRIER_BIT*: GLenum = 0x00000400
  GL_TRANSFORM_FEEDBACK_BARRIER_BIT*: GLenum = 0x00000800
  GL_ATOMIC_COUNTER_BARRIER_BIT*: GLenum = 0x00001000
  GL_MAX_IMAGE_UNITS*: GLenum = 0x8F38
  GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS*: GLenum = 0x8F39
  GL_IMAGE_BINDING_NAME*: GLenum = 0x8F3A
  GL_IMAGE_BINDING_LEVEL*: GLenum = 0x8F3B
  GL_IMAGE_BINDING_LAYERED*: GLenum = 0x8F3C
  GL_IMAGE_BINDING_LAYER*: GLenum = 0x8F3D
  GL_IMAGE_BINDING_ACCESS*: GLenum = 0x8F3E
  GL_IMAGE_1D*: GLenum = 0x904C
  GL_IMAGE_2D*: GLenum = 0x904D
  GL_IMAGE_3D*: GLenum = 0x904E
  GL_IMAGE_2D_RECT*: GLenum = 0x904F
  GL_IMAGE_CUBE*: GLenum = 0x9050
  GL_IMAGE_BUFFER*: GLenum = 0x9051
  GL_IMAGE_1D_ARRAY*: GLenum = 0x9052
  GL_IMAGE_2D_ARRAY*: GLenum = 0x9053
  GL_IMAGE_CUBE_MAP_ARRAY*: GLenum = 0x9054
  GL_IMAGE_2D_MULTISAMPLE*: GLenum = 0x9055
  GL_IMAGE_2D_MULTISAMPLE_ARRAY*: GLenum = 0x9056
  GL_INT_IMAGE_1D*: GLenum = 0x9057
  GL_INT_IMAGE_2D*: GLenum = 0x9058
  GL_INT_IMAGE_3D*: GLenum = 0x9059
  GL_INT_IMAGE_2D_RECT*: GLenum = 0x905A
  GL_INT_IMAGE_CUBE*: GLenum = 0x905B
  GL_INT_IMAGE_BUFFER*: GLenum = 0x905C
  GL_INT_IMAGE_1D_ARRAY*: GLenum = 0x905D
  GL_INT_IMAGE_2D_ARRAY*: GLenum = 0x905E
  GL_INT_IMAGE_CUBE_MAP_ARRAY*: GLenum = 0x905F
  GL_INT_IMAGE_2D_MULTISAMPLE*: GLenum = 0x9060
  GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY*: GLenum = 0x9061
  GL_UNSIGNED_INT_IMAGE_1D*: GLenum = 0x9062
  GL_UNSIGNED_INT_IMAGE_2D*: GLenum = 0x9063
  GL_UNSIGNED_INT_IMAGE_3D*: GLenum = 0x9064
  GL_UNSIGNED_INT_IMAGE_2D_RECT*: GLenum = 0x9065
  GL_UNSIGNED_INT_IMAGE_CUBE*: GLenum = 0x9066
  GL_UNSIGNED_INT_IMAGE_BUFFER*: GLenum = 0x9067
  GL_UNSIGNED_INT_IMAGE_1D_ARRAY*: GLenum = 0x9068
  GL_UNSIGNED_INT_IMAGE_2D_ARRAY*: GLenum = 0x9069
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY*: GLenum = 0x906A
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE*: GLenum = 0x906B
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY*: GLenum = 0x906C
  GL_MAX_IMAGE_SAMPLES*: GLenum = 0x906D
  GL_IMAGE_BINDING_FORMAT*: GLenum = 0x906E
  GL_IMAGE_FORMAT_COMPATIBILITY_TYPE*: GLenum = 0x90C7
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE*: GLenum = 0x90C8
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS*: GLenum = 0x90C9
  GL_MAX_VERTEX_IMAGE_UNIFORMS*: GLenum = 0x90CA
  GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS*: GLenum = 0x90CB
  GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS*: GLenum = 0x90CC
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS*: GLenum = 0x90CD
  GL_MAX_FRAGMENT_IMAGE_UNIFORMS*: GLenum = 0x90CE
  GL_MAX_COMBINED_IMAGE_UNIFORMS*: GLenum = 0x90CF
  GL_ALL_BARRIER_BITS*: GLenum64 = 0xFFFFFFFFu
  GL_ARB_shader_image_size*: GLenum = 1
  GL_ARB_shader_objects*: GLenum = 1
  GL_PROGRAM_OBJECT_ARB*: GLenum = 0x8B40
  GL_SHADER_OBJECT_ARB*: GLenum = 0x8B48
  GL_OBJECT_TYPE_ARB*: GLenum = 0x8B4E
  GL_OBJECT_SUBTYPE_ARB*: GLenum = 0x8B4F
  GL_FLOAT_VEC2_ARB*: GLenum = 0x8B50
  GL_FLOAT_VEC3_ARB*: GLenum = 0x8B51
  GL_FLOAT_VEC4_ARB*: GLenum = 0x8B52
  GL_INT_VEC2_ARB*: GLenum = 0x8B53
  GL_INT_VEC3_ARB*: GLenum = 0x8B54
  GL_INT_VEC4_ARB*: GLenum = 0x8B55
  GL_BOOL_ARB*: GLenum = 0x8B56
  GL_BOOL_VEC2_ARB*: GLenum = 0x8B57
  GL_BOOL_VEC3_ARB*: GLenum = 0x8B58
  GL_BOOL_VEC4_ARB*: GLenum = 0x8B59
  GL_FLOAT_MAT2_ARB*: GLenum = 0x8B5A
  GL_FLOAT_MAT3_ARB*: GLenum = 0x8B5B
  GL_FLOAT_MAT4_ARB*: GLenum = 0x8B5C
  GL_SAMPLER_1D_ARB*: GLenum = 0x8B5D
  GL_SAMPLER_2D_ARB*: GLenum = 0x8B5E
  GL_SAMPLER_3D_ARB*: GLenum = 0x8B5F
  GL_SAMPLER_CUBE_ARB*: GLenum = 0x8B60
  GL_SAMPLER_1D_SHADOW_ARB*: GLenum = 0x8B61
  GL_SAMPLER_2D_SHADOW_ARB*: GLenum = 0x8B62
  GL_SAMPLER_2D_RECT_ARB*: GLenum = 0x8B63
  GL_SAMPLER_2D_RECT_SHADOW_ARB*: GLenum = 0x8B64
  GL_OBJECT_DELETE_STATUS_ARB*: GLenum = 0x8B80
  GL_OBJECT_COMPILE_STATUS_ARB*: GLenum = 0x8B81
  GL_OBJECT_LINK_STATUS_ARB*: GLenum = 0x8B82
  GL_OBJECT_VALIDATE_STATUS_ARB*: GLenum = 0x8B83
  GL_OBJECT_INFO_LOG_LENGTH_ARB*: GLenum = 0x8B84
  GL_OBJECT_ATTACHED_OBJECTS_ARB*: GLenum = 0x8B85
  GL_OBJECT_ACTIVE_UNIFORMS_ARB*: GLenum = 0x8B86
  GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB*: GLenum = 0x8B87
  GL_OBJECT_SHADER_SOURCE_LENGTH_ARB*: GLenum = 0x8B88
  GL_ARB_shader_precision*: GLenum = 1
  GL_ARB_shader_stencil_export*: GLenum = 1
  GL_ARB_shader_storage_buffer_object*: GLenum = 1
  GL_SHADER_STORAGE_BARRIER_BIT*: GLenum = 0x2000
  GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES*: GLenum = 0x8F39
  GL_SHADER_STORAGE_BUFFER*: GLenum = 0x90D2
  GL_SHADER_STORAGE_BUFFER_BINDING*: GLenum = 0x90D3
  GL_SHADER_STORAGE_BUFFER_START*: GLenum = 0x90D4
  GL_SHADER_STORAGE_BUFFER_SIZE*: GLenum = 0x90D5
  GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS*: GLenum = 0x90D6
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS*: GLenum = 0x90D7
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS*: GLenum = 0x90D8
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS*: GLenum = 0x90D9
  GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS*: GLenum = 0x90DA
  GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS*: GLenum = 0x90DB
  GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS*: GLenum = 0x90DC
  GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS*: GLenum = 0x90DD
  GL_MAX_SHADER_STORAGE_BLOCK_SIZE*: GLenum = 0x90DE
  GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT*: GLenum = 0x90DF
  GL_ARB_shader_subroutine*: GLenum = 1
  GL_ACTIVE_SUBROUTINES*: GLenum = 0x8DE5
  GL_ACTIVE_SUBROUTINE_UNIFORMS*: GLenum = 0x8DE6
  GL_MAX_SUBROUTINES*: GLenum = 0x8DE7
  GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS*: GLenum = 0x8DE8
  GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS*: GLenum = 0x8E47
  GL_ACTIVE_SUBROUTINE_MAX_LENGTH*: GLenum = 0x8E48
  GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH*: GLenum = 0x8E49
  GL_NUM_COMPATIBLE_SUBROUTINES*: GLenum = 0x8E4A
  GL_COMPATIBLE_SUBROUTINES*: GLenum = 0x8E4B
  GL_ARB_shader_texture_image_samples*: GLenum = 1
  GL_ARB_shader_texture_lod*: GLenum = 1
  GL_ARB_shader_viewport_layer_array*: GLenum = 1
  GL_ARB_shading_language_100*: GLenum = 1
  GL_SHADING_LANGUAGE_VERSION_ARB*: GLenum = 0x8B8C
  GL_ARB_shading_language_420pack*: GLenum = 1
  GL_ARB_shading_language_include*: GLenum = 1
  GL_SHADER_INCLUDE_ARB*: GLenum = 0x8DAE
  GL_NAMED_STRING_LENGTH_ARB*: GLenum = 0x8DE9
  GL_NAMED_STRING_TYPE_ARB*: GLenum = 0x8DEA
  GL_ARB_shading_language_packing*: GLenum = 1
  GL_ARB_shadow*: GLenum = 1
  GL_TEXTURE_COMPARE_MODE_ARB*: GLenum = 0x884C
  GL_TEXTURE_COMPARE_FUNC_ARB*: GLenum = 0x884D
  GL_COMPARE_R_TO_TEXTURE_ARB*: GLenum = 0x884E
  GL_ARB_shadow_ambient*: GLenum = 1
  GL_TEXTURE_COMPARE_FAIL_VALUE_ARB*: GLenum = 0x80BF
  GL_ARB_sparse_buffer*: GLenum = 1
  GL_SPARSE_STORAGE_BIT_ARB*: GLenum = 0x0400
  GL_SPARSE_BUFFER_PAGE_SIZE_ARB*: GLenum = 0x82F8
  GL_ARB_sparse_texture*: GLenum = 1
  GL_VIRTUAL_PAGE_SIZE_X_ARB*: GLenum = 0x9195
  GL_VIRTUAL_PAGE_SIZE_Y_ARB*: GLenum = 0x9196
  GL_VIRTUAL_PAGE_SIZE_Z_ARB*: GLenum = 0x9197
  GL_MAX_SPARSE_TEXTURE_SIZE_ARB*: GLenum = 0x9198
  GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB*: GLenum = 0x9199
  GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB*: GLenum = 0x919A
  GL_TEXTURE_SPARSE_ARB*: GLenum = 0x91A6
  GL_VIRTUAL_PAGE_SIZE_INDEX_ARB*: GLenum = 0x91A7
  GL_NUM_VIRTUAL_PAGE_SIZES_ARB*: GLenum = 0x91A8
  GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB*: GLenum = 0x91A9
  GL_NUM_SPARSE_LEVELS_ARB*: GLenum = 0x91AA
  GL_ARB_sparse_texture2*: GLenum = 1
  GL_ARB_sparse_texture_clamp*: GLenum = 1
  GL_ARB_spirv_extensions*: GLenum = 1
  GL_ARB_stencil_texturing*: GLenum = 1
  GL_DEPTH_STENCIL_TEXTURE_MODE*: GLenum = 0x90EA
  GL_ARB_sync*: GLenum = 1
  GL_SYNC_FLUSH_COMMANDS_BIT*: GLenum = 0x00000001
  GL_MAX_SERVER_WAIT_TIMEOUT*: GLenum = 0x9111
  GL_OBJECT_TYPE*: GLenum = 0x9112
  GL_SYNC_CONDITION*: GLenum = 0x9113
  GL_SYNC_STATUS*: GLenum = 0x9114
  GL_SYNC_FLAGS*: GLenum = 0x9115
  GL_SYNC_FENCE*: GLenum = 0x9116
  GL_SYNC_GPU_COMMANDS_COMPLETE*: GLenum = 0x9117
  GL_UNSIGNALED*: GLenum = 0x9118
  GL_SIGNALED*: GLenum = 0x9119
  GL_ALREADY_SIGNALED*: GLenum = 0x911A
  GL_TIMEOUT_EXPIRED*: GLenum = 0x911B
  GL_CONDITION_SATISFIED*: GLenum = 0x911C
  GL_WAIT_FAILED*: GLenum = 0x911D
  GL_ARB_tessellation_shader*: GLenum = 1
  GL_PATCHES*: GLenum = 0xE
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER*: GLenum = 0x84F0
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER*: GLenum = 0x84F1
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS*: GLenum = 0x886C
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS*: GLenum = 0x886D
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS*: GLenum = 0x8E1E
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS*: GLenum = 0x8E1F
  GL_PATCH_VERTICES*: GLenum = 0x8E72
  GL_PATCH_DEFAULT_INNER_LEVEL*: GLenum = 0x8E73
  GL_PATCH_DEFAULT_OUTER_LEVEL*: GLenum = 0x8E74
  GL_TESS_CONTROL_OUTPUT_VERTICES*: GLenum = 0x8E75
  GL_TESS_GEN_MODE*: GLenum = 0x8E76
  GL_TESS_GEN_SPACING*: GLenum = 0x8E77
  GL_TESS_GEN_VERTEX_ORDER*: GLenum = 0x8E78
  GL_TESS_GEN_POINT_MODE*: GLenum = 0x8E79
  GL_ISOLINES*: GLenum = 0x8E7A
  GL_FRACTIONAL_ODD*: GLenum = 0x8E7B
  GL_FRACTIONAL_EVEN*: GLenum = 0x8E7C
  GL_MAX_PATCH_VERTICES*: GLenum = 0x8E7D
  GL_MAX_TESS_GEN_LEVEL*: GLenum = 0x8E7E
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS*: GLenum = 0x8E7F
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS*: GLenum = 0x8E80
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS*: GLenum = 0x8E81
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS*: GLenum = 0x8E82
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS*: GLenum = 0x8E83
  GL_MAX_TESS_PATCH_COMPONENTS*: GLenum = 0x8E84
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS*: GLenum = 0x8E85
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS*: GLenum = 0x8E86
  GL_TESS_EVALUATION_SHADER*: GLenum = 0x8E87
  GL_TESS_CONTROL_SHADER*: GLenum = 0x8E88
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS*: GLenum = 0x8E89
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS*: GLenum = 0x8E8A
  GL_ARB_texture_barrier*: GLenum = 1
  GL_ARB_texture_border_clamp*: GLenum = 1
  GL_CLAMP_TO_BORDER_ARB*: GLenum = 0x812D
  GL_ARB_texture_buffer_object*: GLenum = 1
  GL_TEXTURE_BUFFER_ARB*: GLenum = 0x8C2A
  GL_MAX_TEXTURE_BUFFER_SIZE_ARB*: GLenum = 0x8C2B
  GL_TEXTURE_BINDING_BUFFER_ARB*: GLenum = 0x8C2C
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB*: GLenum = 0x8C2D
  GL_TEXTURE_BUFFER_FORMAT_ARB*: GLenum = 0x8C2E
  GL_ARB_texture_buffer_object_rgb32*: GLenum = 1
  GL_ARB_texture_buffer_range*: GLenum = 1
  GL_TEXTURE_BUFFER_OFFSET*: GLenum = 0x919D
  GL_TEXTURE_BUFFER_SIZE*: GLenum = 0x919E
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT*: GLenum = 0x919F
  GL_ARB_texture_compression*: GLenum = 1
  GL_COMPRESSED_ALPHA_ARB*: GLenum = 0x84E9
  GL_COMPRESSED_LUMINANCE_ARB*: GLenum = 0x84EA
  GL_COMPRESSED_LUMINANCE_ALPHA_ARB*: GLenum = 0x84EB
  GL_COMPRESSED_INTENSITY_ARB*: GLenum = 0x84EC
  GL_COMPRESSED_RGB_ARB*: GLenum = 0x84ED
  GL_COMPRESSED_RGBA_ARB*: GLenum = 0x84EE
  GL_TEXTURE_COMPRESSION_HINT_ARB*: GLenum = 0x84EF
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB*: GLenum = 0x86A0
  GL_TEXTURE_COMPRESSED_ARB*: GLenum = 0x86A1
  GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB*: GLenum = 0x86A2
  GL_COMPRESSED_TEXTURE_FORMATS_ARB*: GLenum = 0x86A3
  GL_ARB_texture_compression_bptc*: GLenum = 1
  GL_COMPRESSED_RGBA_BPTC_UNORM_ARB*: GLenum = 0x8E8C
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB*: GLenum = 0x8E8D
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB*: GLenum = 0x8E8E
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB*: GLenum = 0x8E8F
  GL_ARB_texture_compression_rgtc*: GLenum = 1
  GL_COMPRESSED_RED_RGTC1*: GLenum = 0x8DBB
  GL_COMPRESSED_SIGNED_RED_RGTC1*: GLenum = 0x8DBC
  GL_COMPRESSED_RG_RGTC2*: GLenum = 0x8DBD
  GL_COMPRESSED_SIGNED_RG_RGTC2*: GLenum = 0x8DBE
  GL_ARB_texture_cube_map*: GLenum = 1
  GL_NORMAL_MAP_ARB*: GLenum = 0x8511
  GL_REFLECTION_MAP_ARB*: GLenum = 0x8512
  GL_TEXTURE_CUBE_MAP_ARB*: GLenum = 0x8513
  GL_TEXTURE_BINDING_CUBE_MAP_ARB*: GLenum = 0x8514
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB*: GLenum = 0x8515
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB*: GLenum = 0x8516
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB*: GLenum = 0x8517
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB*: GLenum = 0x8518
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB*: GLenum = 0x8519
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB*: GLenum = 0x851A
  GL_PROXY_TEXTURE_CUBE_MAP_ARB*: GLenum = 0x851B
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB*: GLenum = 0x851C
  GL_ARB_texture_cube_map_array*: GLenum = 1
  GL_TEXTURE_CUBE_MAP_ARRAY_ARB*: GLenum = 0x9009
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB*: GLenum = 0x900A
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB*: GLenum = 0x900B
  GL_SAMPLER_CUBE_MAP_ARRAY_ARB*: GLenum = 0x900C
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB*: GLenum = 0x900D
  GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB*: GLenum = 0x900E
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB*: GLenum = 0x900F
  GL_ARB_texture_env_add*: GLenum = 1
  GL_ARB_texture_env_combine*: GLenum = 1
  GL_SUBTRACT_ARB*: GLenum = 0x84E7
  GL_COMBINE_ARB*: GLenum = 0x8570
  GL_COMBINE_RGB_ARB*: GLenum = 0x8571
  GL_COMBINE_ALPHA_ARB*: GLenum = 0x8572
  GL_RGB_SCALE_ARB*: GLenum = 0x8573
  GL_ADD_SIGNED_ARB*: GLenum = 0x8574
  GL_INTERPOLATE_ARB*: GLenum = 0x8575
  GL_CONSTANT_ARB*: GLenum = 0x8576
  GL_PRIMARY_COLOR_ARB*: GLenum = 0x8577
  GL_PREVIOUS_ARB*: GLenum = 0x8578
  GL_SOURCE0_RGB_ARB*: GLenum = 0x8580
  GL_SOURCE1_RGB_ARB*: GLenum = 0x8581
  GL_SOURCE2_RGB_ARB*: GLenum = 0x8582
  GL_SOURCE0_ALPHA_ARB*: GLenum = 0x8588
  GL_SOURCE1_ALPHA_ARB*: GLenum = 0x8589
  GL_SOURCE2_ALPHA_ARB*: GLenum = 0x858A
  GL_OPERAND0_RGB_ARB*: GLenum = 0x8590
  GL_OPERAND1_RGB_ARB*: GLenum = 0x8591
  GL_OPERAND2_RGB_ARB*: GLenum = 0x8592
  GL_OPERAND0_ALPHA_ARB*: GLenum = 0x8598
  GL_OPERAND1_ALPHA_ARB*: GLenum = 0x8599
  GL_OPERAND2_ALPHA_ARB*: GLenum = 0x859A
  GL_ARB_texture_env_crossbar*: GLenum = 1
  GL_ARB_texture_env_dot3*: GLenum = 1
  GL_DOT3_RGB_ARB*: GLenum = 0x86AE
  GL_DOT3_RGBA_ARB*: GLenum = 0x86AF
  GL_ARB_texture_filter_anisotropic*: GLenum = 1
  GL_ARB_texture_filter_minmax*: GLenum = 1
  GL_TEXTURE_REDUCTION_MODE_ARB*: GLenum = 0x9366
  GL_WEIGHTED_AVERAGE_ARB*: GLenum = 0x9367
  GL_ARB_texture_float*: GLenum = 1
  GL_RGBA32F_ARB*: GLenum = 0x8814
  GL_RGB32F_ARB*: GLenum = 0x8815
  GL_ALPHA32F_ARB*: GLenum = 0x8816
  GL_INTENSITY32F_ARB*: GLenum = 0x8817
  GL_LUMINANCE32F_ARB*: GLenum = 0x8818
  GL_LUMINANCE_ALPHA32F_ARB*: GLenum = 0x8819
  GL_RGBA16F_ARB*: GLenum = 0x881A
  GL_RGB16F_ARB*: GLenum = 0x881B
  GL_ALPHA16F_ARB*: GLenum = 0x881C
  GL_INTENSITY16F_ARB*: GLenum = 0x881D
  GL_LUMINANCE16F_ARB*: GLenum = 0x881E
  GL_LUMINANCE_ALPHA16F_ARB*: GLenum = 0x881F
  GL_TEXTURE_RED_TYPE_ARB*: GLenum = 0x8C10
  GL_TEXTURE_GREEN_TYPE_ARB*: GLenum = 0x8C11
  GL_TEXTURE_BLUE_TYPE_ARB*: GLenum = 0x8C12
  GL_TEXTURE_ALPHA_TYPE_ARB*: GLenum = 0x8C13
  GL_TEXTURE_LUMINANCE_TYPE_ARB*: GLenum = 0x8C14
  GL_TEXTURE_INTENSITY_TYPE_ARB*: GLenum = 0x8C15
  GL_TEXTURE_DEPTH_TYPE_ARB*: GLenum = 0x8C16
  GL_UNSIGNED_NORMALIZED_ARB*: GLenum = 0x8C17
  GL_ARB_texture_gather*: GLenum = 1
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB*: GLenum = 0x8E5E
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB*: GLenum = 0x8E5F
  GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB*: GLenum = 0x8F9F
  GL_ARB_texture_mirror_clamp_to_edge*: GLenum = 1
  GL_MIRROR_CLAMP_TO_EDGE*: GLenum = 0x8743
  GL_ARB_texture_mirrored_repeat*: GLenum = 1
  GL_MIRRORED_REPEAT_ARB*: GLenum = 0x8370
  GL_ARB_texture_multisample*: GLenum = 1
  GL_SAMPLE_POSITION*: GLenum = 0x8E50
  GL_SAMPLE_MASK*: GLenum = 0x8E51
  GL_SAMPLE_MASK_VALUE*: GLenum = 0x8E52
  GL_MAX_SAMPLE_MASK_WORDS*: GLenum = 0x8E59
  GL_TEXTURE_2D_MULTISAMPLE*: GLenum = 0x9100
  GL_PROXY_TEXTURE_2D_MULTISAMPLE*: GLenum = 0x9101
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY*: GLenum = 0x9102
  GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY*: GLenum = 0x9103
  GL_TEXTURE_BINDING_2D_MULTISAMPLE*: GLenum = 0x9104
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY*: GLenum = 0x9105
  GL_TEXTURE_SAMPLES*: GLenum = 0x9106
  GL_TEXTURE_FIXED_SAMPLE_LOCATIONS*: GLenum = 0x9107
  GL_SAMPLER_2D_MULTISAMPLE*: GLenum = 0x9108
  GL_INT_SAMPLER_2D_MULTISAMPLE*: GLenum = 0x9109
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE*: GLenum = 0x910A
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY*: GLenum = 0x910B
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY*: GLenum = 0x910C
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY*: GLenum = 0x910D
  GL_MAX_COLOR_TEXTURE_SAMPLES*: GLenum = 0x910E
  GL_MAX_DEPTH_TEXTURE_SAMPLES*: GLenum = 0x910F
  GL_MAX_INTEGER_SAMPLES*: GLenum = 0x9110
  GL_ARB_texture_non_power_of_two*: GLenum = 1
  GL_ARB_texture_query_levels*: GLenum = 1
  GL_ARB_texture_query_lod*: GLenum = 1
  GL_ARB_texture_rectangle*: GLenum = 1
  GL_TEXTURE_RECTANGLE_ARB*: GLenum = 0x84F5
  GL_TEXTURE_BINDING_RECTANGLE_ARB*: GLenum = 0x84F6
  GL_PROXY_TEXTURE_RECTANGLE_ARB*: GLenum = 0x84F7
  GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB*: GLenum = 0x84F8
  GL_ARB_texture_rg*: GLenum = 1
  GL_COMPRESSED_RED*: GLenum = 0x8225
  GL_COMPRESSED_RG*: GLenum = 0x8226
  GL_RG*: GLenum = 0x8227
  GL_RG_INTEGER*: GLenum = 0x8228
  GL_R8*: GLenum = 0x8229
  GL_R16*: GLenum = 0x822A
  GL_RG8*: GLenum = 0x822B
  GL_RG16*: GLenum = 0x822C
  GL_R16F*: GLenum = 0x822D
  GL_R32F*: GLenum = 0x822E
  GL_RG16F*: GLenum = 0x822F
  GL_RG32F*: GLenum = 0x8230
  GL_R8I*: GLenum = 0x8231
  GL_R8UI*: GLenum = 0x8232
  GL_R16I*: GLenum = 0x8233
  GL_R16UI*: GLenum = 0x8234
  GL_R32I*: GLenum = 0x8235
  GL_R32UI*: GLenum = 0x8236
  GL_RG8I*: GLenum = 0x8237
  GL_RG16I*: GLenum = 0x8239
  GL_RG32I*: GLenum = 0x823B
  GL_RG32UI*: GLenum = 0x823C
  GL_ARB_texture_rgb10_a2ui*: GLenum = 1
  GL_ARB_texture_stencil8*: GLenum = 1
  GL_ARB_texture_storage*: GLenum = 1
  GL_TEXTURE_IMMUTABLE_FORMAT*: GLenum = 0x912F
  GL_ARB_texture_storage_multisample*: GLenum = 1
  GL_ARB_texture_swizzle*: GLenum = 1
  GL_TEXTURE_SWIZZLE_R*: GLenum = 0x8E42
  GL_TEXTURE_SWIZZLE_G*: GLenum = 0x8E43
  GL_TEXTURE_SWIZZLE_B*: GLenum = 0x8E44
  GL_TEXTURE_SWIZZLE_A*: GLenum = 0x8E45
  GL_TEXTURE_SWIZZLE_RGBA*: GLenum = 0x8E46
  GL_ARB_texture_view*: GLenum = 1
  GL_TEXTURE_VIEW_MIN_LEVEL*: GLenum = 0x82DB
  GL_TEXTURE_VIEW_NUM_LEVELS*: GLenum = 0x82DC
  GL_TEXTURE_VIEW_MIN_LAYER*: GLenum = 0x82DD
  GL_TEXTURE_VIEW_NUM_LAYERS*: GLenum = 0x82DE
  GL_ARB_timer_query*: GLenum = 1
  GL_TIME_ELAPSED*: GLenum = 0x88BF
  GL_TIMESTAMP*: GLenum = 0x8E28
  GL_ARB_transform_feedback2*: GLenum = 1
  GL_TRANSFORM_FEEDBACK*: GLenum = 0x8E22
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED*: GLenum = 0x8E23
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE*: GLenum = 0x8E24
  GL_TRANSFORM_FEEDBACK_BINDING*: GLenum = 0x8E25
  GL_ARB_transform_feedback3*: GLenum = 1
  GL_MAX_TRANSFORM_FEEDBACK_BUFFERS*: GLenum = 0x8E70
  GL_ARB_transform_feedback_instanced*: GLenum = 1
  GL_ARB_transform_feedback_overflow_query*: GLenum = 1
  GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB*: GLenum = 0x82EC
  GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB*: GLenum = 0x82ED
  GL_ARB_transpose_matrix*: GLenum = 1
  GL_TRANSPOSE_MODELVIEW_MATRIX_ARB*: GLenum = 0x84E3
  GL_TRANSPOSE_PROJECTION_MATRIX_ARB*: GLenum = 0x84E4
  GL_TRANSPOSE_TEXTURE_MATRIX_ARB*: GLenum = 0x84E5
  GL_TRANSPOSE_COLOR_MATRIX_ARB*: GLenum = 0x84E6
  GL_ARB_uniform_buffer_object*: GLenum = 1
  GL_UNIFORM_BUFFER*: GLenum = 0x8A11
  GL_UNIFORM_BUFFER_BINDING*: GLenum = 0x8A28
  GL_UNIFORM_BUFFER_START*: GLenum = 0x8A29
  GL_UNIFORM_BUFFER_SIZE*: GLenum = 0x8A2A
  GL_MAX_VERTEX_UNIFORM_BLOCKS*: GLenum = 0x8A2B
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS*: GLenum = 0x8A2C
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS*: GLenum = 0x8A2D
  GL_MAX_COMBINED_UNIFORM_BLOCKS*: GLenum = 0x8A2E
  GL_MAX_UNIFORM_BUFFER_BINDINGS*: GLenum = 0x8A2F
  GL_MAX_UNIFORM_BLOCK_SIZE*: GLenum = 0x8A30
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS*: GLenum = 0x8A31
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS*: GLenum = 0x8A32
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS*: GLenum = 0x8A33
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT*: GLenum = 0x8A34
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH*: GLenum = 0x8A35
  GL_ACTIVE_UNIFORM_BLOCKS*: GLenum = 0x8A36
  GL_UNIFORM_TYPE*: GLenum = 0x8A37
  GL_UNIFORM_SIZE*: GLenum = 0x8A38
  GL_UNIFORM_NAME_LENGTH*: GLenum = 0x8A39
  GL_UNIFORM_BLOCK_INDEX*: GLenum = 0x8A3A
  GL_UNIFORM_OFFSET*: GLenum = 0x8A3B
  GL_UNIFORM_ARRAY_STRIDE*: GLenum = 0x8A3C
  GL_UNIFORM_MATRIX_STRIDE*: GLenum = 0x8A3D
  GL_UNIFORM_IS_ROW_MAJOR*: GLenum = 0x8A3E
  GL_UNIFORM_BLOCK_BINDING*: GLenum = 0x8A3F
  GL_UNIFORM_BLOCK_DATA_SIZE*: GLenum = 0x8A40
  GL_UNIFORM_BLOCK_NAME_LENGTH*: GLenum = 0x8A41
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS*: GLenum = 0x8A42
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES*: GLenum = 0x8A43
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER*: GLenum = 0x8A44
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER*: GLenum = 0x8A45
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER*: GLenum = 0x8A46
  GL_INVALID_INDEX*: GLenum64 = 0xFFFFFFFFu
  GL_ARB_vertex_array_bgra*: GLenum = 1
  GL_ARB_vertex_array_object*: GLenum = 1
  GL_VERTEX_ARRAY_BINDING*: GLenum = 0x85B5
  GL_ARB_vertex_attrib_64bit*: GLenum = 1
  GL_ARB_vertex_attrib_binding*: GLenum = 1
  GL_VERTEX_ATTRIB_BINDING*: GLenum = 0x82D4
  GL_VERTEX_ATTRIB_RELATIVE_OFFSET*: GLenum = 0x82D5
  GL_VERTEX_BINDING_DIVISOR*: GLenum = 0x82D6
  GL_VERTEX_BINDING_OFFSET*: GLenum = 0x82D7
  GL_VERTEX_BINDING_STRIDE*: GLenum = 0x82D8
  GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET*: GLenum = 0x82D9
  GL_MAX_VERTEX_ATTRIB_BINDINGS*: GLenum = 0x82DA
  GL_VERTEX_BINDING_BUFFER*: GLenum = 0x8F4F
  GL_ARB_vertex_blend*: GLenum = 1
  GL_MODELVIEW0_ARB*: GLenum = 0x1700
  GL_MODELVIEW1_ARB*: GLenum = 0x850A
  GL_MAX_VERTEX_UNITS_ARB*: GLenum = 0x86A4
  GL_ACTIVE_VERTEX_UNITS_ARB*: GLenum = 0x86A5
  GL_WEIGHT_SUM_UNITY_ARB*: GLenum = 0x86A6
  GL_VERTEX_BLEND_ARB*: GLenum = 0x86A7
  GL_CURRENT_WEIGHT_ARB*: GLenum = 0x86A8
  GL_WEIGHT_ARRAY_TYPE_ARB*: GLenum = 0x86A9
  GL_WEIGHT_ARRAY_STRIDE_ARB*: GLenum = 0x86AA
  GL_WEIGHT_ARRAY_SIZE_ARB*: GLenum = 0x86AB
  GL_WEIGHT_ARRAY_POINTER_ARB*: GLenum = 0x86AC
  GL_WEIGHT_ARRAY_ARB*: GLenum = 0x86AD
  GL_MODELVIEW2_ARB*: GLenum = 0x8722
  GL_MODELVIEW3_ARB*: GLenum = 0x8723
  GL_MODELVIEW4_ARB*: GLenum = 0x8724
  GL_MODELVIEW5_ARB*: GLenum = 0x8725
  GL_MODELVIEW6_ARB*: GLenum = 0x8726
  GL_MODELVIEW7_ARB*: GLenum = 0x8727
  GL_MODELVIEW8_ARB*: GLenum = 0x8728
  GL_MODELVIEW9_ARB*: GLenum = 0x8729
  GL_MODELVIEW10_ARB*: GLenum = 0x872A
  GL_MODELVIEW11_ARB*: GLenum = 0x872B
  GL_MODELVIEW12_ARB*: GLenum = 0x872C
  GL_MODELVIEW13_ARB*: GLenum = 0x872D
  GL_MODELVIEW14_ARB*: GLenum = 0x872E
  GL_MODELVIEW15_ARB*: GLenum = 0x872F
  GL_MODELVIEW16_ARB*: GLenum = 0x8730
  GL_MODELVIEW17_ARB*: GLenum = 0x8731
  GL_MODELVIEW18_ARB*: GLenum = 0x8732
  GL_MODELVIEW19_ARB*: GLenum = 0x8733
  GL_MODELVIEW20_ARB*: GLenum = 0x8734
  GL_MODELVIEW21_ARB*: GLenum = 0x8735
  GL_MODELVIEW22_ARB*: GLenum = 0x8736
  GL_MODELVIEW23_ARB*: GLenum = 0x8737
  GL_MODELVIEW24_ARB*: GLenum = 0x8738
  GL_MODELVIEW25_ARB*: GLenum = 0x8739
  GL_MODELVIEW26_ARB*: GLenum = 0x873A
  GL_MODELVIEW27_ARB*: GLenum = 0x873B
  GL_MODELVIEW28_ARB*: GLenum = 0x873C
  GL_MODELVIEW29_ARB*: GLenum = 0x873D
  GL_MODELVIEW30_ARB*: GLenum = 0x873E
  GL_MODELVIEW31_ARB*: GLenum = 0x873F
  GL_ARB_vertex_buffer_object*: GLenum = 1
  GL_BUFFER_SIZE_ARB*: GLenum = 0x8764
  GL_BUFFER_USAGE_ARB*: GLenum = 0x8765
  GL_ARRAY_BUFFER_ARB*: GLenum = 0x8892
  GL_ELEMENT_ARRAY_BUFFER_ARB*: GLenum = 0x8893
  GL_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x8894
  GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x8895
  GL_VERTEX_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x8896
  GL_NORMAL_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x8897
  GL_COLOR_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x8898
  GL_INDEX_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x8899
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x889A
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x889B
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x889C
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x889D
  GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x889E
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB*: GLenum = 0x889F
  GL_READ_ONLY_ARB*: GLenum = 0x88B8
  GL_WRITE_ONLY_ARB*: GLenum = 0x88B9
  GL_READ_WRITE_ARB*: GLenum = 0x88BA
  GL_BUFFER_ACCESS_ARB*: GLenum = 0x88BB
  GL_BUFFER_MAPPED_ARB*: GLenum = 0x88BC
  GL_BUFFER_MAP_POINTER_ARB*: GLenum = 0x88BD
  GL_STREAM_DRAW_ARB*: GLenum = 0x88E0
  GL_STREAM_READ_ARB*: GLenum = 0x88E1
  GL_STREAM_COPY_ARB*: GLenum = 0x88E2
  GL_STATIC_DRAW_ARB*: GLenum = 0x88E4
  GL_STATIC_READ_ARB*: GLenum = 0x88E5
  GL_STATIC_COPY_ARB*: GLenum = 0x88E6
  GL_DYNAMIC_DRAW_ARB*: GLenum = 0x88E8
  GL_DYNAMIC_READ_ARB*: GLenum = 0x88E9
  GL_DYNAMIC_COPY_ARB*: GLenum = 0x88EA
  GL_ARB_vertex_program*: GLenum = 1
  GL_COLOR_SUM_ARB*: GLenum = 0x8458
  GL_VERTEX_PROGRAM_ARB*: GLenum = 0x8620
  GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB*: GLenum = 0x8622
  GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB*: GLenum = 0x8623
  GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB*: GLenum = 0x8624
  GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB*: GLenum = 0x8625
  GL_CURRENT_VERTEX_ATTRIB_ARB*: GLenum = 0x8626
  GL_PROGRAM_LENGTH_ARB*: GLenum = 0x8627
  GL_PROGRAM_STRING_ARB*: GLenum = 0x8628
  GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB*: GLenum = 0x862E
  GL_MAX_PROGRAM_MATRICES_ARB*: GLenum = 0x862F
  GL_CURRENT_MATRIX_STACK_DEPTH_ARB*: GLenum = 0x8640
  GL_CURRENT_MATRIX_ARB*: GLenum = 0x8641
  GL_VERTEX_PROGRAM_POINT_SIZE_ARB*: GLenum = 0x8642
  GL_VERTEX_PROGRAM_TWO_SIDE_ARB*: GLenum = 0x8643
  GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB*: GLenum = 0x8645
  GL_PROGRAM_ERROR_POSITION_ARB*: GLenum = 0x864B
  GL_PROGRAM_BINDING_ARB*: GLenum = 0x8677
  GL_MAX_VERTEX_ATTRIBS_ARB*: GLenum = 0x8869
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB*: GLenum = 0x886A
  GL_PROGRAM_ERROR_STRING_ARB*: GLenum = 0x8874
  GL_PROGRAM_FORMAT_ASCII_ARB*: GLenum = 0x8875
  GL_PROGRAM_FORMAT_ARB*: GLenum = 0x8876
  GL_PROGRAM_INSTRUCTIONS_ARB*: GLenum = 0x88A0
  GL_MAX_PROGRAM_INSTRUCTIONS_ARB*: GLenum = 0x88A1
  GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB*: GLenum = 0x88A2
  GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB*: GLenum = 0x88A3
  GL_PROGRAM_TEMPORARIES_ARB*: GLenum = 0x88A4
  GL_MAX_PROGRAM_TEMPORARIES_ARB*: GLenum = 0x88A5
  GL_PROGRAM_NATIVE_TEMPORARIES_ARB*: GLenum = 0x88A6
  GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB*: GLenum = 0x88A7
  GL_PROGRAM_PARAMETERS_ARB*: GLenum = 0x88A8
  GL_MAX_PROGRAM_PARAMETERS_ARB*: GLenum = 0x88A9
  GL_PROGRAM_NATIVE_PARAMETERS_ARB*: GLenum = 0x88AA
  GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB*: GLenum = 0x88AB
  GL_PROGRAM_ATTRIBS_ARB*: GLenum = 0x88AC
  GL_MAX_PROGRAM_ATTRIBS_ARB*: GLenum = 0x88AD
  GL_PROGRAM_NATIVE_ATTRIBS_ARB*: GLenum = 0x88AE
  GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB*: GLenum = 0x88AF
  GL_PROGRAM_ADDRESS_REGISTERS_ARB*: GLenum = 0x88B0
  GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB*: GLenum = 0x88B1
  GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB*: GLenum = 0x88B2
  GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB*: GLenum = 0x88B3
  GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB*: GLenum = 0x88B4
  GL_MAX_PROGRAM_ENV_PARAMETERS_ARB*: GLenum = 0x88B5
  GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB*: GLenum = 0x88B6
  GL_TRANSPOSE_CURRENT_MATRIX_ARB*: GLenum = 0x88B7
  GL_MATRIX0_ARB*: GLenum = 0x88C0
  GL_MATRIX1_ARB*: GLenum = 0x88C1
  GL_MATRIX2_ARB*: GLenum = 0x88C2
  GL_MATRIX3_ARB*: GLenum = 0x88C3
  GL_MATRIX4_ARB*: GLenum = 0x88C4
  GL_MATRIX5_ARB*: GLenum = 0x88C5
  GL_MATRIX6_ARB*: GLenum = 0x88C6
  GL_MATRIX7_ARB*: GLenum = 0x88C7
  GL_MATRIX8_ARB*: GLenum = 0x88C8
  GL_MATRIX9_ARB*: GLenum = 0x88C9
  GL_MATRIX10_ARB*: GLenum = 0x88CA
  GL_MATRIX11_ARB*: GLenum = 0x88CB
  GL_MATRIX12_ARB*: GLenum = 0x88CC
  GL_MATRIX13_ARB*: GLenum = 0x88CD
  GL_MATRIX14_ARB*: GLenum = 0x88CE
  GL_MATRIX15_ARB*: GLenum = 0x88CF
  GL_MATRIX16_ARB*: GLenum = 0x88D0
  GL_MATRIX17_ARB*: GLenum = 0x88D1
  GL_MATRIX18_ARB*: GLenum = 0x88D2
  GL_MATRIX19_ARB*: GLenum = 0x88D3
  GL_MATRIX20_ARB*: GLenum = 0x88D4
  GL_MATRIX21_ARB*: GLenum = 0x88D5
  GL_MATRIX22_ARB*: GLenum = 0x88D6
  GL_MATRIX23_ARB*: GLenum = 0x88D7
  GL_MATRIX24_ARB*: GLenum = 0x88D8
  GL_MATRIX25_ARB*: GLenum = 0x88D9
  GL_MATRIX26_ARB*: GLenum = 0x88DA
  GL_MATRIX27_ARB*: GLenum = 0x88DB
  GL_MATRIX28_ARB*: GLenum = 0x88DC
  GL_MATRIX29_ARB*: GLenum = 0x88DD
  GL_MATRIX30_ARB*: GLenum = 0x88DE
  GL_MATRIX31_ARB*: GLenum = 0x88DF
  GL_ARB_vertex_shader*: GLenum = 1
  GL_VERTEX_SHADER_ARB*: GLenum = 0x8B31
  GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB*: GLenum = 0x8B4A
  GL_MAX_VARYING_FLOATS_ARB*: GLenum = 0x8B4B
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB*: GLenum = 0x8B4C
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB*: GLenum = 0x8B4D
  GL_OBJECT_ACTIVE_ATTRIBUTES_ARB*: GLenum = 0x8B89
  GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB*: GLenum = 0x8B8A
  GL_ARB_vertex_type_10f_11f_11f_rev*: GLenum = 1
  GL_ARB_vertex_type_2_10_10_10_rev*: GLenum = 1
  GL_UNSIGNED_INT_2_10_10_10_REV*: GLenum = 0x8368
  GL_INT_2_10_10_10_REV*: GLenum = 0x8D9F
  GL_ARB_viewport_array*: GLenum = 1
  GL_MAX_VIEWPORTS*: GLenum = 0x825B
  GL_VIEWPORT_SUBPIXEL_BITS*: GLenum = 0x825C
  GL_VIEWPORT_BOUNDS_RANGE*: GLenum = 0x825D
  GL_LAYER_PROVOKING_VERTEX*: GLenum = 0x825E
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX*: GLenum = 0x825F
  GL_UNDEFINED_VERTEX*: GLenum = 0x8260
  GL_ARB_window_pos*: GLenum = 1
  GL_ARM_mali_program_binary*: GLenum = 1
  GL_MALI_PROGRAM_BINARY_ARM*: GLenum = 0x8F61
  GL_ARM_mali_shader_binary*: GLenum = 1
  GL_MALI_SHADER_BINARY_ARM*: GLenum = 0x8F60
  GL_ARM_rgba8*: GLenum = 1
  GL_RGBA8_OES*: GLenum = 0x8058
  GL_ARM_shader_framebuffer_fetch*: GLenum = 1
  GL_FETCH_PER_SAMPLE_ARM*: GLenum = 0x8F65
  GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM*: GLenum = 0x8F66
  GL_ARM_shader_framebuffer_fetch_depth_stencil*: GLenum = 1
  GL_ATIX_point_sprites*: GLenum = 1
  GL_TEXTURE_POINT_MODE_ATIX*: GLenum = 0x60B0
  GL_TEXTURE_POINT_ONE_COORD_ATIX*: GLenum = 0x60B1
  GL_TEXTURE_POINT_SPRITE_ATIX*: GLenum = 0x60B2
  GL_POINT_SPRITE_CULL_MODE_ATIX*: GLenum = 0x60B3
  GL_POINT_SPRITE_CULL_CENTER_ATIX*: GLenum = 0x60B4
  GL_POINT_SPRITE_CULL_CLIP_ATIX*: GLenum = 0x60B5
  GL_ATIX_texture_env_combine3*: GLenum = 1
  GL_MODULATE_ADD_ATIX*: GLenum = 0x8744
  GL_MODULATE_SIGNED_ADD_ATIX*: GLenum = 0x8745
  GL_MODULATE_SUBTRACT_ATIX*: GLenum = 0x8746
  GL_ATIX_texture_env_route*: GLenum = 1
  GL_SECONDARY_COLOR_ATIX*: GLenum = 0x8747
  GL_TEXTURE_OUTPUT_RGB_ATIX*: GLenum = 0x8748
  GL_TEXTURE_OUTPUT_ALPHA_ATIX*: GLenum = 0x8749
  GL_ATIX_vertex_shader_output_point_size*: GLenum = 1
  GL_OUTPUT_POINT_SIZE_ATIX*: GLenum = 0x610E
  GL_ATI_draw_buffers*: GLenum = 1
  GL_MAX_DRAW_BUFFERS_ATI*: GLenum = 0x8824
  GL_DRAW_BUFFER0_ATI*: GLenum = 0x8825
  GL_DRAW_BUFFER1_ATI*: GLenum = 0x8826
  GL_DRAW_BUFFER2_ATI*: GLenum = 0x8827
  GL_DRAW_BUFFER3_ATI*: GLenum = 0x8828
  GL_DRAW_BUFFER4_ATI*: GLenum = 0x8829
  GL_DRAW_BUFFER5_ATI*: GLenum = 0x882A
  GL_DRAW_BUFFER6_ATI*: GLenum = 0x882B
  GL_DRAW_BUFFER7_ATI*: GLenum = 0x882C
  GL_DRAW_BUFFER8_ATI*: GLenum = 0x882D
  GL_DRAW_BUFFER9_ATI*: GLenum = 0x882E
  GL_DRAW_BUFFER10_ATI*: GLenum = 0x882F
  GL_DRAW_BUFFER11_ATI*: GLenum = 0x8830
  GL_DRAW_BUFFER12_ATI*: GLenum = 0x8831
  GL_DRAW_BUFFER13_ATI*: GLenum = 0x8832
  GL_DRAW_BUFFER14_ATI*: GLenum = 0x8833
  GL_DRAW_BUFFER15_ATI*: GLenum = 0x8834
  GL_ATI_element_array*: GLenum = 1
  GL_ELEMENT_ARRAY_ATI*: GLenum = 0x8768
  GL_ELEMENT_ARRAY_TYPE_ATI*: GLenum = 0x8769
  GL_ELEMENT_ARRAY_POINTER_ATI*: GLenum = 0x876A
  GL_ATI_envmap_bumpmap*: GLenum = 1
  GL_BUMP_ROT_MATRIX_ATI*: GLenum = 0x8775
  GL_BUMP_ROT_MATRIX_SIZE_ATI*: GLenum = 0x8776
  GL_BUMP_NUM_TEX_UNITS_ATI*: GLenum = 0x8777
  GL_BUMP_TEX_UNITS_ATI*: GLenum = 0x8778
  GL_DUDV_ATI*: GLenum = 0x8779
  GL_DU8DV8_ATI*: GLenum = 0x877A
  GL_BUMP_ENVMAP_ATI*: GLenum = 0x877B
  GL_BUMP_TARGET_ATI*: GLenum = 0x877C
  GL_ATI_fragment_shader*: GLenum = 1
  GL_2X_BIT_ATI*: GLenum = 0x00000001
  GL_RED_BIT_ATI*: GLenum = 0x00000001
  GL_4X_BIT_ATI*: GLenum = 0x00000002
  GL_COMP_BIT_ATI*: GLenum = 0x00000002
  GL_GREEN_BIT_ATI*: GLenum = 0x00000002
  GL_8X_BIT_ATI*: GLenum = 0x00000004
  GL_BLUE_BIT_ATI*: GLenum = 0x00000004
  GL_NEGATE_BIT_ATI*: GLenum = 0x00000004
  GL_BIAS_BIT_ATI*: GLenum = 0x00000008
  GL_HALF_BIT_ATI*: GLenum = 0x00000008
  GL_QUARTER_BIT_ATI*: GLenum = 0x00000010
  GL_EIGHTH_BIT_ATI*: GLenum = 0x00000020
  GL_SATURATE_BIT_ATI*: GLenum = 0x00000040
  GL_FRAGMENT_SHADER_ATI*: GLenum = 0x8920
  GL_REG_0_ATI*: GLenum = 0x8921
  GL_REG_1_ATI*: GLenum = 0x8922
  GL_REG_2_ATI*: GLenum = 0x8923
  GL_REG_3_ATI*: GLenum = 0x8924
  GL_REG_4_ATI*: GLenum = 0x8925
  GL_REG_5_ATI*: GLenum = 0x8926
  GL_CON_0_ATI*: GLenum = 0x8941
  GL_CON_1_ATI*: GLenum = 0x8942
  GL_CON_2_ATI*: GLenum = 0x8943
  GL_CON_3_ATI*: GLenum = 0x8944
  GL_CON_4_ATI*: GLenum = 0x8945
  GL_CON_5_ATI*: GLenum = 0x8946
  GL_CON_6_ATI*: GLenum = 0x8947
  GL_CON_7_ATI*: GLenum = 0x8948
  GL_MOV_ATI*: GLenum = 0x8961
  GL_ADD_ATI*: GLenum = 0x8963
  GL_MUL_ATI*: GLenum = 0x8964
  GL_SUB_ATI*: GLenum = 0x8965
  GL_DOT3_ATI*: GLenum = 0x8966
  GL_DOT4_ATI*: GLenum = 0x8967
  GL_MAD_ATI*: GLenum = 0x8968
  GL_LERP_ATI*: GLenum = 0x8969
  GL_CND_ATI*: GLenum = 0x896A
  GL_CND0_ATI*: GLenum = 0x896B
  GL_DOT2_ADD_ATI*: GLenum = 0x896C
  GL_SECONDARY_INTERPOLATOR_ATI*: GLenum = 0x896D
  GL_NUM_FRAGMENT_REGISTERS_ATI*: GLenum = 0x896E
  GL_NUM_FRAGMENT_CONSTANTS_ATI*: GLenum = 0x896F
  GL_NUM_PASSES_ATI*: GLenum = 0x8970
  GL_NUM_INSTRUCTIONS_PER_PASS_ATI*: GLenum = 0x8971
  GL_NUM_INSTRUCTIONS_TOTAL_ATI*: GLenum = 0x8972
  GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI*: GLenum = 0x8973
  GL_NUM_LOOPBACK_COMPONENTS_ATI*: GLenum = 0x8974
  GL_COLOR_ALPHA_PAIRING_ATI*: GLenum = 0x8975
  GL_SWIZZLE_STR_ATI*: GLenum = 0x8976
  GL_SWIZZLE_STQ_ATI*: GLenum = 0x8977
  GL_SWIZZLE_STR_DR_ATI*: GLenum = 0x8978
  GL_SWIZZLE_STQ_DQ_ATI*: GLenum = 0x8979
  GL_SWIZZLE_STRQ_ATI*: GLenum = 0x897A
  GL_SWIZZLE_STRQ_DQ_ATI*: GLenum = 0x897B
  GL_ATI_map_object_buffer*: GLenum = 1
  GL_ATI_meminfo*: GLenum = 1
  GL_VBO_FREE_MEMORY_ATI*: GLenum = 0x87FB
  GL_TEXTURE_FREE_MEMORY_ATI*: GLenum = 0x87FC
  GL_RENDERBUFFER_FREE_MEMORY_ATI*: GLenum = 0x87FD
  GL_ATI_pn_triangles*: GLenum = 1
  GL_PN_TRIANGLES_ATI*: GLenum = 0x87F0
  GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI*: GLenum = 0x87F1
  GL_PN_TRIANGLES_POINT_MODE_ATI*: GLenum = 0x87F2
  GL_PN_TRIANGLES_NORMAL_MODE_ATI*: GLenum = 0x87F3
  GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI*: GLenum = 0x87F4
  GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI*: GLenum = 0x87F5
  GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI*: GLenum = 0x87F6
  GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI*: GLenum = 0x87F7
  GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI*: GLenum = 0x87F8
  GL_ATI_separate_stencil*: GLenum = 1
  GL_STENCIL_BACK_FUNC_ATI*: GLenum = 0x8800
  GL_STENCIL_BACK_FAIL_ATI*: GLenum = 0x8801
  GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI*: GLenum = 0x8802
  GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI*: GLenum = 0x8803
  GL_ATI_shader_texture_lod*: GLenum = 1
  GL_ATI_text_fragment_shader*: GLenum = 1
  GL_TEXT_FRAGMENT_SHADER_ATI*: GLenum = 0x8200
  GL_ATI_texture_compression_3dc*: GLenum = 1
  GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI*: GLenum = 0x8837
  GL_ATI_texture_env_combine3*: GLenum = 1
  GL_MODULATE_ADD_ATI*: GLenum = 0x8744
  GL_MODULATE_SIGNED_ADD_ATI*: GLenum = 0x8745
  GL_MODULATE_SUBTRACT_ATI*: GLenum = 0x8746
  GL_ATI_texture_float*: GLenum = 1
  GL_RGBA_FLOAT32_ATI*: GLenum = 0x8814
  GL_RGB_FLOAT32_ATI*: GLenum = 0x8815
  GL_ALPHA_FLOAT32_ATI*: GLenum = 0x8816
  GL_INTENSITY_FLOAT32_ATI*: GLenum = 0x8817
  GL_LUMINANCE_FLOAT32_ATI*: GLenum = 0x8818
  GL_LUMINANCE_ALPHA_FLOAT32_ATI*: GLenum = 0x8819
  GL_RGBA_FLOAT16_ATI*: GLenum = 0x881A
  GL_RGB_FLOAT16_ATI*: GLenum = 0x881B
  GL_ALPHA_FLOAT16_ATI*: GLenum = 0x881C
  GL_INTENSITY_FLOAT16_ATI*: GLenum = 0x881D
  GL_LUMINANCE_FLOAT16_ATI*: GLenum = 0x881E
  GL_LUMINANCE_ALPHA_FLOAT16_ATI*: GLenum = 0x881F
  GL_ATI_texture_mirror_once*: GLenum = 1
  GL_MIRROR_CLAMP_ATI*: GLenum = 0x8742
  GL_MIRROR_CLAMP_TO_EDGE_ATI*: GLenum = 0x8743
  GL_ATI_vertex_array_object*: GLenum = 1
  GL_STATIC_ATI*: GLenum = 0x8760
  GL_DYNAMIC_ATI*: GLenum = 0x8761
  GL_PRESERVE_ATI*: GLenum = 0x8762
  GL_DISCARD_ATI*: GLenum = 0x8763
  GL_OBJECT_BUFFER_SIZE_ATI*: GLenum = 0x8764
  GL_OBJECT_BUFFER_USAGE_ATI*: GLenum = 0x8765
  GL_ARRAY_OBJECT_BUFFER_ATI*: GLenum = 0x8766
  GL_ARRAY_OBJECT_OFFSET_ATI*: GLenum = 0x8767
  GL_ATI_vertex_attrib_array_object*: GLenum = 1
  GL_ATI_vertex_streams*: GLenum = 1
  GL_MAX_VERTEX_STREAMS_ATI*: GLenum = 0x876B
  GL_VERTEX_SOURCE_ATI*: GLenum = 0x876C
  GL_VERTEX_STREAM0_ATI*: GLenum = 0x876D
  GL_VERTEX_STREAM1_ATI*: GLenum = 0x876E
  GL_VERTEX_STREAM2_ATI*: GLenum = 0x876F
  GL_VERTEX_STREAM3_ATI*: GLenum = 0x8770
  GL_VERTEX_STREAM4_ATI*: GLenum = 0x8771
  GL_VERTEX_STREAM5_ATI*: GLenum = 0x8772
  GL_VERTEX_STREAM6_ATI*: GLenum = 0x8773
  GL_VERTEX_STREAM7_ATI*: GLenum = 0x8774
  GL_EGL_KHR_context_flush_control*: GLenum = 1
  GL_EGL_NV_robustness_video_memory_purge*: GLenum = 1
  GL_EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV*: GLenum = 0x334C
  GL_PURGED_CONTEXT_RESET_NV*: GLenum = 0x92BB
  GL_EXT_422_pixels*: GLenum = 1
  GL_422_EXT*: GLenum = 0x80CC
  GL_422_REV_EXT*: GLenum = 0x80CD
  GL_422_AVERAGE_EXT*: GLenum = 0x80CE
  GL_422_REV_AVERAGE_EXT*: GLenum = 0x80CF
  GL_EXT_Cg_shader*: GLenum = 1
  GL_CG_VERTEX_SHADER_EXT*: GLenum = 0x890E
  GL_CG_FRAGMENT_SHADER_EXT*: GLenum = 0x890F
  GL_EXT_EGL_image_array*: GLenum = 1
  GL_EXT_YUV_target*: GLenum = 1
  GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT*: GLenum = 0x8BE7
  GL_EXT_abgr*: GLenum = 1
  GL_ABGR_EXT*: GLenum = 0x8000
  GL_EXT_base_instance*: GLenum = 1
  GL_EXT_bgra*: GLenum = 1
  GL_BGR_EXT*: GLenum = 0x80E0
  GL_EXT_bindable_uniform*: GLenum = 1
  GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT*: GLenum = 0x8DE2
  GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT*: GLenum = 0x8DE3
  GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT*: GLenum = 0x8DE4
  GL_MAX_BINDABLE_UNIFORM_SIZE_EXT*: GLenum = 0x8DED
  GL_UNIFORM_BUFFER_EXT*: GLenum = 0x8DEE
  GL_UNIFORM_BUFFER_BINDING_EXT*: GLenum = 0x8DEF
  GL_EXT_blend_color*: GLenum = 1
  GL_CONSTANT_COLOR_EXT*: GLenum = 0x8001
  GL_ONE_MINUS_CONSTANT_COLOR_EXT*: GLenum = 0x8002
  GL_CONSTANT_ALPHA_EXT*: GLenum = 0x8003
  GL_ONE_MINUS_CONSTANT_ALPHA_EXT*: GLenum = 0x8004
  GL_BLEND_COLOR_EXT*: GLenum = 0x8005
  GL_EXT_blend_equation_separate*: GLenum = 1
  GL_BLEND_EQUATION_RGB_EXT*: GLenum = 0x8009
  GL_BLEND_EQUATION_ALPHA_EXT*: GLenum = 0x883D
  GL_EXT_blend_func_extended*: GLenum = 1
  GL_SRC_ALPHA_SATURATE_EXT*: GLenum = 0x0308
  GL_SRC1_ALPHA_EXT*: GLenum = 0x8589
  GL_SRC1_COLOR_EXT*: GLenum = 0x88F9
  GL_ONE_MINUS_SRC1_COLOR_EXT*: GLenum = 0x88FA
  GL_ONE_MINUS_SRC1_ALPHA_EXT*: GLenum = 0x88FB
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT*: GLenum = 0x88FC
  GL_LOCATION_INDEX_EXT*: GLenum = 0x930F
  GL_EXT_blend_func_separate*: GLenum = 1
  GL_BLEND_DST_RGB_EXT*: GLenum = 0x80C8
  GL_BLEND_SRC_RGB_EXT*: GLenum = 0x80C9
  GL_BLEND_DST_ALPHA_EXT*: GLenum = 0x80CA
  GL_BLEND_SRC_ALPHA_EXT*: GLenum = 0x80CB
  GL_EXT_blend_logic_op*: GLenum = 1
  GL_EXT_blend_minmax*: GLenum = 1
  GL_FUNC_ADD_EXT*: GLenum = 0x8006
  GL_MIN_EXT*: GLenum = 0x8007
  GL_MAX_EXT*: GLenum = 0x8008
  GL_BLEND_EQUATION_EXT*: GLenum = 0x8009
  GL_EXT_blend_subtract*: GLenum = 1
  GL_FUNC_SUBTRACT_EXT*: GLenum = 0x800A
  GL_FUNC_REVERSE_SUBTRACT_EXT*: GLenum = 0x800B
  GL_EXT_buffer_storage*: GLenum = 1
  GL_MAP_PERSISTENT_BIT_EXT*: GLenum = 0x0040
  GL_MAP_COHERENT_BIT_EXT*: GLenum = 0x0080
  GL_DYNAMIC_STORAGE_BIT_EXT*: GLenum = 0x0100
  GL_CLIENT_STORAGE_BIT_EXT*: GLenum = 0x0200
  GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT*: GLenum = 0x00004000
  GL_BUFFER_IMMUTABLE_STORAGE_EXT*: GLenum = 0x821F
  GL_BUFFER_STORAGE_FLAGS_EXT*: GLenum = 0x8220
  GL_EXT_clear_texture*: GLenum = 1
  GL_EXT_clip_cull_distance*: GLenum = 1
  GL_MAX_CLIP_DISTANCES_EXT*: GLenum = 0x0D32
  GL_CLIP_DISTANCE0_EXT*: GLenum = 0x3000
  GL_CLIP_DISTANCE1_EXT*: GLenum = 0x3001
  GL_CLIP_DISTANCE2_EXT*: GLenum = 0x3002
  GL_CLIP_DISTANCE3_EXT*: GLenum = 0x3003
  GL_CLIP_DISTANCE4_EXT*: GLenum = 0x3004
  GL_CLIP_DISTANCE5_EXT*: GLenum = 0x3005
  GL_CLIP_DISTANCE6_EXT*: GLenum = 0x3006
  GL_CLIP_DISTANCE7_EXT*: GLenum = 0x3007
  GL_MAX_CULL_DISTANCES_EXT*: GLenum = 0x82F9
  GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT*: GLenum = 0x82FA
  GL_EXT_clip_volume_hint*: GLenum = 1
  GL_CLIP_VOLUME_CLIPPING_HINT_EXT*: GLenum = 0x80F0
  GL_EXT_cmyka*: GLenum = 1
  GL_CMYK_EXT*: GLenum = 0x800C
  GL_CMYKA_EXT*: GLenum = 0x800D
  GL_PACK_CMYK_HINT_EXT*: GLenum = 0x800E
  GL_UNPACK_CMYK_HINT_EXT*: GLenum = 0x800F
  GL_EXT_color_buffer_float*: GLenum = 1
  GL_EXT_color_buffer_half_float*: GLenum = 1
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT*: GLenum = 0x8211
  GL_R16F_EXT*: GLenum = 0x822D
  GL_RG16F_EXT*: GLenum = 0x822F
  GL_RGBA16F_EXT*: GLenum = 0x881A
  GL_RGB16F_EXT*: GLenum = 0x881B
  GL_UNSIGNED_NORMALIZED_EXT*: GLenum = 0x8C17
  GL_EXT_color_subtable*: GLenum = 1
  GL_EXT_compiled_vertex_array*: GLenum = 1
  GL_ARRAY_ELEMENT_LOCK_FIRST_EXT*: GLenum = 0x81A8
  GL_ARRAY_ELEMENT_LOCK_COUNT_EXT*: GLenum = 0x81A9
  GL_EXT_compressed_ETC1_RGB8_sub_texture*: GLenum = 1
  GL_EXT_conservative_depth*: GLenum = 1
  GL_EXT_convolution*: GLenum = 1
  GL_CONVOLUTION_1D_EXT*: GLenum = 0x8010
  GL_CONVOLUTION_2D_EXT*: GLenum = 0x8011
  GL_SEPARABLE_2D_EXT*: GLenum = 0x8012
  GL_CONVOLUTION_BORDER_MODE_EXT*: GLenum = 0x8013
  GL_CONVOLUTION_FILTER_SCALE_EXT*: GLenum = 0x8014
  GL_CONVOLUTION_FILTER_BIAS_EXT*: GLenum = 0x8015
  GL_REDUCE_EXT*: GLenum = 0x8016
  GL_CONVOLUTION_FORMAT_EXT*: GLenum = 0x8017
  GL_CONVOLUTION_WIDTH_EXT*: GLenum = 0x8018
  GL_CONVOLUTION_HEIGHT_EXT*: GLenum = 0x8019
  GL_MAX_CONVOLUTION_WIDTH_EXT*: GLenum = 0x801A
  GL_MAX_CONVOLUTION_HEIGHT_EXT*: GLenum = 0x801B
  GL_POST_CONVOLUTION_RED_SCALE_EXT*: GLenum = 0x801C
  GL_POST_CONVOLUTION_GREEN_SCALE_EXT*: GLenum = 0x801D
  GL_POST_CONVOLUTION_BLUE_SCALE_EXT*: GLenum = 0x801E
  GL_POST_CONVOLUTION_ALPHA_SCALE_EXT*: GLenum = 0x801F
  GL_POST_CONVOLUTION_RED_BIAS_EXT*: GLenum = 0x8020
  GL_POST_CONVOLUTION_GREEN_BIAS_EXT*: GLenum = 0x8021
  GL_POST_CONVOLUTION_BLUE_BIAS_EXT*: GLenum = 0x8022
  GL_POST_CONVOLUTION_ALPHA_BIAS_EXT*: GLenum = 0x8023
  GL_EXT_coordinate_frame*: GLenum = 1
  GL_TANGENT_ARRAY_EXT*: GLenum = 0x8439
  GL_BINORMAL_ARRAY_EXT*: GLenum = 0x843A
  GL_CURRENT_TANGENT_EXT*: GLenum = 0x843B
  GL_CURRENT_BINORMAL_EXT*: GLenum = 0x843C
  GL_TANGENT_ARRAY_TYPE_EXT*: GLenum = 0x843E
  GL_TANGENT_ARRAY_STRIDE_EXT*: GLenum = 0x843F
  GL_BINORMAL_ARRAY_TYPE_EXT*: GLenum = 0x8440
  GL_BINORMAL_ARRAY_STRIDE_EXT*: GLenum = 0x8441
  GL_TANGENT_ARRAY_POINTER_EXT*: GLenum = 0x8442
  GL_BINORMAL_ARRAY_POINTER_EXT*: GLenum = 0x8443
  GL_MAP1_TANGENT_EXT*: GLenum = 0x8444
  GL_MAP2_TANGENT_EXT*: GLenum = 0x8445
  GL_MAP1_BINORMAL_EXT*: GLenum = 0x8446
  GL_MAP2_BINORMAL_EXT*: GLenum = 0x8447
  GL_EXT_copy_image*: GLenum = 1
  GL_EXT_copy_texture*: GLenum = 1
  GL_EXT_cull_vertex*: GLenum = 1
  GL_CULL_VERTEX_EXT*: GLenum = 0x81AA
  GL_CULL_VERTEX_EYE_POSITION_EXT*: GLenum = 0x81AB
  GL_CULL_VERTEX_OBJECT_POSITION_EXT*: GLenum = 0x81AC
  GL_EXT_debug_label*: GLenum = 1
  GL_PROGRAM_PIPELINE_OBJECT_EXT*: GLenum = 0x8A4F
  GL_PROGRAM_OBJECT_EXT*: GLenum = 0x8B40
  GL_SHADER_OBJECT_EXT*: GLenum = 0x8B48
  GL_BUFFER_OBJECT_EXT*: GLenum = 0x9151
  GL_QUERY_OBJECT_EXT*: GLenum = 0x9153
  GL_VERTEX_ARRAY_OBJECT_EXT*: GLenum = 0x9154
  GL_EXT_debug_marker*: GLenum = 1
  GL_EXT_depth_bounds_test*: GLenum = 1
  GL_DEPTH_BOUNDS_TEST_EXT*: GLenum = 0x8890
  GL_DEPTH_BOUNDS_EXT*: GLenum = 0x8891
  GL_EXT_direct_state_access*: GLenum = 1
  GL_PROGRAM_MATRIX_EXT*: GLenum = 0x8E2D
  GL_TRANSPOSE_PROGRAM_MATRIX_EXT*: GLenum = 0x8E2E
  GL_PROGRAM_MATRIX_STACK_DEPTH_EXT*: GLenum = 0x8E2F
  GL_EXT_discard_framebuffer*: GLenum = 1
  GL_COLOR_EXT*: GLenum = 0x1800
  GL_DEPTH_EXT*: GLenum = 0x1801
  GL_STENCIL_EXT*: GLenum = 0x1802
  GL_EXT_draw_buffers*: GLenum = 1
  GL_MAX_DRAW_BUFFERS_EXT*: GLenum = 0x8824
  GL_DRAW_BUFFER0_EXT*: GLenum = 0x8825
  GL_DRAW_BUFFER1_EXT*: GLenum = 0x8826
  GL_DRAW_BUFFER2_EXT*: GLenum = 0x8827
  GL_DRAW_BUFFER3_EXT*: GLenum = 0x8828
  GL_DRAW_BUFFER4_EXT*: GLenum = 0x8829
  GL_DRAW_BUFFER5_EXT*: GLenum = 0x882A
  GL_DRAW_BUFFER6_EXT*: GLenum = 0x882B
  GL_DRAW_BUFFER7_EXT*: GLenum = 0x882C
  GL_DRAW_BUFFER8_EXT*: GLenum = 0x882D
  GL_DRAW_BUFFER9_EXT*: GLenum = 0x882E
  GL_DRAW_BUFFER10_EXT*: GLenum = 0x882F
  GL_DRAW_BUFFER11_EXT*: GLenum = 0x8830
  GL_DRAW_BUFFER12_EXT*: GLenum = 0x8831
  GL_DRAW_BUFFER13_EXT*: GLenum = 0x8832
  GL_DRAW_BUFFER14_EXT*: GLenum = 0x8833
  GL_DRAW_BUFFER15_EXT*: GLenum = 0x8834
  GL_MAX_COLOR_ATTACHMENTS_EXT*: GLenum = 0x8CDF
  GL_COLOR_ATTACHMENT0_EXT*: GLenum = 0x8CE0
  GL_COLOR_ATTACHMENT1_EXT*: GLenum = 0x8CE1
  GL_COLOR_ATTACHMENT2_EXT*: GLenum = 0x8CE2
  GL_COLOR_ATTACHMENT3_EXT*: GLenum = 0x8CE3
  GL_COLOR_ATTACHMENT4_EXT*: GLenum = 0x8CE4
  GL_COLOR_ATTACHMENT5_EXT*: GLenum = 0x8CE5
  GL_COLOR_ATTACHMENT6_EXT*: GLenum = 0x8CE6
  GL_COLOR_ATTACHMENT7_EXT*: GLenum = 0x8CE7
  GL_COLOR_ATTACHMENT8_EXT*: GLenum = 0x8CE8
  GL_COLOR_ATTACHMENT9_EXT*: GLenum = 0x8CE9
  GL_COLOR_ATTACHMENT10_EXT*: GLenum = 0x8CEA
  GL_COLOR_ATTACHMENT11_EXT*: GLenum = 0x8CEB
  GL_COLOR_ATTACHMENT12_EXT*: GLenum = 0x8CEC
  GL_COLOR_ATTACHMENT13_EXT*: GLenum = 0x8CED
  GL_COLOR_ATTACHMENT14_EXT*: GLenum = 0x8CEE
  GL_COLOR_ATTACHMENT15_EXT*: GLenum = 0x8CEF
  GL_EXT_draw_buffers2*: GLenum = 1
  GL_EXT_draw_buffers_indexed*: GLenum = 1
  GL_EXT_draw_elements_base_vertex*: GLenum = 1
  GL_EXT_draw_instanced*: GLenum = 1
  GL_EXT_draw_range_elements*: GLenum = 1
  GL_MAX_ELEMENTS_VERTICES_EXT*: GLenum = 0x80E8
  GL_MAX_ELEMENTS_INDICES_EXT*: GLenum = 0x80E9
  GL_EXT_float_blend*: GLenum = 1
  GL_EXT_fog_coord*: GLenum = 1
  GL_FOG_COORDINATE_SOURCE_EXT*: GLenum = 0x8450
  GL_FOG_COORDINATE_EXT*: GLenum = 0x8451
  GL_FRAGMENT_DEPTH_EXT*: GLenum = 0x8452
  GL_CURRENT_FOG_COORDINATE_EXT*: GLenum = 0x8453
  GL_FOG_COORDINATE_ARRAY_TYPE_EXT*: GLenum = 0x8454
  GL_FOG_COORDINATE_ARRAY_STRIDE_EXT*: GLenum = 0x8455
  GL_FOG_COORDINATE_ARRAY_POINTER_EXT*: GLenum = 0x8456
  GL_FOG_COORDINATE_ARRAY_EXT*: GLenum = 0x8457
  GL_EXT_frag_depth*: GLenum = 1
  GL_EXT_fragment_lighting*: GLenum = 1
  GL_FRAGMENT_LIGHTING_EXT*: GLenum = 0x8400
  GL_FRAGMENT_COLOR_MATERIAL_EXT*: GLenum = 0x8401
  GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT*: GLenum = 0x8402
  GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT*: GLenum = 0x8403
  GL_MAX_FRAGMENT_LIGHTS_EXT*: GLenum = 0x8404
  GL_MAX_ACTIVE_LIGHTS_EXT*: GLenum = 0x8405
  GL_CURRENT_RASTER_NORMAL_EXT*: GLenum = 0x8406
  GL_LIGHT_ENV_MODE_EXT*: GLenum = 0x8407
  GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT*: GLenum = 0x8408
  GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT*: GLenum = 0x8409
  GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT*: GLenum = 0x840A
  GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT*: GLenum = 0x840B
  GL_FRAGMENT_LIGHT0_EXT*: GLenum = 0x840C
  GL_FRAGMENT_LIGHT7_EXT*: GLenum = 0x8413
  GL_EXT_framebuffer_blit*: GLenum = 1
  GL_DRAW_FRAMEBUFFER_BINDING_EXT*: GLenum = 0x8CA6
  GL_READ_FRAMEBUFFER_EXT*: GLenum = 0x8CA8
  GL_DRAW_FRAMEBUFFER_EXT*: GLenum = 0x8CA9
  GL_READ_FRAMEBUFFER_BINDING_EXT*: GLenum = 0x8CAA
  GL_EXT_framebuffer_multisample*: GLenum = 1
  GL_RENDERBUFFER_SAMPLES_EXT*: GLenum = 0x8CAB
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT*: GLenum = 0x8D56
  GL_MAX_SAMPLES_EXT*: GLenum = 0x8D57
  GL_EXT_framebuffer_multisample_blit_scaled*: GLenum = 1
  GL_SCALED_RESOLVE_FASTEST_EXT*: GLenum = 0x90BA
  GL_SCALED_RESOLVE_NICEST_EXT*: GLenum = 0x90BB
  GL_EXT_framebuffer_object*: GLenum = 1
  GL_INVALID_FRAMEBUFFER_OPERATION_EXT*: GLenum = 0x0506
  GL_MAX_RENDERBUFFER_SIZE_EXT*: GLenum = 0x84E8
  GL_FRAMEBUFFER_BINDING_EXT*: GLenum = 0x8CA6
  GL_RENDERBUFFER_BINDING_EXT*: GLenum = 0x8CA7
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT*: GLenum = 0x8CD0
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT*: GLenum = 0x8CD1
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT*: GLenum = 0x8CD2
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT*: GLenum = 0x8CD3
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT*: GLenum = 0x8CD4
  GL_FRAMEBUFFER_COMPLETE_EXT*: GLenum = 0x8CD5
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT*: GLenum = 0x8CD6
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT*: GLenum = 0x8CD7
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT*: GLenum = 0x8CD9
  GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT*: GLenum = 0x8CDA
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT*: GLenum = 0x8CDB
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT*: GLenum = 0x8CDC
  GL_FRAMEBUFFER_UNSUPPORTED_EXT*: GLenum = 0x8CDD
  GL_DEPTH_ATTACHMENT_EXT*: GLenum = 0x8D00
  GL_STENCIL_ATTACHMENT_EXT*: GLenum = 0x8D20
  GL_FRAMEBUFFER_EXT*: GLenum = 0x8D40
  GL_RENDERBUFFER_EXT*: GLenum = 0x8D41
  GL_RENDERBUFFER_WIDTH_EXT*: GLenum = 0x8D42
  GL_RENDERBUFFER_HEIGHT_EXT*: GLenum = 0x8D43
  GL_RENDERBUFFER_INTERNAL_FORMAT_EXT*: GLenum = 0x8D44
  GL_STENCIL_INDEX1_EXT*: GLenum = 0x8D46
  GL_STENCIL_INDEX4_EXT*: GLenum = 0x8D47
  GL_STENCIL_INDEX8_EXT*: GLenum = 0x8D48
  GL_STENCIL_INDEX16_EXT*: GLenum = 0x8D49
  GL_RENDERBUFFER_RED_SIZE_EXT*: GLenum = 0x8D50
  GL_RENDERBUFFER_GREEN_SIZE_EXT*: GLenum = 0x8D51
  GL_RENDERBUFFER_BLUE_SIZE_EXT*: GLenum = 0x8D52
  GL_RENDERBUFFER_ALPHA_SIZE_EXT*: GLenum = 0x8D53
  GL_RENDERBUFFER_DEPTH_SIZE_EXT*: GLenum = 0x8D54
  GL_RENDERBUFFER_STENCIL_SIZE_EXT*: GLenum = 0x8D55
  GL_EXT_framebuffer_sRGB*: GLenum = 1
  GL_FRAMEBUFFER_SRGB_EXT*: GLenum = 0x8DB9
  GL_FRAMEBUFFER_SRGB_CAPABLE_EXT*: GLenum = 0x8DBA
  GL_EXT_geometry_point_size*: GLenum = 1
  GL_GEOMETRY_SHADER_BIT_EXT*: GLenum = 0x00000004
  GL_LINES_ADJACENCY_EXT*: GLenum = 0xA
  GL_LINE_STRIP_ADJACENCY_EXT*: GLenum = 0xB
  GL_TRIANGLES_ADJACENCY_EXT*: GLenum = 0xC
  GL_TRIANGLE_STRIP_ADJACENCY_EXT*: GLenum = 0xD
  GL_LAYER_PROVOKING_VERTEX_EXT*: GLenum = 0x825E
  GL_UNDEFINED_VERTEX_EXT*: GLenum = 0x8260
  GL_GEOMETRY_SHADER_INVOCATIONS_EXT*: GLenum = 0x887F
  GL_GEOMETRY_LINKED_VERTICES_OUT_EXT*: GLenum = 0x8916
  GL_GEOMETRY_LINKED_INPUT_TYPE_EXT*: GLenum = 0x8917
  GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT*: GLenum = 0x8918
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT*: GLenum = 0x8A2C
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT*: GLenum = 0x8A32
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT*: GLenum = 0x8C29
  GL_PRIMITIVES_GENERATED_EXT*: GLenum = 0x8C87
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT*: GLenum = 0x8DA7
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT*: GLenum = 0x8DA8
  GL_GEOMETRY_SHADER_EXT*: GLenum = 0x8DD9
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT*: GLenum = 0x8DDF
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT*: GLenum = 0x8DE0
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT*: GLenum = 0x8DE1
  GL_FIRST_VERTEX_CONVENTION_EXT*: GLenum = 0x8E4D
  GL_LAST_VERTEX_CONVENTION_EXT*: GLenum = 0x8E4E
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT*: GLenum = 0x8E5A
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT*: GLenum = 0x90CD
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT*: GLenum = 0x90D7
  GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT*: GLenum = 0x9123
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT*: GLenum = 0x9124
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT*: GLenum = 0x92CF
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT*: GLenum = 0x92D5
  GL_REFERENCED_BY_GEOMETRY_SHADER_EXT*: GLenum = 0x9309
  GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT*: GLenum = 0x9312
  GL_MAX_FRAMEBUFFER_LAYERS_EXT*: GLenum = 0x9317
  GL_EXT_geometry_shader*: GLenum = 1
  GL_EXT_geometry_shader4*: GLenum = 1
  GL_PROGRAM_POINT_SIZE_EXT*: GLenum = 0x8642
  GL_MAX_VARYING_COMPONENTS_EXT*: GLenum = 0x8B4B
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT*: GLenum = 0x8CD4
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT*: GLenum = 0x8DA9
  GL_GEOMETRY_VERTICES_OUT_EXT*: GLenum = 0x8DDA
  GL_GEOMETRY_INPUT_TYPE_EXT*: GLenum = 0x8DDB
  GL_GEOMETRY_OUTPUT_TYPE_EXT*: GLenum = 0x8DDC
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT*: GLenum = 0x8DDD
  GL_MAX_VERTEX_VARYING_COMPONENTS_EXT*: GLenum = 0x8DDE
  GL_EXT_gpu_program_parameters*: GLenum = 1
  GL_EXT_gpu_shader4*: GLenum = 1
  GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT*: GLenum = 0x88FD
  GL_SAMPLER_1D_ARRAY_EXT*: GLenum = 0x8DC0
  GL_SAMPLER_2D_ARRAY_EXT*: GLenum = 0x8DC1
  GL_SAMPLER_BUFFER_EXT*: GLenum = 0x8DC2
  GL_SAMPLER_1D_ARRAY_SHADOW_EXT*: GLenum = 0x8DC3
  GL_SAMPLER_2D_ARRAY_SHADOW_EXT*: GLenum = 0x8DC4
  GL_SAMPLER_CUBE_SHADOW_EXT*: GLenum = 0x8DC5
  GL_UNSIGNED_INT_VEC2_EXT*: GLenum = 0x8DC6
  GL_UNSIGNED_INT_VEC3_EXT*: GLenum = 0x8DC7
  GL_UNSIGNED_INT_VEC4_EXT*: GLenum = 0x8DC8
  GL_INT_SAMPLER_1D_EXT*: GLenum = 0x8DC9
  GL_INT_SAMPLER_2D_EXT*: GLenum = 0x8DCA
  GL_INT_SAMPLER_3D_EXT*: GLenum = 0x8DCB
  GL_INT_SAMPLER_CUBE_EXT*: GLenum = 0x8DCC
  GL_INT_SAMPLER_2D_RECT_EXT*: GLenum = 0x8DCD
  GL_INT_SAMPLER_1D_ARRAY_EXT*: GLenum = 0x8DCE
  GL_INT_SAMPLER_2D_ARRAY_EXT*: GLenum = 0x8DCF
  GL_INT_SAMPLER_BUFFER_EXT*: GLenum = 0x8DD0
  GL_UNSIGNED_INT_SAMPLER_1D_EXT*: GLenum = 0x8DD1
  GL_UNSIGNED_INT_SAMPLER_2D_EXT*: GLenum = 0x8DD2
  GL_UNSIGNED_INT_SAMPLER_3D_EXT*: GLenum = 0x8DD3
  GL_UNSIGNED_INT_SAMPLER_CUBE_EXT*: GLenum = 0x8DD4
  GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT*: GLenum = 0x8DD5
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT*: GLenum = 0x8DD6
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT*: GLenum = 0x8DD7
  GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT*: GLenum = 0x8DD8
  GL_EXT_gpu_shader5*: GLenum = 1
  GL_EXT_histogram*: GLenum = 1
  GL_HISTOGRAM_EXT*: GLenum = 0x8024
  GL_PROXY_HISTOGRAM_EXT*: GLenum = 0x8025
  GL_HISTOGRAM_WIDTH_EXT*: GLenum = 0x8026
  GL_HISTOGRAM_FORMAT_EXT*: GLenum = 0x8027
  GL_HISTOGRAM_RED_SIZE_EXT*: GLenum = 0x8028
  GL_HISTOGRAM_GREEN_SIZE_EXT*: GLenum = 0x8029
  GL_HISTOGRAM_BLUE_SIZE_EXT*: GLenum = 0x802A
  GL_HISTOGRAM_ALPHA_SIZE_EXT*: GLenum = 0x802B
  GL_HISTOGRAM_LUMINANCE_SIZE_EXT*: GLenum = 0x802C
  GL_HISTOGRAM_SINK_EXT*: GLenum = 0x802D
  GL_MINMAX_EXT*: GLenum = 0x802E
  GL_MINMAX_FORMAT_EXT*: GLenum = 0x802F
  GL_MINMAX_SINK_EXT*: GLenum = 0x8030
  GL_EXT_index_array_formats*: GLenum = 1
  GL_EXT_index_func*: GLenum = 1
  GL_EXT_index_material*: GLenum = 1
  GL_EXT_index_texture*: GLenum = 1
  GL_EXT_instanced_arrays*: GLenum = 1
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT*: GLenum = 0x88FE
  GL_EXT_light_texture*: GLenum = 1
  GL_FRAGMENT_MATERIAL_EXT*: GLenum = 0x8349
  GL_FRAGMENT_NORMAL_EXT*: GLenum = 0x834A
  GL_FRAGMENT_COLOR_EXT*: GLenum = 0x834C
  GL_ATTENUATION_EXT*: GLenum = 0x834D
  GL_SHADOW_ATTENUATION_EXT*: GLenum = 0x834E
  GL_TEXTURE_APPLICATION_MODE_EXT*: GLenum = 0x834F
  GL_TEXTURE_LIGHT_EXT*: GLenum = 0x8350
  GL_TEXTURE_MATERIAL_FACE_EXT*: GLenum = 0x8351
  GL_TEXTURE_MATERIAL_PARAMETER_EXT*: GLenum = 0x8352
  GL_EXT_map_buffer_range*: GLenum = 1
  GL_MAP_READ_BIT_EXT*: GLenum = 0x0001
  GL_MAP_WRITE_BIT_EXT*: GLenum = 0x0002
  GL_MAP_INVALIDATE_RANGE_BIT_EXT*: GLenum = 0x0004
  GL_MAP_INVALIDATE_BUFFER_BIT_EXT*: GLenum = 0x0008
  GL_MAP_FLUSH_EXPLICIT_BIT_EXT*: GLenum = 0x0010
  GL_MAP_UNSYNCHRONIZED_BIT_EXT*: GLenum = 0x0020
  GL_EXT_memory_object*: GLenum = 1
  GL_UUID_SIZE_EXT*: GLenum = 16
  GL_TEXTURE_TILING_EXT*: GLenum = 0x9580
  GL_DEDICATED_MEMORY_OBJECT_EXT*: GLenum = 0x9581
  GL_NUM_TILING_TYPES_EXT*: GLenum = 0x9582
  GL_TILING_TYPES_EXT*: GLenum = 0x9583
  GL_OPTIMAL_TILING_EXT*: GLenum = 0x9584
  GL_LINEAR_TILING_EXT*: GLenum = 0x9585
  GL_LAYOUT_GENERAL_EXT*: GLenum = 0x958D
  GL_LAYOUT_COLOR_ATTACHMENT_EXT*: GLenum = 0x958E
  GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT*: GLenum = 0x958F
  GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT*: GLenum = 0x9590
  GL_LAYOUT_SHADER_READ_ONLY_EXT*: GLenum = 0x9591
  GL_LAYOUT_TRANSFER_SRC_EXT*: GLenum = 0x9592
  GL_LAYOUT_TRANSFER_DST_EXT*: GLenum = 0x9593
  GL_NUM_DEVICE_UUIDS_EXT*: GLenum = 0x9596
  GL_DEVICE_UUID_EXT*: GLenum = 0x9597
  GL_DRIVER_UUID_EXT*: GLenum = 0x9598
  GL_PROTECTED_MEMORY_OBJECT_EXT*: GLenum = 0x959B
  GL_EXT_memory_object_fd*: GLenum = 1
  GL_HANDLE_TYPE_OPAQUE_FD_EXT*: GLenum = 0x9586
  GL_EXT_memory_object_win32*: GLenum = 1
  GL_LUID_SIZE_EXT*: GLenum = 8
  GL_HANDLE_TYPE_OPAQUE_WIN32_EXT*: GLenum = 0x9587
  GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT*: GLenum = 0x9588
  GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT*: GLenum = 0x9589
  GL_HANDLE_TYPE_D3D12_RESOURCE_EXT*: GLenum = 0x958A
  GL_HANDLE_TYPE_D3D11_IMAGE_EXT*: GLenum = 0x958B
  GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT*: GLenum = 0x958C
  GL_HANDLE_TYPE_D3D12_FENCE_EXT*: GLenum = 0x9594
  GL_D3D12_FENCE_VALUE_EXT*: GLenum = 0x9595
  GL_DEVICE_LUID_EXT*: GLenum = 0x9599
  GL_DEVICE_NODE_MASK_EXT*: GLenum = 0x959A
  GL_EXT_misc_attribute*: GLenum = 1
  GL_EXT_multi_draw_arrays*: GLenum = 1
  GL_EXT_multi_draw_indirect*: GLenum = 1
  GL_EXT_multiple_textures*: GLenum = 1
  GL_EXT_multisample*: GLenum = 1
  GL_MULTISAMPLE_EXT*: GLenum = 0x809D
  GL_SAMPLE_ALPHA_TO_MASK_EXT*: GLenum = 0x809E
  GL_SAMPLE_ALPHA_TO_ONE_EXT*: GLenum = 0x809F
  GL_SAMPLE_MASK_EXT*: GLenum = 0x80A0
  GL_1PASS_EXT*: GLenum = 0x80A1
  GL_2PASS_0_EXT*: GLenum = 0x80A2
  GL_2PASS_1_EXT*: GLenum = 0x80A3
  GL_4PASS_0_EXT*: GLenum = 0x80A4
  GL_4PASS_1_EXT*: GLenum = 0x80A5
  GL_4PASS_2_EXT*: GLenum = 0x80A6
  GL_4PASS_3_EXT*: GLenum = 0x80A7
  GL_SAMPLE_BUFFERS_EXT*: GLenum = 0x80A8
  GL_SAMPLES_EXT*: GLenum = 0x80A9
  GL_SAMPLE_MASK_VALUE_EXT*: GLenum = 0x80AA
  GL_SAMPLE_MASK_INVERT_EXT*: GLenum = 0x80AB
  GL_SAMPLE_PATTERN_EXT*: GLenum = 0x80AC
  GL_MULTISAMPLE_BIT_EXT*: GLenum64 = 0x20000000u
  GL_EXT_multisample_compatibility*: GLenum = 1
  GL_EXT_multisampled_render_to_texture*: GLenum = 1
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT*: GLenum = 0x8D6C
  GL_EXT_multisampled_render_to_texture2*: GLenum = 1
  GL_EXT_multiview_draw_buffers*: GLenum = 1
  GL_DRAW_BUFFER_EXT*: GLenum = 0x0C01
  GL_READ_BUFFER_EXT*: GLenum = 0x0C02
  GL_COLOR_ATTACHMENT_EXT*: GLenum = 0x90F0
  GL_MULTIVIEW_EXT*: GLenum = 0x90F1
  GL_MAX_MULTIVIEW_BUFFERS_EXT*: GLenum = 0x90F2
  GL_EXT_packed_depth_stencil*: GLenum = 1
  GL_DEPTH_STENCIL_EXT*: GLenum = 0x84F9
  GL_UNSIGNED_INT_24_8_EXT*: GLenum = 0x84FA
  GL_DEPTH24_STENCIL8_EXT*: GLenum = 0x88F0
  GL_TEXTURE_STENCIL_SIZE_EXT*: GLenum = 0x88F1
  GL_EXT_packed_float*: GLenum = 1
  GL_R11F_G11F_B10F_EXT*: GLenum = 0x8C3A
  GL_UNSIGNED_INT_10F_11F_11F_REV_EXT*: GLenum = 0x8C3B
  GL_RGBA_SIGNED_COMPONENTS_EXT*: GLenum = 0x8C3C
  GL_EXT_packed_pixels*: GLenum = 1
  GL_UNSIGNED_BYTE_3_3_2_EXT*: GLenum = 0x8032
  GL_UNSIGNED_SHORT_4_4_4_4_EXT*: GLenum = 0x8033
  GL_UNSIGNED_SHORT_5_5_5_1_EXT*: GLenum = 0x8034
  GL_UNSIGNED_INT_8_8_8_8_EXT*: GLenum = 0x8035
  GL_UNSIGNED_INT_10_10_10_2_EXT*: GLenum = 0x8036
  GL_EXT_paletted_texture*: GLenum = 1
  GL_COLOR_TABLE_FORMAT_EXT*: GLenum = 0x80D8
  GL_COLOR_TABLE_WIDTH_EXT*: GLenum = 0x80D9
  GL_COLOR_TABLE_RED_SIZE_EXT*: GLenum = 0x80DA
  GL_COLOR_TABLE_GREEN_SIZE_EXT*: GLenum = 0x80DB
  GL_COLOR_TABLE_BLUE_SIZE_EXT*: GLenum = 0x80DC
  GL_COLOR_TABLE_ALPHA_SIZE_EXT*: GLenum = 0x80DD
  GL_COLOR_TABLE_LUMINANCE_SIZE_EXT*: GLenum = 0x80DE
  GL_COLOR_TABLE_INTENSITY_SIZE_EXT*: GLenum = 0x80DF
  GL_TEXTURE_INDEX_SIZE_EXT*: GLenum = 0x80ED
  GL_EXT_pixel_buffer_object*: GLenum = 1
  GL_PIXEL_PACK_BUFFER_EXT*: GLenum = 0x88EB
  GL_PIXEL_UNPACK_BUFFER_EXT*: GLenum = 0x88EC
  GL_PIXEL_PACK_BUFFER_BINDING_EXT*: GLenum = 0x88ED
  GL_PIXEL_UNPACK_BUFFER_BINDING_EXT*: GLenum = 0x88EF
  GL_EXT_pixel_transform*: GLenum = 1
  GL_PIXEL_TRANSFORM_2D_EXT*: GLenum = 0x8330
  GL_PIXEL_MAG_FILTER_EXT*: GLenum = 0x8331
  GL_PIXEL_MIN_FILTER_EXT*: GLenum = 0x8332
  GL_PIXEL_CUBIC_WEIGHT_EXT*: GLenum = 0x8333
  GL_CUBIC_EXT*: GLenum = 0x8334
  GL_AVERAGE_EXT*: GLenum = 0x8335
  GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT*: GLenum = 0x8336
  GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT*: GLenum = 0x8337
  GL_PIXEL_TRANSFORM_2D_MATRIX_EXT*: GLenum = 0x8338
  GL_EXT_pixel_transform_color_table*: GLenum = 1
  GL_EXT_point_parameters*: GLenum = 1
  GL_POINT_SIZE_MIN_EXT*: GLenum = 0x8126
  GL_POINT_SIZE_MAX_EXT*: GLenum = 0x8127
  GL_POINT_FADE_THRESHOLD_SIZE_EXT*: GLenum = 0x8128
  GL_DISTANCE_ATTENUATION_EXT*: GLenum = 0x8129
  GL_EXT_polygon_offset*: GLenum = 1
  GL_POLYGON_OFFSET_EXT*: GLenum = 0x8037
  GL_POLYGON_OFFSET_FACTOR_EXT*: GLenum = 0x8038
  GL_POLYGON_OFFSET_BIAS_EXT*: GLenum = 0x8039
  GL_EXT_polygon_offset_clamp*: GLenum = 1
  GL_POLYGON_OFFSET_CLAMP_EXT*: GLenum = 0x8E1B
  GL_EXT_post_depth_coverage*: GLenum = 1
  GL_EXT_provoking_vertex*: GLenum = 1
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT*: GLenum = 0x8E4C
  GL_PROVOKING_VERTEX_EXT*: GLenum = 0x8E4F
  GL_EXT_pvrtc_sRGB*: GLenum = 1
  GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT*: GLenum = 0x8A54
  GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT*: GLenum = 0x8A55
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT*: GLenum = 0x8A56
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT*: GLenum = 0x8A57
  GL_EXT_raster_multisample*: GLenum = 1
  GL_COLOR_SAMPLES_NV*: GLenum = 0x8E20
  GL_RASTER_MULTISAMPLE_EXT*: GLenum = 0x9327
  GL_RASTER_SAMPLES_EXT*: GLenum = 0x9328
  GL_MAX_RASTER_SAMPLES_EXT*: GLenum = 0x9329
  GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT*: GLenum = 0x932A
  GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT*: GLenum = 0x932B
  GL_EFFECTIVE_RASTER_SAMPLES_EXT*: GLenum = 0x932C
  GL_DEPTH_SAMPLES_NV*: GLenum = 0x932D
  GL_STENCIL_SAMPLES_NV*: GLenum = 0x932E
  GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV*: GLenum = 0x932F
  GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV*: GLenum = 0x9330
  GL_COVERAGE_MODULATION_TABLE_NV*: GLenum = 0x9331
  GL_COVERAGE_MODULATION_NV*: GLenum = 0x9332
  GL_COVERAGE_MODULATION_TABLE_SIZE_NV*: GLenum = 0x9333
  GL_EXT_read_format_bgra*: GLenum = 1
  GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT*: GLenum = 0x8365
  GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT*: GLenum = 0x8366
  GL_EXT_render_snorm*: GLenum = 1
  GL_R16_SNORM_EXT*: GLenum = 0x8F98
  GL_RG16_SNORM_EXT*: GLenum = 0x8F99
  GL_RGBA16_SNORM_EXT*: GLenum = 0x8F9B
  GL_EXT_rescale_normal*: GLenum = 1
  GL_RESCALE_NORMAL_EXT*: GLenum = 0x803A
  GL_EXT_sRGB*: GLenum = 1
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT*: GLenum = 0x8210
  GL_SRGB_EXT*: GLenum = 0x8C40
  GL_SRGB_ALPHA_EXT*: GLenum = 0x8C42
  GL_SRGB8_ALPHA8_EXT*: GLenum = 0x8C43
  GL_EXT_sRGB_write_control*: GLenum = 1
  GL_EXT_scene_marker*: GLenum = 1
  GL_EXT_secondary_color*: GLenum = 1
  GL_COLOR_SUM_EXT*: GLenum = 0x8458
  GL_CURRENT_SECONDARY_COLOR_EXT*: GLenum = 0x8459
  GL_SECONDARY_COLOR_ARRAY_SIZE_EXT*: GLenum = 0x845A
  GL_SECONDARY_COLOR_ARRAY_TYPE_EXT*: GLenum = 0x845B
  GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT*: GLenum = 0x845C
  GL_SECONDARY_COLOR_ARRAY_POINTER_EXT*: GLenum = 0x845D
  GL_SECONDARY_COLOR_ARRAY_EXT*: GLenum = 0x845E
  GL_EXT_semaphore*: GLenum = 1
  GL_EXT_semaphore_fd*: GLenum = 1
  GL_EXT_semaphore_win32*: GLenum = 1
  GL_EXT_separate_shader_objects*: GLenum = 1
  GL_ACTIVE_PROGRAM_EXT*: GLenum = 0x8B8D
  GL_EXT_separate_specular_color*: GLenum = 1
  GL_LIGHT_MODEL_COLOR_CONTROL_EXT*: GLenum = 0x81F8
  GL_SINGLE_COLOR_EXT*: GLenum = 0x81F9
  GL_SEPARATE_SPECULAR_COLOR_EXT*: GLenum = 0x81FA
  GL_EXT_shader_framebuffer_fetch*: GLenum = 1
  GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT*: GLenum = 0x8A52
  GL_EXT_shader_group_vote*: GLenum = 1
  GL_EXT_shader_image_load_formatted*: GLenum = 1
  GL_EXT_shader_image_load_store*: GLenum = 1
  GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT*: GLenum = 0x00000001
  GL_ELEMENT_ARRAY_BARRIER_BIT_EXT*: GLenum = 0x00000002
  GL_UNIFORM_BARRIER_BIT_EXT*: GLenum = 0x00000004
  GL_TEXTURE_FETCH_BARRIER_BIT_EXT*: GLenum = 0x00000008
  GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT*: GLenum = 0x00000020
  GL_COMMAND_BARRIER_BIT_EXT*: GLenum = 0x00000040
  GL_PIXEL_BUFFER_BARRIER_BIT_EXT*: GLenum = 0x00000080
  GL_TEXTURE_UPDATE_BARRIER_BIT_EXT*: GLenum = 0x00000100
  GL_BUFFER_UPDATE_BARRIER_BIT_EXT*: GLenum = 0x00000200
  GL_FRAMEBUFFER_BARRIER_BIT_EXT*: GLenum = 0x00000400
  GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT*: GLenum = 0x00000800
  GL_ATOMIC_COUNTER_BARRIER_BIT_EXT*: GLenum = 0x00001000
  GL_MAX_IMAGE_UNITS_EXT*: GLenum = 0x8F38
  GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT*: GLenum = 0x8F39
  GL_IMAGE_BINDING_NAME_EXT*: GLenum = 0x8F3A
  GL_IMAGE_BINDING_LEVEL_EXT*: GLenum = 0x8F3B
  GL_IMAGE_BINDING_LAYERED_EXT*: GLenum = 0x8F3C
  GL_IMAGE_BINDING_LAYER_EXT*: GLenum = 0x8F3D
  GL_IMAGE_BINDING_ACCESS_EXT*: GLenum = 0x8F3E
  GL_IMAGE_1D_EXT*: GLenum = 0x904C
  GL_IMAGE_2D_EXT*: GLenum = 0x904D
  GL_IMAGE_3D_EXT*: GLenum = 0x904E
  GL_IMAGE_2D_RECT_EXT*: GLenum = 0x904F
  GL_IMAGE_CUBE_EXT*: GLenum = 0x9050
  GL_IMAGE_BUFFER_EXT*: GLenum = 0x9051
  GL_IMAGE_1D_ARRAY_EXT*: GLenum = 0x9052
  GL_IMAGE_2D_ARRAY_EXT*: GLenum = 0x9053
  GL_IMAGE_CUBE_MAP_ARRAY_EXT*: GLenum = 0x9054
  GL_IMAGE_2D_MULTISAMPLE_EXT*: GLenum = 0x9055
  GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT*: GLenum = 0x9056
  GL_INT_IMAGE_1D_EXT*: GLenum = 0x9057
  GL_INT_IMAGE_2D_EXT*: GLenum = 0x9058
  GL_INT_IMAGE_3D_EXT*: GLenum = 0x9059
  GL_INT_IMAGE_2D_RECT_EXT*: GLenum = 0x905A
  GL_INT_IMAGE_CUBE_EXT*: GLenum = 0x905B
  GL_INT_IMAGE_BUFFER_EXT*: GLenum = 0x905C
  GL_INT_IMAGE_1D_ARRAY_EXT*: GLenum = 0x905D
  GL_INT_IMAGE_2D_ARRAY_EXT*: GLenum = 0x905E
  GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT*: GLenum = 0x905F
  GL_INT_IMAGE_2D_MULTISAMPLE_EXT*: GLenum = 0x9060
  GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT*: GLenum = 0x9061
  GL_UNSIGNED_INT_IMAGE_1D_EXT*: GLenum = 0x9062
  GL_UNSIGNED_INT_IMAGE_2D_EXT*: GLenum = 0x9063
  GL_UNSIGNED_INT_IMAGE_3D_EXT*: GLenum = 0x9064
  GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT*: GLenum = 0x9065
  GL_UNSIGNED_INT_IMAGE_CUBE_EXT*: GLenum = 0x9066
  GL_UNSIGNED_INT_IMAGE_BUFFER_EXT*: GLenum = 0x9067
  GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT*: GLenum = 0x9068
  GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT*: GLenum = 0x9069
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT*: GLenum = 0x906A
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT*: GLenum = 0x906B
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT*: GLenum = 0x906C
  GL_MAX_IMAGE_SAMPLES_EXT*: GLenum = 0x906D
  GL_IMAGE_BINDING_FORMAT_EXT*: GLenum = 0x906E
  GL_ALL_BARRIER_BITS_EXT*: GLenum64 = 0xFFFFFFFFu
  GL_EXT_shader_implicit_conversions*: GLenum = 1
  GL_EXT_shader_integer_mix*: GLenum = 1
  GL_EXT_shader_io_blocks*: GLenum = 1
  GL_EXT_shader_non_ant_global_initializers*: GLenum = 1
  GL_EXT_shader_pixel_local_storage*: GLenum = 1
  GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT*: GLenum = 0x8F63
  GL_SHADER_PIXEL_LOCAL_STORAGE_EXT*: GLenum = 0x8F64
  GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT*: GLenum = 0x8F67
  GL_EXT_shader_pixel_local_storage2*: GLenum = 1
  GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT*: GLenum = 0x9650
  GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT*: GLenum = 0x9651
  GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT*: GLenum = 0x9652
  GL_EXT_shader_texture_lod*: GLenum = 1
  GL_EXT_shadow_funcs*: GLenum = 1
  GL_EXT_shadow_samplers*: GLenum = 1
  GL_TEXTURE_COMPARE_MODE_EXT*: GLenum = 0x884C
  GL_TEXTURE_COMPARE_FUNC_EXT*: GLenum = 0x884D
  GL_COMPARE_REF_TO_TEXTURE_EXT*: GLenum = 0x884E
  GL_SAMPLER_2D_SHADOW_EXT*: GLenum = 0x8B62
  GL_EXT_shared_texture_palette*: GLenum = 1
  GL_SHARED_TEXTURE_PALETTE_EXT*: GLenum = 0x81FB
  GL_EXT_sparse_texture*: GLenum = 1
  GL_TEXTURE_CUBE_MAP_ARRAY_OES*: GLenum = 0x9009
  GL_VIRTUAL_PAGE_SIZE_X_EXT*: GLenum = 0x9195
  GL_VIRTUAL_PAGE_SIZE_Y_EXT*: GLenum = 0x9196
  GL_VIRTUAL_PAGE_SIZE_Z_EXT*: GLenum = 0x9197
  GL_MAX_SPARSE_TEXTURE_SIZE_EXT*: GLenum = 0x9198
  GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT*: GLenum = 0x9199
  GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT*: GLenum = 0x919A
  GL_TEXTURE_SPARSE_EXT*: GLenum = 0x91A6
  GL_VIRTUAL_PAGE_SIZE_INDEX_EXT*: GLenum = 0x91A7
  GL_NUM_VIRTUAL_PAGE_SIZES_EXT*: GLenum = 0x91A8
  GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT*: GLenum = 0x91A9
  GL_NUM_SPARSE_LEVELS_EXT*: GLenum = 0x91AA
  GL_EXT_sparse_texture2*: GLenum = 1
  GL_EXT_stencil_clear_tag*: GLenum = 1
  GL_STENCIL_TAG_BITS_EXT*: GLenum = 0x88F2
  GL_STENCIL_CLEAR_TAG_VALUE_EXT*: GLenum = 0x88F3
  GL_EXT_stencil_two_side*: GLenum = 1
  GL_STENCIL_TEST_TWO_SIDE_EXT*: GLenum = 0x8910
  GL_ACTIVE_STENCIL_FACE_EXT*: GLenum = 0x8911
  GL_EXT_stencil_wrap*: GLenum = 1
  GL_INCR_WRAP_EXT*: GLenum = 0x8507
  GL_DECR_WRAP_EXT*: GLenum = 0x8508
  GL_EXT_subtexture*: GLenum = 1
  GL_EXT_texture*: GLenum = 1
  GL_ALPHA4_EXT*: GLenum = 0x803B
  GL_ALPHA8_EXT*: GLenum = 0x803C
  GL_ALPHA12_EXT*: GLenum = 0x803D
  GL_ALPHA16_EXT*: GLenum = 0x803E
  GL_LUMINANCE4_EXT*: GLenum = 0x803F
  GL_LUMINANCE8_EXT*: GLenum = 0x8040
  GL_LUMINANCE12_EXT*: GLenum = 0x8041
  GL_LUMINANCE16_EXT*: GLenum = 0x8042
  GL_LUMINANCE4_ALPHA4_EXT*: GLenum = 0x8043
  GL_LUMINANCE6_ALPHA2_EXT*: GLenum = 0x8044
  GL_LUMINANCE8_ALPHA8_EXT*: GLenum = 0x8045
  GL_LUMINANCE12_ALPHA4_EXT*: GLenum = 0x8046
  GL_LUMINANCE12_ALPHA12_EXT*: GLenum = 0x8047
  GL_LUMINANCE16_ALPHA16_EXT*: GLenum = 0x8048
  GL_INTENSITY_EXT*: GLenum = 0x8049
  GL_INTENSITY4_EXT*: GLenum = 0x804A
  GL_INTENSITY8_EXT*: GLenum = 0x804B
  GL_INTENSITY12_EXT*: GLenum = 0x804C
  GL_INTENSITY16_EXT*: GLenum = 0x804D
  GL_RGB2_EXT*: GLenum = 0x804E
  GL_RGB4_EXT*: GLenum = 0x804F
  GL_RGB5_EXT*: GLenum = 0x8050
  GL_RGB8_EXT*: GLenum = 0x8051
  GL_RGB10_EXT*: GLenum = 0x8052
  GL_RGB12_EXT*: GLenum = 0x8053
  GL_RGB16_EXT*: GLenum = 0x8054
  GL_RGBA2_EXT*: GLenum = 0x8055
  GL_RGBA4_EXT*: GLenum = 0x8056
  GL_RGB5_A1_EXT*: GLenum = 0x8057
  GL_RGBA8_EXT*: GLenum = 0x8058
  GL_RGB10_A2_EXT*: GLenum = 0x8059
  GL_RGBA12_EXT*: GLenum = 0x805A
  GL_RGBA16_EXT*: GLenum = 0x805B
  GL_TEXTURE_RED_SIZE_EXT*: GLenum = 0x805C
  GL_TEXTURE_GREEN_SIZE_EXT*: GLenum = 0x805D
  GL_TEXTURE_BLUE_SIZE_EXT*: GLenum = 0x805E
  GL_TEXTURE_ALPHA_SIZE_EXT*: GLenum = 0x805F
  GL_TEXTURE_LUMINANCE_SIZE_EXT*: GLenum = 0x8060
  GL_TEXTURE_INTENSITY_SIZE_EXT*: GLenum = 0x8061
  GL_REPLACE_EXT*: GLenum = 0x8062
  GL_PROXY_TEXTURE_1D_EXT*: GLenum = 0x8063
  GL_PROXY_TEXTURE_2D_EXT*: GLenum = 0x8064
  GL_EXT_texture3D*: GLenum = 1
  GL_PACK_SKIP_IMAGES_EXT*: GLenum = 0x806B
  GL_PACK_IMAGE_HEIGHT_EXT*: GLenum = 0x806C
  GL_UNPACK_SKIP_IMAGES_EXT*: GLenum = 0x806D
  GL_UNPACK_IMAGE_HEIGHT_EXT*: GLenum = 0x806E
  GL_TEXTURE_3D_EXT*: GLenum = 0x806F
  GL_PROXY_TEXTURE_3D_EXT*: GLenum = 0x8070
  GL_TEXTURE_DEPTH_EXT*: GLenum = 0x8071
  GL_TEXTURE_WRAP_R_EXT*: GLenum = 0x8072
  GL_MAX_3D_TEXTURE_SIZE_EXT*: GLenum = 0x8073
  GL_EXT_texture_array*: GLenum = 1
  GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT*: GLenum = 0x884E
  GL_MAX_ARRAY_TEXTURE_LAYERS_EXT*: GLenum = 0x88FF
  GL_TEXTURE_1D_ARRAY_EXT*: GLenum = 0x8C18
  GL_PROXY_TEXTURE_1D_ARRAY_EXT*: GLenum = 0x8C19
  GL_TEXTURE_2D_ARRAY_EXT*: GLenum = 0x8C1A
  GL_PROXY_TEXTURE_2D_ARRAY_EXT*: GLenum = 0x8C1B
  GL_TEXTURE_BINDING_1D_ARRAY_EXT*: GLenum = 0x8C1C
  GL_TEXTURE_BINDING_2D_ARRAY_EXT*: GLenum = 0x8C1D
  GL_EXT_texture_buffer_object*: GLenum = 1
  GL_TEXTURE_BUFFER_EXT*: GLenum = 0x8C2A
  GL_MAX_TEXTURE_BUFFER_SIZE_EXT*: GLenum = 0x8C2B
  GL_TEXTURE_BINDING_BUFFER_EXT*: GLenum = 0x8C2C
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT*: GLenum = 0x8C2D
  GL_TEXTURE_BUFFER_FORMAT_EXT*: GLenum = 0x8C2E
  GL_EXT_texture_compression_astc_decode_mode*: GLenum = 1
  GL_TEXTURE_ASTC_DECODE_PRECISION_EXT*: GLenum = 0x8F69
  GL_EXT_texture_compression_astc_decode_mode_rgb9e5*: GLenum = 1
  GL_EXT_texture_compression_bptc*: GLenum = 1
  GL_COMPRESSED_RGBA_BPTC_UNORM_EXT*: GLenum = 0x8E8C
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT*: GLenum = 0x8E8D
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT*: GLenum = 0x8E8E
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT*: GLenum = 0x8E8F
  GL_EXT_texture_compression_dxt1*: GLenum = 1
  GL_EXT_texture_compression_latc*: GLenum = 1
  GL_COMPRESSED_LUMINANCE_LATC1_EXT*: GLenum = 0x8C70
  GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT*: GLenum = 0x8C71
  GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT*: GLenum = 0x8C72
  GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT*: GLenum = 0x8C73
  GL_EXT_texture_compression_rgtc*: GLenum = 1
  GL_COMPRESSED_RED_RGTC1_EXT*: GLenum = 0x8DBB
  GL_COMPRESSED_SIGNED_RED_RGTC1_EXT*: GLenum = 0x8DBC
  GL_COMPRESSED_RED_GREEN_RGTC2_EXT*: GLenum = 0x8DBD
  GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT*: GLenum = 0x8DBE
  GL_EXT_texture_compression_s3tc*: GLenum = 1
  GL_COMPRESSED_RGB_S3TC_DXT1_EXT*: GLenum = 0x83F0
  GL_COMPRESSED_RGBA_S3TC_DXT1_EXT*: GLenum = 0x83F1
  GL_COMPRESSED_RGBA_S3TC_DXT3_EXT*: GLenum = 0x83F2
  GL_COMPRESSED_RGBA_S3TC_DXT5_EXT*: GLenum = 0x83F3
  GL_EXT_texture_cube_map*: GLenum = 1
  GL_NORMAL_MAP_EXT*: GLenum = 0x8511
  GL_REFLECTION_MAP_EXT*: GLenum = 0x8512
  GL_TEXTURE_CUBE_MAP_EXT*: GLenum = 0x8513
  GL_TEXTURE_BINDING_CUBE_MAP_EXT*: GLenum = 0x8514
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT*: GLenum = 0x8515
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT*: GLenum = 0x8516
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT*: GLenum = 0x8517
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT*: GLenum = 0x8518
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT*: GLenum = 0x8519
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT*: GLenum = 0x851A
  GL_PROXY_TEXTURE_CUBE_MAP_EXT*: GLenum = 0x851B
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT*: GLenum = 0x851C
  GL_EXT_texture_cube_map_array*: GLenum = 1
  GL_TEXTURE_CUBE_MAP_ARRAY_EXT*: GLenum = 0x9009
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT*: GLenum = 0x900A
  GL_SAMPLER_CUBE_MAP_ARRAY_EXT*: GLenum = 0x900C
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT*: GLenum = 0x900D
  GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT*: GLenum = 0x900E
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT*: GLenum = 0x900F
  GL_EXT_texture_edge_clamp*: GLenum = 1
  GL_CLAMP_TO_EDGE_EXT*: GLenum = 0x812F
  GL_EXT_texture_env*: GLenum = 1
  GL_EXT_texture_env_add*: GLenum = 1
  GL_EXT_texture_env_combine*: GLenum = 1
  GL_COMBINE_EXT*: GLenum = 0x8570
  GL_COMBINE_RGB_EXT*: GLenum = 0x8571
  GL_COMBINE_ALPHA_EXT*: GLenum = 0x8572
  GL_RGB_SCALE_EXT*: GLenum = 0x8573
  GL_ADD_SIGNED_EXT*: GLenum = 0x8574
  GL_INTERPOLATE_EXT*: GLenum = 0x8575
  GL_CONSTANT_EXT*: GLenum = 0x8576
  GL_PRIMARY_COLOR_EXT*: GLenum = 0x8577
  GL_PREVIOUS_EXT*: GLenum = 0x8578
  GL_SOURCE0_RGB_EXT*: GLenum = 0x8580
  GL_SOURCE1_RGB_EXT*: GLenum = 0x8581
  GL_SOURCE2_RGB_EXT*: GLenum = 0x8582
  GL_SOURCE0_ALPHA_EXT*: GLenum = 0x8588
  GL_SOURCE1_ALPHA_EXT*: GLenum = 0x8589
  GL_SOURCE2_ALPHA_EXT*: GLenum = 0x858A
  GL_OPERAND0_RGB_EXT*: GLenum = 0x8590
  GL_OPERAND1_RGB_EXT*: GLenum = 0x8591
  GL_OPERAND2_RGB_EXT*: GLenum = 0x8592
  GL_OPERAND0_ALPHA_EXT*: GLenum = 0x8598
  GL_OPERAND1_ALPHA_EXT*: GLenum = 0x8599
  GL_OPERAND2_ALPHA_EXT*: GLenum = 0x859A
  GL_EXT_texture_env_dot3*: GLenum = 1
  GL_DOT3_RGB_EXT*: GLenum = 0x8740
  GL_DOT3_RGBA_EXT*: GLenum = 0x8741
  GL_EXT_texture_filter_anisotropic*: GLenum = 1
  GL_TEXTURE_MAX_ANISOTROPY_EXT*: GLenum = 0x84FE
  GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT*: GLenum = 0x84FF
  GL_EXT_texture_filter_minmax*: GLenum = 1
  GL_TEXTURE_REDUCTION_MODE_EXT*: GLenum = 0x9366
  GL_WEIGHTED_AVERAGE_EXT*: GLenum = 0x9367
  GL_EXT_texture_format_BGRA8888*: GLenum = 1
  GL_EXT_texture_integer*: GLenum = 1
  GL_RGBA32UI_EXT*: GLenum = 0x8D70
  GL_RGB32UI_EXT*: GLenum = 0x8D71
  GL_ALPHA32UI_EXT*: GLenum = 0x8D72
  GL_INTENSITY32UI_EXT*: GLenum = 0x8D73
  GL_LUMINANCE32UI_EXT*: GLenum = 0x8D74
  GL_LUMINANCE_ALPHA32UI_EXT*: GLenum = 0x8D75
  GL_RGBA16UI_EXT*: GLenum = 0x8D76
  GL_RGB16UI_EXT*: GLenum = 0x8D77
  GL_ALPHA16UI_EXT*: GLenum = 0x8D78
  GL_INTENSITY16UI_EXT*: GLenum = 0x8D79
  GL_LUMINANCE16UI_EXT*: GLenum = 0x8D7A
  GL_LUMINANCE_ALPHA16UI_EXT*: GLenum = 0x8D7B
  GL_RGBA8UI_EXT*: GLenum = 0x8D7C
  GL_RGB8UI_EXT*: GLenum = 0x8D7D
  GL_ALPHA8UI_EXT*: GLenum = 0x8D7E
  GL_INTENSITY8UI_EXT*: GLenum = 0x8D7F
  GL_LUMINANCE8UI_EXT*: GLenum = 0x8D80
  GL_LUMINANCE_ALPHA8UI_EXT*: GLenum = 0x8D81
  GL_RGBA32I_EXT*: GLenum = 0x8D82
  GL_RGB32I_EXT*: GLenum = 0x8D83
  GL_ALPHA32I_EXT*: GLenum = 0x8D84
  GL_INTENSITY32I_EXT*: GLenum = 0x8D85
  GL_LUMINANCE32I_EXT*: GLenum = 0x8D86
  GL_LUMINANCE_ALPHA32I_EXT*: GLenum = 0x8D87
  GL_RGBA16I_EXT*: GLenum = 0x8D88
  GL_RGB16I_EXT*: GLenum = 0x8D89
  GL_ALPHA16I_EXT*: GLenum = 0x8D8A
  GL_INTENSITY16I_EXT*: GLenum = 0x8D8B
  GL_LUMINANCE16I_EXT*: GLenum = 0x8D8C
  GL_LUMINANCE_ALPHA16I_EXT*: GLenum = 0x8D8D
  GL_RGBA8I_EXT*: GLenum = 0x8D8E
  GL_RGB8I_EXT*: GLenum = 0x8D8F
  GL_ALPHA8I_EXT*: GLenum = 0x8D90
  GL_INTENSITY8I_EXT*: GLenum = 0x8D91
  GL_LUMINANCE8I_EXT*: GLenum = 0x8D92
  GL_LUMINANCE_ALPHA8I_EXT*: GLenum = 0x8D93
  GL_RED_INTEGER_EXT*: GLenum = 0x8D94
  GL_GREEN_INTEGER_EXT*: GLenum = 0x8D95
  GL_BLUE_INTEGER_EXT*: GLenum = 0x8D96
  GL_ALPHA_INTEGER_EXT*: GLenum = 0x8D97
  GL_RGB_INTEGER_EXT*: GLenum = 0x8D98
  GL_RGBA_INTEGER_EXT*: GLenum = 0x8D99
  GL_BGR_INTEGER_EXT*: GLenum = 0x8D9A
  GL_BGRA_INTEGER_EXT*: GLenum = 0x8D9B
  GL_LUMINANCE_INTEGER_EXT*: GLenum = 0x8D9C
  GL_LUMINANCE_ALPHA_INTEGER_EXT*: GLenum = 0x8D9D
  GL_RGBA_INTEGER_MODE_EXT*: GLenum = 0x8D9E
  GL_EXT_texture_lod_bias*: GLenum = 1
  GL_MAX_TEXTURE_LOD_BIAS_EXT*: GLenum = 0x84FD
  GL_TEXTURE_FILTER_CONTROL_EXT*: GLenum = 0x8500
  GL_TEXTURE_LOD_BIAS_EXT*: GLenum = 0x8501
  GL_EXT_texture_mirror_clamp*: GLenum = 1
  GL_MIRROR_CLAMP_EXT*: GLenum = 0x8742
  GL_MIRROR_CLAMP_TO_EDGE_EXT*: GLenum = 0x8743
  GL_MIRROR_CLAMP_TO_BORDER_EXT*: GLenum = 0x8912
  GL_EXT_texture_norm16*: GLenum = 1
  GL_R16_EXT*: GLenum = 0x822A
  GL_RG16_EXT*: GLenum = 0x822C
  GL_RGB16_SNORM_EXT*: GLenum = 0x8F9A
  GL_EXT_texture_object*: GLenum = 1
  GL_TEXTURE_PRIORITY_EXT*: GLenum = 0x8066
  GL_TEXTURE_RESIDENT_EXT*: GLenum = 0x8067
  GL_TEXTURE_1D_BINDING_EXT*: GLenum = 0x8068
  GL_TEXTURE_2D_BINDING_EXT*: GLenum = 0x8069
  GL_TEXTURE_3D_BINDING_EXT*: GLenum = 0x806A
  GL_EXT_texture_perturb_normal*: GLenum = 1
  GL_PERTURB_EXT*: GLenum = 0x85AE
  GL_TEXTURE_NORMAL_EXT*: GLenum = 0x85AF
  GL_EXT_texture_rectangle*: GLenum = 1
  GL_TEXTURE_RECTANGLE_EXT*: GLenum = 0x84F5
  GL_TEXTURE_BINDING_RECTANGLE_EXT*: GLenum = 0x84F6
  GL_PROXY_TEXTURE_RECTANGLE_EXT*: GLenum = 0x84F7
  GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT*: GLenum = 0x84F8
  GL_EXT_texture_rg*: GLenum = 1
  GL_RED_EXT*: GLenum = 0x1903
  GL_RG_EXT*: GLenum = 0x8227
  GL_R8_EXT*: GLenum = 0x8229
  GL_RG8_EXT*: GLenum = 0x822B
  GL_EXT_texture_sRGB*: GLenum = 1
  GL_SRGB8_EXT*: GLenum = 0x8C41
  GL_SLUMINANCE_ALPHA_EXT*: GLenum = 0x8C44
  GL_SLUMINANCE8_ALPHA8_EXT*: GLenum = 0x8C45
  GL_SLUMINANCE_EXT*: GLenum = 0x8C46
  GL_SLUMINANCE8_EXT*: GLenum = 0x8C47
  GL_COMPRESSED_SRGB_EXT*: GLenum = 0x8C48
  GL_COMPRESSED_SRGB_ALPHA_EXT*: GLenum = 0x8C49
  GL_COMPRESSED_SLUMINANCE_EXT*: GLenum = 0x8C4A
  GL_COMPRESSED_SLUMINANCE_ALPHA_EXT*: GLenum = 0x8C4B
  GL_COMPRESSED_SRGB_S3TC_DXT1_EXT*: GLenum = 0x8C4C
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT*: GLenum = 0x8C4D
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT*: GLenum = 0x8C4E
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT*: GLenum = 0x8C4F
  GL_EXT_texture_sRGB_R8*: GLenum = 1
  GL_SR8_EXT*: GLenum = 0x8FBD
  GL_EXT_texture_sRGB_RG8*: GLenum = 1
  GL_SRG8_EXT*: GLenum = 0x8FBE
  GL_EXT_texture_sRGB_decode*: GLenum = 1
  GL_TEXTURE_SRGB_DECODE_EXT*: GLenum = 0x8A48
  GL_DECODE_EXT*: GLenum = 0x8A49
  GL_SKIP_DECODE_EXT*: GLenum = 0x8A4A
  GL_EXT_texture_shared_exponent*: GLenum = 1
  GL_RGB9_E5_EXT*: GLenum = 0x8C3D
  GL_UNSIGNED_INT_5_9_9_9_REV_EXT*: GLenum = 0x8C3E
  GL_TEXTURE_SHARED_SIZE_EXT*: GLenum = 0x8C3F
  GL_EXT_texture_snorm*: GLenum = 1
  GL_ALPHA_SNORM*: GLenum = 0x9010
  GL_LUMINANCE_SNORM*: GLenum = 0x9011
  GL_LUMINANCE_ALPHA_SNORM*: GLenum = 0x9012
  GL_INTENSITY_SNORM*: GLenum = 0x9013
  GL_ALPHA8_SNORM*: GLenum = 0x9014
  GL_LUMINANCE8_SNORM*: GLenum = 0x9015
  GL_LUMINANCE8_ALPHA8_SNORM*: GLenum = 0x9016
  GL_INTENSITY8_SNORM*: GLenum = 0x9017
  GL_ALPHA16_SNORM*: GLenum = 0x9018
  GL_LUMINANCE16_SNORM*: GLenum = 0x9019
  GL_LUMINANCE16_ALPHA16_SNORM*: GLenum = 0x901A
  GL_INTENSITY16_SNORM*: GLenum = 0x901B
  GL_EXT_texture_storage*: GLenum = 1
  GL_R32F_EXT*: GLenum = 0x822E
  GL_RG32F_EXT*: GLenum = 0x8230
  GL_RGBA32F_EXT*: GLenum = 0x8814
  GL_RGB32F_EXT*: GLenum = 0x8815
  GL_ALPHA32F_EXT*: GLenum = 0x8816
  GL_LUMINANCE32F_EXT*: GLenum = 0x8818
  GL_LUMINANCE_ALPHA32F_EXT*: GLenum = 0x8819
  GL_ALPHA16F_EXT*: GLenum = 0x881C
  GL_LUMINANCE16F_EXT*: GLenum = 0x881E
  GL_LUMINANCE_ALPHA16F_EXT*: GLenum = 0x881F
  GL_TEXTURE_IMMUTABLE_FORMAT_EXT*: GLenum = 0x912F
  GL_EXT_texture_swizzle*: GLenum = 1
  GL_TEXTURE_SWIZZLE_R_EXT*: GLenum = 0x8E42
  GL_TEXTURE_SWIZZLE_G_EXT*: GLenum = 0x8E43
  GL_TEXTURE_SWIZZLE_B_EXT*: GLenum = 0x8E44
  GL_TEXTURE_SWIZZLE_A_EXT*: GLenum = 0x8E45
  GL_TEXTURE_SWIZZLE_RGBA_EXT*: GLenum = 0x8E46
  GL_EXT_texture_type_2_10_10_10_REV*: GLenum = 1
  GL_UNSIGNED_INT_2_10_10_10_REV_EXT*: GLenum = 0x8368
  GL_EXT_texture_view*: GLenum = 1
  GL_TEXTURE_VIEW_MIN_LEVEL_EXT*: GLenum = 0x82DB
  GL_TEXTURE_VIEW_NUM_LEVELS_EXT*: GLenum = 0x82DC
  GL_TEXTURE_VIEW_MIN_LAYER_EXT*: GLenum = 0x82DD
  GL_TEXTURE_VIEW_NUM_LAYERS_EXT*: GLenum = 0x82DE
  GL_EXT_timer_query*: GLenum = 1
  GL_TIME_ELAPSED_EXT*: GLenum = 0x88BF
  GL_EXT_transform_feedback*: GLenum = 1
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT*: GLenum = 0x8C76
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT*: GLenum = 0x8C7F
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT*: GLenum = 0x8C80
  GL_TRANSFORM_FEEDBACK_VARYINGS_EXT*: GLenum = 0x8C83
  GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT*: GLenum = 0x8C84
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT*: GLenum = 0x8C85
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT*: GLenum = 0x8C88
  GL_RASTERIZER_DISCARD_EXT*: GLenum = 0x8C89
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT*: GLenum = 0x8C8A
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT*: GLenum = 0x8C8B
  GL_INTERLEAVED_ATTRIBS_EXT*: GLenum = 0x8C8C
  GL_SEPARATE_ATTRIBS_EXT*: GLenum = 0x8C8D
  GL_TRANSFORM_FEEDBACK_BUFFER_EXT*: GLenum = 0x8C8E
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT*: GLenum = 0x8C8F
  GL_EXT_unpack_subimage*: GLenum = 1
  GL_UNPACK_ROW_LENGTH_EXT*: GLenum = 0x0CF2
  GL_UNPACK_SKIP_ROWS_EXT*: GLenum = 0x0CF3
  GL_UNPACK_SKIP_PIXELS_EXT*: GLenum = 0x0CF4
  GL_EXT_vertex_array*: GLenum = 1
  GL_DOUBLE_EXT*: GLenum = 0x140A
  GL_VERTEX_ARRAY_EXT*: GLenum = 0x8074
  GL_NORMAL_ARRAY_EXT*: GLenum = 0x8075
  GL_COLOR_ARRAY_EXT*: GLenum = 0x8076
  GL_INDEX_ARRAY_EXT*: GLenum = 0x8077
  GL_TEXTURE_COORD_ARRAY_EXT*: GLenum = 0x8078
  GL_EDGE_FLAG_ARRAY_EXT*: GLenum = 0x8079
  GL_VERTEX_ARRAY_SIZE_EXT*: GLenum = 0x807A
  GL_VERTEX_ARRAY_TYPE_EXT*: GLenum = 0x807B
  GL_VERTEX_ARRAY_STRIDE_EXT*: GLenum = 0x807C
  GL_VERTEX_ARRAY_COUNT_EXT*: GLenum = 0x807D
  GL_NORMAL_ARRAY_TYPE_EXT*: GLenum = 0x807E
  GL_NORMAL_ARRAY_STRIDE_EXT*: GLenum = 0x807F
  GL_NORMAL_ARRAY_COUNT_EXT*: GLenum = 0x8080
  GL_COLOR_ARRAY_SIZE_EXT*: GLenum = 0x8081
  GL_COLOR_ARRAY_TYPE_EXT*: GLenum = 0x8082
  GL_COLOR_ARRAY_STRIDE_EXT*: GLenum = 0x8083
  GL_COLOR_ARRAY_COUNT_EXT*: GLenum = 0x8084
  GL_INDEX_ARRAY_TYPE_EXT*: GLenum = 0x8085
  GL_INDEX_ARRAY_STRIDE_EXT*: GLenum = 0x8086
  GL_INDEX_ARRAY_COUNT_EXT*: GLenum = 0x8087
  GL_TEXTURE_COORD_ARRAY_SIZE_EXT*: GLenum = 0x8088
  GL_TEXTURE_COORD_ARRAY_TYPE_EXT*: GLenum = 0x8089
  GL_TEXTURE_COORD_ARRAY_STRIDE_EXT*: GLenum = 0x808A
  GL_TEXTURE_COORD_ARRAY_COUNT_EXT*: GLenum = 0x808B
  GL_EDGE_FLAG_ARRAY_STRIDE_EXT*: GLenum = 0x808C
  GL_EDGE_FLAG_ARRAY_COUNT_EXT*: GLenum = 0x808D
  GL_VERTEX_ARRAY_POINTER_EXT*: GLenum = 0x808E
  GL_NORMAL_ARRAY_POINTER_EXT*: GLenum = 0x808F
  GL_COLOR_ARRAY_POINTER_EXT*: GLenum = 0x8090
  GL_INDEX_ARRAY_POINTER_EXT*: GLenum = 0x8091
  GL_TEXTURE_COORD_ARRAY_POINTER_EXT*: GLenum = 0x8092
  GL_EDGE_FLAG_ARRAY_POINTER_EXT*: GLenum = 0x8093
  GL_EXT_vertex_array_bgra*: GLenum = 1
  GL_EXT_vertex_array_setXXX*: GLenum = 1
  GL_EXT_vertex_attrib_64bit*: GLenum = 1
  GL_DOUBLE_MAT2_EXT*: GLenum = 0x8F46
  GL_DOUBLE_MAT3_EXT*: GLenum = 0x8F47
  GL_DOUBLE_MAT4_EXT*: GLenum = 0x8F48
  GL_DOUBLE_MAT2x3_EXT*: GLenum = 0x8F49
  GL_DOUBLE_MAT2x4_EXT*: GLenum = 0x8F4A
  GL_DOUBLE_MAT3x2_EXT*: GLenum = 0x8F4B
  GL_DOUBLE_MAT3x4_EXT*: GLenum = 0x8F4C
  GL_DOUBLE_MAT4x2_EXT*: GLenum = 0x8F4D
  GL_DOUBLE_MAT4x3_EXT*: GLenum = 0x8F4E
  GL_DOUBLE_VEC2_EXT*: GLenum = 0x8FFC
  GL_DOUBLE_VEC3_EXT*: GLenum = 0x8FFD
  GL_DOUBLE_VEC4_EXT*: GLenum = 0x8FFE
  GL_EXT_vertex_shader*: GLenum = 1
  GL_VERTEX_SHADER_EXT*: GLenum = 0x8780
  GL_VERTEX_SHADER_BINDING_EXT*: GLenum = 0x8781
  GL_OP_INDEX_EXT*: GLenum = 0x8782
  GL_OP_NEGATE_EXT*: GLenum = 0x8783
  GL_OP_DOT3_EXT*: GLenum = 0x8784
  GL_OP_DOT4_EXT*: GLenum = 0x8785
  GL_OP_MUL_EXT*: GLenum = 0x8786
  GL_OP_ADD_EXT*: GLenum = 0x8787
  GL_OP_MADD_EXT*: GLenum = 0x8788
  GL_OP_FRAC_EXT*: GLenum = 0x8789
  GL_OP_MAX_EXT*: GLenum = 0x878A
  GL_OP_MIN_EXT*: GLenum = 0x878B
  GL_OP_SET_GE_EXT*: GLenum = 0x878C
  GL_OP_SET_LT_EXT*: GLenum = 0x878D
  GL_OP_CLAMP_EXT*: GLenum = 0x878E
  GL_OP_FLOOR_EXT*: GLenum = 0x878F
  GL_OP_ROUND_EXT*: GLenum = 0x8790
  GL_OP_EXP_BASE_2_EXT*: GLenum = 0x8791
  GL_OP_LOG_BASE_2_EXT*: GLenum = 0x8792
  GL_OP_POWER_EXT*: GLenum = 0x8793
  GL_OP_RECIP_EXT*: GLenum = 0x8794
  GL_OP_RECIP_SQRT_EXT*: GLenum = 0x8795
  GL_OP_SUB_EXT*: GLenum = 0x8796
  GL_OP_CROSS_PRODUCT_EXT*: GLenum = 0x8797
  GL_OP_MULTIPLY_MATRIX_EXT*: GLenum = 0x8798
  GL_OP_MOV_EXT*: GLenum = 0x8799
  GL_OUTPUT_VERTEX_EXT*: GLenum = 0x879A
  GL_OUTPUT_COLOR0_EXT*: GLenum = 0x879B
  GL_OUTPUT_COLOR1_EXT*: GLenum = 0x879C
  GL_OUTPUT_TEXTURE_COORD0_EXT*: GLenum = 0x879D
  GL_OUTPUT_TEXTURE_COORD1_EXT*: GLenum = 0x879E
  GL_OUTPUT_TEXTURE_COORD2_EXT*: GLenum = 0x879F
  GL_OUTPUT_TEXTURE_COORD3_EXT*: GLenum = 0x87A0
  GL_OUTPUT_TEXTURE_COORD4_EXT*: GLenum = 0x87A1
  GL_OUTPUT_TEXTURE_COORD5_EXT*: GLenum = 0x87A2
  GL_OUTPUT_TEXTURE_COORD6_EXT*: GLenum = 0x87A3
  GL_OUTPUT_TEXTURE_COORD7_EXT*: GLenum = 0x87A4
  GL_OUTPUT_TEXTURE_COORD8_EXT*: GLenum = 0x87A5
  GL_OUTPUT_TEXTURE_COORD9_EXT*: GLenum = 0x87A6
  GL_OUTPUT_TEXTURE_COORD10_EXT*: GLenum = 0x87A7
  GL_OUTPUT_TEXTURE_COORD11_EXT*: GLenum = 0x87A8
  GL_OUTPUT_TEXTURE_COORD12_EXT*: GLenum = 0x87A9
  GL_OUTPUT_TEXTURE_COORD13_EXT*: GLenum = 0x87AA
  GL_OUTPUT_TEXTURE_COORD14_EXT*: GLenum = 0x87AB
  GL_OUTPUT_TEXTURE_COORD15_EXT*: GLenum = 0x87AC
  GL_OUTPUT_TEXTURE_COORD16_EXT*: GLenum = 0x87AD
  GL_OUTPUT_TEXTURE_COORD17_EXT*: GLenum = 0x87AE
  GL_OUTPUT_TEXTURE_COORD18_EXT*: GLenum = 0x87AF
  GL_OUTPUT_TEXTURE_COORD19_EXT*: GLenum = 0x87B0
  GL_OUTPUT_TEXTURE_COORD20_EXT*: GLenum = 0x87B1
  GL_OUTPUT_TEXTURE_COORD21_EXT*: GLenum = 0x87B2
  GL_OUTPUT_TEXTURE_COORD22_EXT*: GLenum = 0x87B3
  GL_OUTPUT_TEXTURE_COORD23_EXT*: GLenum = 0x87B4
  GL_OUTPUT_TEXTURE_COORD24_EXT*: GLenum = 0x87B5
  GL_OUTPUT_TEXTURE_COORD25_EXT*: GLenum = 0x87B6
  GL_OUTPUT_TEXTURE_COORD26_EXT*: GLenum = 0x87B7
  GL_OUTPUT_TEXTURE_COORD27_EXT*: GLenum = 0x87B8
  GL_OUTPUT_TEXTURE_COORD28_EXT*: GLenum = 0x87B9
  GL_OUTPUT_TEXTURE_COORD29_EXT*: GLenum = 0x87BA
  GL_OUTPUT_TEXTURE_COORD30_EXT*: GLenum = 0x87BB
  GL_OUTPUT_TEXTURE_COORD31_EXT*: GLenum = 0x87BC
  GL_OUTPUT_FOG_EXT*: GLenum = 0x87BD
  GL_SCALAR_EXT*: GLenum = 0x87BE
  GL_VECTOR_EXT*: GLenum = 0x87BF
  GL_MATRIX_EXT*: GLenum = 0x87C0
  GL_VARIANT_EXT*: GLenum = 0x87C1
  GL_INVARIANT_EXT*: GLenum = 0x87C2
  GL_LOCAL_CONSTANT_EXT*: GLenum = 0x87C3
  GL_LOCAL_EXT*: GLenum = 0x87C4
  GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT*: GLenum = 0x87C5
  GL_MAX_VERTEX_SHADER_VARIANTS_EXT*: GLenum = 0x87C6
  GL_MAX_VERTEX_SHADER_INVARIANTS_EXT*: GLenum = 0x87C7
  GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT*: GLenum = 0x87C8
  GL_MAX_VERTEX_SHADER_LOCALS_EXT*: GLenum = 0x87C9
  GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT*: GLenum = 0x87CA
  GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT*: GLenum = 0x87CB
  GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT*: GLenum = 0x87CC
  GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT*: GLenum = 0x87CD
  GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT*: GLenum = 0x87CE
  GL_VERTEX_SHADER_INSTRUCTIONS_EXT*: GLenum = 0x87CF
  GL_VERTEX_SHADER_VARIANTS_EXT*: GLenum = 0x87D0
  GL_VERTEX_SHADER_INVARIANTS_EXT*: GLenum = 0x87D1
  GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT*: GLenum = 0x87D2
  GL_VERTEX_SHADER_LOCALS_EXT*: GLenum = 0x87D3
  GL_VERTEX_SHADER_OPTIMIZED_EXT*: GLenum = 0x87D4
  GL_X_EXT*: GLenum = 0x87D5
  GL_Y_EXT*: GLenum = 0x87D6
  GL_Z_EXT*: GLenum = 0x87D7
  GL_W_EXT*: GLenum = 0x87D8
  GL_NEGATIVE_X_EXT*: GLenum = 0x87D9
  GL_NEGATIVE_Y_EXT*: GLenum = 0x87DA
  GL_NEGATIVE_Z_EXT*: GLenum = 0x87DB
  GL_NEGATIVE_W_EXT*: GLenum = 0x87DC
  GL_ZERO_EXT*: GLenum = 0x87DD
  GL_ONE_EXT*: GLenum = 0x87DE
  GL_NEGATIVE_ONE_EXT*: GLenum = 0x87DF
  GL_NORMALIZED_RANGE_EXT*: GLenum = 0x87E0
  GL_FULL_RANGE_EXT*: GLenum = 0x87E1
  GL_CURRENT_VERTEX_EXT*: GLenum = 0x87E2
  GL_MVP_MATRIX_EXT*: GLenum = 0x87E3
  GL_VARIANT_VALUE_EXT*: GLenum = 0x87E4
  GL_VARIANT_DATATYPE_EXT*: GLenum = 0x87E5
  GL_VARIANT_ARRAY_STRIDE_EXT*: GLenum = 0x87E6
  GL_VARIANT_ARRAY_TYPE_EXT*: GLenum = 0x87E7
  GL_VARIANT_ARRAY_EXT*: GLenum = 0x87E8
  GL_VARIANT_ARRAY_POINTER_EXT*: GLenum = 0x87E9
  GL_INVARIANT_VALUE_EXT*: GLenum = 0x87EA
  GL_INVARIANT_DATATYPE_EXT*: GLenum = 0x87EB
  GL_LOCAL_CONSTANT_VALUE_EXT*: GLenum = 0x87EC
  GL_LOCAL_CONSTANT_DATATYPE_EXT*: GLenum = 0x87ED
  GL_EXT_vertex_weighting*: GLenum = 1
  GL_MODELVIEW0_STACK_DEPTH_EXT*: GLenum = 0x0BA3
  GL_MODELVIEW0_MATRIX_EXT*: GLenum = 0x0BA6
  GL_MODELVIEW0_EXT*: GLenum = 0x1700
  GL_MODELVIEW1_STACK_DEPTH_EXT*: GLenum = 0x8502
  GL_MODELVIEW1_MATRIX_EXT*: GLenum = 0x8506
  GL_VERTEX_WEIGHTING_EXT*: GLenum = 0x8509
  GL_MODELVIEW1_EXT*: GLenum = 0x850A
  GL_CURRENT_VERTEX_WEIGHT_EXT*: GLenum = 0x850B
  GL_VERTEX_WEIGHT_ARRAY_EXT*: GLenum = 0x850C
  GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT*: GLenum = 0x850D
  GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT*: GLenum = 0x850E
  GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT*: GLenum = 0x850F
  GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT*: GLenum = 0x8510
  GL_EXT_win32_keyed_mutex*: GLenum = 1
  GL_EXT_window_rectangles*: GLenum = 1
  GL_INCLUSIVE_EXT*: GLenum = 0x8F10
  GL_EXCLUSIVE_EXT*: GLenum = 0x8F11
  GL_WINDOW_RECTANGLE_EXT*: GLenum = 0x8F12
  GL_WINDOW_RECTANGLE_MODE_EXT*: GLenum = 0x8F13
  GL_MAX_WINDOW_RECTANGLES_EXT*: GLenum = 0x8F14
  GL_NUM_WINDOW_RECTANGLES_EXT*: GLenum = 0x8F15
  GL_EXT_x11_sync_object*: GLenum = 1
  GL_SYNC_X11_FENCE_EXT*: GLenum = 0x90E1
  GL_GREMEDY_frame_terminator*: GLenum = 1
  GL_GREMEDY_string_marker*: GLenum = 1
  GL_HP_convolution_border_modes*: GLenum = 1
  GL_HP_image_transform*: GLenum = 1
  GL_HP_occlusion_test*: GLenum = 1
  GL_HP_texture_lighting*: GLenum = 1
  GL_IBM_cull_vertex*: GLenum = 1
  GL_CULL_VERTEX_IBM*: GLenum = 103050
  GL_IBM_multimode_draw_arrays*: GLenum = 1
  GL_IBM_rasterpos_clip*: GLenum = 1
  GL_RASTER_POSITION_UNCLIPPED_IBM*: GLenum = 103010
  GL_IBM_static_data*: GLenum = 1
  GL_ALL_STATIC_DATA_IBM*: GLenum = 103060
  GL_STATIC_VERTEX_ARRAY_IBM*: GLenum = 103061
  GL_IBM_texture_mirrored_repeat*: GLenum = 1
  GL_MIRRORED_REPEAT_IBM*: GLenum = 0x8370
  GL_IBM_vertex_array_lists*: GLenum = 1
  GL_VERTEX_ARRAY_LIST_IBM*: GLenum = 103070
  GL_NORMAL_ARRAY_LIST_IBM*: GLenum = 103071
  GL_COLOR_ARRAY_LIST_IBM*: GLenum = 103072
  GL_INDEX_ARRAY_LIST_IBM*: GLenum = 103073
  GL_TEXTURE_COORD_ARRAY_LIST_IBM*: GLenum = 103074
  GL_EDGE_FLAG_ARRAY_LIST_IBM*: GLenum = 103075
  GL_FOG_COORDINATE_ARRAY_LIST_IBM*: GLenum = 103076
  GL_SECONDARY_COLOR_ARRAY_LIST_IBM*: GLenum = 103077
  GL_VERTEX_ARRAY_LIST_STRIDE_IBM*: GLenum = 103080
  GL_NORMAL_ARRAY_LIST_STRIDE_IBM*: GLenum = 103081
  GL_COLOR_ARRAY_LIST_STRIDE_IBM*: GLenum = 103082
  GL_INDEX_ARRAY_LIST_STRIDE_IBM*: GLenum = 103083
  GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM*: GLenum = 103084
  GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM*: GLenum = 103085
  GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM*: GLenum = 103086
  GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM*: GLenum = 103087
  GL_INGR_color_clamp*: GLenum = 1
  GL_RED_MIN_CLAMP_INGR*: GLenum = 0x8560
  GL_GREEN_MIN_CLAMP_INGR*: GLenum = 0x8561
  GL_BLUE_MIN_CLAMP_INGR*: GLenum = 0x8562
  GL_ALPHA_MIN_CLAMP_INGR*: GLenum = 0x8563
  GL_RED_MAX_CLAMP_INGR*: GLenum = 0x8564
  GL_GREEN_MAX_CLAMP_INGR*: GLenum = 0x8565
  GL_BLUE_MAX_CLAMP_INGR*: GLenum = 0x8566
  GL_ALPHA_MAX_CLAMP_INGR*: GLenum = 0x8567
  GL_INGR_interlace_read*: GLenum = 1
  GL_INTERLACE_READ_INGR*: GLenum = 0x8568
  GL_INTEL_conservative_rasterization*: GLenum = 1
  GL_CONSERVATIVE_RASTERIZATION_INTEL*: GLenum = 0x83FE
  GL_INTEL_fragment_shader_ordering*: GLenum = 1
  GL_INTEL_framebuffer_CMAA*: GLenum = 1
  GL_INTEL_map_texture*: GLenum = 1
  GL_LAYOUT_DEFAULT_INTEL*: GLenum = 0
  GL_LAYOUT_LINEAR_INTEL*: GLenum = 1
  GL_LAYOUT_LINEAR_CPU_CACHED_INTEL*: GLenum = 2
  GL_TEXTURE_MEMORY_LAYOUT_INTEL*: GLenum = 0x83FF
  GL_INTEL_parallel_arrays*: GLenum = 1
  GL_PARALLEL_ARRAYS_INTEL*: GLenum = 0x83F4
  GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL*: GLenum = 0x83F5
  GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL*: GLenum = 0x83F6
  GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL*: GLenum = 0x83F7
  GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL*: GLenum = 0x83F8
  GL_INTEL_performance_query*: GLenum = 1
  GL_PERFQUERY_SINGLE_CONTEXT_INTEL*: GLenum = 0x0000
  GL_PERFQUERY_GLOBAL_CONTEXT_INTEL*: GLenum = 0x0001
  GL_PERFQUERY_DONOT_FLUSH_INTEL*: GLenum = 0x83F9
  GL_PERFQUERY_FLUSH_INTEL*: GLenum = 0x83FA
  GL_PERFQUERY_WAIT_INTEL*: GLenum = 0x83FB
  GL_PERFQUERY_COUNTER_EVENT_INTEL*: GLenum = 0x94F0
  GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL*: GLenum = 0x94F1
  GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL*: GLenum = 0x94F2
  GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL*: GLenum = 0x94F3
  GL_PERFQUERY_COUNTER_RAW_INTEL*: GLenum = 0x94F4
  GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL*: GLenum = 0x94F5
  GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL*: GLenum = 0x94F8
  GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL*: GLenum = 0x94F9
  GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL*: GLenum = 0x94FA
  GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL*: GLenum = 0x94FB
  GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL*: GLenum = 0x94FC
  GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL*: GLenum = 0x94FD
  GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL*: GLenum = 0x94FE
  GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL*: GLenum = 0x94FF
  GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL*: GLenum = 0x9500
  GL_INTEL_texture_scissor*: GLenum = 1
  GL_KHR_blend_equation_advanced*: GLenum = 1
  GL_BLEND_ADVANCED_COHERENT_KHR*: GLenum = 0x9285
  GL_MULTIPLY_KHR*: GLenum = 0x9294
  GL_SCREEN_KHR*: GLenum = 0x9295
  GL_OVERLAY_KHR*: GLenum = 0x9296
  GL_DARKEN_KHR*: GLenum = 0x9297
  GL_LIGHTEN_KHR*: GLenum = 0x9298
  GL_COLORDODGE_KHR*: GLenum = 0x9299
  GL_COLORBURN_KHR*: GLenum = 0x929A
  GL_HARDLIGHT_KHR*: GLenum = 0x929B
  GL_SOFTLIGHT_KHR*: GLenum = 0x929C
  GL_DIFFERENCE_KHR*: GLenum = 0x929E
  GL_EXCLUSION_KHR*: GLenum = 0x92A0
  GL_HSL_HUE_KHR*: GLenum = 0x92AD
  GL_HSL_SATURATION_KHR*: GLenum = 0x92AE
  GL_HSL_COLOR_KHR*: GLenum = 0x92AF
  GL_HSL_LUMINOSITY_KHR*: GLenum = 0x92B0
  GL_KHR_blend_equation_advanced_coherent*: GLenum = 1
  GL_KHR_context_flush_control*: GLenum = 1
  GL_KHR_debug*: GLenum = 1
  GL_CONTEXT_FLAG_DEBUG_BIT*: GLenum = 0x00000002
  GL_DEBUG_OUTPUT_SYNCHRONOUS*: GLenum = 0x8242
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH*: GLenum = 0x8243
  GL_DEBUG_CALLBACK_FUNCTION*: GLenum = 0x8244
  GL_DEBUG_CALLBACK_USER_PARAM*: GLenum = 0x8245
  GL_DEBUG_SOURCE_API*: GLenum = 0x8246
  GL_DEBUG_SOURCE_WINDOW_SYSTEM*: GLenum = 0x8247
  GL_DEBUG_SOURCE_SHADER_COMPILER*: GLenum = 0x8248
  GL_DEBUG_SOURCE_THIRD_PARTY*: GLenum = 0x8249
  GL_DEBUG_SOURCE_APPLICATION*: GLenum = 0x824A
  GL_DEBUG_SOURCE_OTHER*: GLenum = 0x824B
  GL_DEBUG_TYPE_ERROR*: GLenum = 0x824C
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR*: GLenum = 0x824D
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR*: GLenum = 0x824E
  GL_DEBUG_TYPE_PORTABILITY*: GLenum = 0x824F
  GL_DEBUG_TYPE_PERFORMANCE*: GLenum = 0x8250
  GL_DEBUG_TYPE_OTHER*: GLenum = 0x8251
  GL_DEBUG_TYPE_MARKER*: GLenum = 0x8268
  GL_DEBUG_TYPE_PUSH_GROUP*: GLenum = 0x8269
  GL_DEBUG_TYPE_POP_GROUP*: GLenum = 0x826A
  GL_DEBUG_SEVERITY_NOTIFICATION*: GLenum = 0x826B
  GL_MAX_DEBUG_GROUP_STACK_DEPTH*: GLenum = 0x826C
  GL_DEBUG_GROUP_STACK_DEPTH*: GLenum = 0x826D
  GL_BUFFER*: GLenum = 0x82E0
  GL_SHADER*: GLenum = 0x82E1
  GL_PROGRAM*: GLenum = 0x82E2
  GL_QUERY*: GLenum = 0x82E3
  GL_PROGRAM_PIPELINE*: GLenum = 0x82E4
  GL_SAMPLER*: GLenum = 0x82E6
  GL_DISPLAY_LIST*: GLenum = 0x82E7
  GL_MAX_LABEL_LENGTH*: GLenum = 0x82E8
  GL_MAX_DEBUG_MESSAGE_LENGTH*: GLenum = 0x9143
  GL_MAX_DEBUG_LOGGED_MESSAGES*: GLenum = 0x9144
  GL_DEBUG_LOGGED_MESSAGES*: GLenum = 0x9145
  GL_DEBUG_SEVERITY_HIGH*: GLenum = 0x9146
  GL_DEBUG_SEVERITY_MEDIUM*: GLenum = 0x9147
  GL_DEBUG_SEVERITY_LOW*: GLenum = 0x9148
  GL_DEBUG_OUTPUT*: GLenum = 0x92E0
  GL_KHR_no_error*: GLenum = 1
  GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR*: GLenum = 0x00000008
  GL_KHR_parallel_shader_compile*: GLenum = 1
  GL_MAX_SHADER_COMPILER_THREADS_KHR*: GLenum = 0x91B0
  GL_COMPLETION_STATUS_KHR*: GLenum = 0x91B1
  GL_KHR_robust_buffer_access_behavior*: GLenum = 1
  GL_KHR_robustness*: GLenum = 1
  GL_CONTEXT_LOST*: GLenum = 0x0507
  GL_LOSE_CONTEXT_ON_RESET*: GLenum = 0x8252
  GL_GUILTY_CONTEXT_RESET*: GLenum = 0x8253
  GL_INNOCENT_CONTEXT_RESET*: GLenum = 0x8254
  GL_UNKNOWN_CONTEXT_RESET*: GLenum = 0x8255
  GL_RESET_NOTIFICATION_STRATEGY*: GLenum = 0x8256
  GL_NO_RESET_NOTIFICATION*: GLenum = 0x8261
  GL_CONTEXT_ROBUST_ACCESS*: GLenum = 0x90F3
  GL_KHR_texture_compression_astc_hdr*: GLenum = 1
  GL_COMPRESSED_RGBA_ASTC_4x4_KHR*: GLenum = 0x93B0
  GL_COMPRESSED_RGBA_ASTC_5x4_KHR*: GLenum = 0x93B1
  GL_COMPRESSED_RGBA_ASTC_5x5_KHR*: GLenum = 0x93B2
  GL_COMPRESSED_RGBA_ASTC_6x5_KHR*: GLenum = 0x93B3
  GL_COMPRESSED_RGBA_ASTC_6x6_KHR*: GLenum = 0x93B4
  GL_COMPRESSED_RGBA_ASTC_8x5_KHR*: GLenum = 0x93B5
  GL_COMPRESSED_RGBA_ASTC_8x6_KHR*: GLenum = 0x93B6
  GL_COMPRESSED_RGBA_ASTC_8x8_KHR*: GLenum = 0x93B7
  GL_COMPRESSED_RGBA_ASTC_10x5_KHR*: GLenum = 0x93B8
  GL_COMPRESSED_RGBA_ASTC_10x6_KHR*: GLenum = 0x93B9
  GL_COMPRESSED_RGBA_ASTC_10x8_KHR*: GLenum = 0x93BA
  GL_COMPRESSED_RGBA_ASTC_10x10_KHR*: GLenum = 0x93BB
  GL_COMPRESSED_RGBA_ASTC_12x10_KHR*: GLenum = 0x93BC
  GL_COMPRESSED_RGBA_ASTC_12x12_KHR*: GLenum = 0x93BD
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR*: GLenum = 0x93D0
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR*: GLenum = 0x93D1
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR*: GLenum = 0x93D2
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR*: GLenum = 0x93D3
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR*: GLenum = 0x93D4
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR*: GLenum = 0x93D5
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR*: GLenum = 0x93D6
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR*: GLenum = 0x93D7
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR*: GLenum = 0x93D8
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR*: GLenum = 0x93D9
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR*: GLenum = 0x93DA
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR*: GLenum = 0x93DB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR*: GLenum = 0x93DC
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR*: GLenum = 0x93DD
  GL_KHR_texture_compression_astc_ldr*: GLenum = 1
  GL_KHR_texture_compression_astc_sliced_3d*: GLenum = 1
  GL_KTX_buffer_region*: GLenum = 1
  GL_KTX_FRONT_REGION*: GLenum = 0x0
  GL_KTX_BACK_REGION*: GLenum = 0x1
  GL_KTX_Z_REGION*: GLenum = 0x2
  GL_KTX_STENCIL_REGION*: GLenum = 0x3
  GL_MESAX_texture_stack*: GLenum = 1
  GL_TEXTURE_1D_STACK_MESAX*: GLenum = 0x8759
  GL_TEXTURE_2D_STACK_MESAX*: GLenum = 0x875A
  GL_PROXY_TEXTURE_1D_STACK_MESAX*: GLenum = 0x875B
  GL_PROXY_TEXTURE_2D_STACK_MESAX*: GLenum = 0x875C
  GL_TEXTURE_1D_STACK_BINDING_MESAX*: GLenum = 0x875D
  GL_TEXTURE_2D_STACK_BINDING_MESAX*: GLenum = 0x875E
  GL_MESA_pack_invert*: GLenum = 1
  GL_PACK_INVERT_MESA*: GLenum = 0x8758
  GL_MESA_resize_buffers*: GLenum = 1
  GL_MESA_shader_integer_functions*: GLenum = 1
  GL_MESA_window_pos*: GLenum = 1
  GL_MESA_ycbcr_texture*: GLenum = 1
  GL_UNSIGNED_SHORT_8_8_MESA*: GLenum = 0x85BA
  GL_UNSIGNED_SHORT_8_8_REV_MESA*: GLenum = 0x85BB
  GL_YCBCR_MESA*: GLenum = 0x8757
  GL_NVX_blend_equation_advanced_multi_draw_buffers*: GLenum = 1
  GL_NVX_conditional_render*: GLenum = 1
  GL_NVX_gpu_memory_info*: GLenum = 1
  GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX*: GLenum = 0x9047
  GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX*: GLenum = 0x9048
  GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX*: GLenum = 0x9049
  GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX*: GLenum = 0x904A
  GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX*: GLenum = 0x904B
  GL_NVX_linked_gpu_multicast*: GLenum = 1
  GL_LGPU_SEPARATE_STORAGE_BIT_NVX*: GLenum = 0x0800
  GL_MAX_LGPU_GPUS_NVX*: GLenum = 0x92BA
  GL_NV_3dvision_settings*: GLenum = 1
  GL_3DVISION_STEREO_NV*: GLenum = 0x90F4
  GL_STEREO_SEPARATION_NV*: GLenum = 0x90F5
  GL_STEREO_CONVERGENCE_NV*: GLenum = 0x90F6
  GL_STEREO_CUTOFF_NV*: GLenum = 0x90F7
  GL_STEREO_PROJECTION_NV*: GLenum = 0x90F8
  GL_STEREO_PROJECTION_PERSPECTIVE_NV*: GLenum = 0x90F9
  GL_STEREO_PROJECTION_ORTHO_NV*: GLenum = 0x90FA
  GL_TEXTURE_EXTERNAL_OES*: GLenum = 0x8D65
  GL_SAMPLER_EXTERNAL_OES*: GLenum = 0x8D66
  GL_TEXTURE_BINDING_EXTERNAL_OES*: GLenum = 0x8D67
  GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES*: GLenum = 0x8D68
  GL_NV_alpha_to_coverage_dither_control*: GLenum = 1
  GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV*: GLenum = 0x92BF
  GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV*: GLenum = 0x934D
  GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV*: GLenum = 0x934E
  GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV*: GLenum = 0x934F
  GL_NV_bgr*: GLenum = 1
  GL_BGR_NV*: GLenum = 0x80E0
  GL_NV_bindless_multi_draw_indirect*: GLenum = 1
  GL_NV_bindless_multi_draw_indirect_count*: GLenum = 1
  GL_NV_bindless_texture*: GLenum = 1
  GL_NV_blend_equation_advanced*: GLenum = 1
  GL_XOR_NV*: GLenum = 0x1506
  GL_RED_NV*: GLenum = 0x1903
  GL_GREEN_NV*: GLenum = 0x1904
  GL_BLUE_NV*: GLenum = 0x1905
  GL_BLEND_PREMULTIPLIED_SRC_NV*: GLenum = 0x9280
  GL_BLEND_OVERLAP_NV*: GLenum = 0x9281
  GL_UNCORRELATED_NV*: GLenum = 0x9282
  GL_DISJOINT_NV*: GLenum = 0x9283
  GL_CONJOINT_NV*: GLenum = 0x9284
  GL_BLEND_ADVANCED_COHERENT_NV*: GLenum = 0x9285
  GL_SRC_NV*: GLenum = 0x9286
  GL_DST_NV*: GLenum = 0x9287
  GL_SRC_OVER_NV*: GLenum = 0x9288
  GL_DST_OVER_NV*: GLenum = 0x9289
  GL_SRC_IN_NV*: GLenum = 0x928A
  GL_DST_IN_NV*: GLenum = 0x928B
  GL_SRC_OUT_NV*: GLenum = 0x928C
  GL_DST_OUT_NV*: GLenum = 0x928D
  GL_SRC_ATOP_NV*: GLenum = 0x928E
  GL_DST_ATOP_NV*: GLenum = 0x928F
  GL_PLUS_NV*: GLenum = 0x9291
  GL_PLUS_DARKER_NV*: GLenum = 0x9292
  GL_MULTIPLY_NV*: GLenum = 0x9294
  GL_SCREEN_NV*: GLenum = 0x9295
  GL_OVERLAY_NV*: GLenum = 0x9296
  GL_DARKEN_NV*: GLenum = 0x9297
  GL_LIGHTEN_NV*: GLenum = 0x9298
  GL_COLORDODGE_NV*: GLenum = 0x9299
  GL_COLORBURN_NV*: GLenum = 0x929A
  GL_HARDLIGHT_NV*: GLenum = 0x929B
  GL_SOFTLIGHT_NV*: GLenum = 0x929C
  GL_DIFFERENCE_NV*: GLenum = 0x929E
  GL_MINUS_NV*: GLenum = 0x929F
  GL_EXCLUSION_NV*: GLenum = 0x92A0
  GL_CONTRAST_NV*: GLenum = 0x92A1
  GL_INVERT_RGB_NV*: GLenum = 0x92A3
  GL_LINEARDODGE_NV*: GLenum = 0x92A4
  GL_LINEARBURN_NV*: GLenum = 0x92A5
  GL_VIVIDLIGHT_NV*: GLenum = 0x92A6
  GL_LINEARLIGHT_NV*: GLenum = 0x92A7
  GL_PINLIGHT_NV*: GLenum = 0x92A8
  GL_HARDMIX_NV*: GLenum = 0x92A9
  GL_HSL_HUE_NV*: GLenum = 0x92AD
  GL_HSL_SATURATION_NV*: GLenum = 0x92AE
  GL_HSL_COLOR_NV*: GLenum = 0x92AF
  GL_HSL_LUMINOSITY_NV*: GLenum = 0x92B0
  GL_PLUS_CLAMPED_NV*: GLenum = 0x92B1
  GL_PLUS_CLAMPED_ALPHA_NV*: GLenum = 0x92B2
  GL_MINUS_CLAMPED_NV*: GLenum = 0x92B3
  GL_INVERT_OVG_NV*: GLenum = 0x92B4
  GL_NV_blend_equation_advanced_coherent*: GLenum = 1
  GL_NV_blend_minmax_factor*: GLenum = 1
  GL_NV_blend_square*: GLenum = 1
  GL_NV_clip_space_w_scaling*: GLenum = 1
  GL_VIEWPORT_POSITION_W_SCALE_NV*: GLenum = 0x937C
  GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV*: GLenum = 0x937D
  GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV*: GLenum = 0x937E
  GL_NV_command_list*: GLenum = 1
  GL_TERMINATE_SEQUENCE_COMMAND_NV*: GLenum = 0x0000
  GL_NOP_COMMAND_NV*: GLenum = 0x0001
  GL_DRAW_ELEMENTS_COMMAND_NV*: GLenum = 0x0002
  GL_DRAW_ARRAYS_COMMAND_NV*: GLenum = 0x0003
  GL_DRAW_ELEMENTS_STRIP_COMMAND_NV*: GLenum = 0x0004
  GL_DRAW_ARRAYS_STRIP_COMMAND_NV*: GLenum = 0x0005
  GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV*: GLenum = 0x0006
  GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV*: GLenum = 0x0007
  GL_ELEMENT_ADDRESS_COMMAND_NV*: GLenum = 0x0008
  GL_ATTRIBUTE_ADDRESS_COMMAND_NV*: GLenum = 0x0009
  GL_UNIFORM_ADDRESS_COMMAND_NV*: GLenum = 0x000a
  GL_BLEND_COLOR_COMMAND_NV*: GLenum = 0x000b
  GL_STENCIL_REF_COMMAND_NV*: GLenum = 0x000c
  GL_LINE_WIDTH_COMMAND_NV*: GLenum = 0x000d
  GL_POLYGON_OFFSET_COMMAND_NV*: GLenum = 0x000e
  GL_ALPHA_REF_COMMAND_NV*: GLenum = 0x000f
  GL_VIEWPORT_COMMAND_NV*: GLenum = 0x0010
  GL_SCISSOR_COMMAND_NV*: GLenum = 0x0011
  GL_FRONT_FACE_COMMAND_NV*: GLenum = 0x0012
  GL_NV_compute_program5*: GLenum = 1
  GL_COMPUTE_PROGRAM_NV*: GLenum = 0x90FB
  GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV*: GLenum = 0x90FC
  GL_NV_conditional_render*: GLenum = 1
  GL_QUERY_WAIT_NV*: GLenum = 0x8E13
  GL_QUERY_NO_WAIT_NV*: GLenum = 0x8E14
  GL_QUERY_BY_REGION_WAIT_NV*: GLenum = 0x8E15
  GL_QUERY_BY_REGION_NO_WAIT_NV*: GLenum = 0x8E16
  GL_NV_conservative_raster*: GLenum = 1
  GL_CONSERVATIVE_RASTERIZATION_NV*: GLenum = 0x9346
  GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV*: GLenum = 0x9347
  GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV*: GLenum = 0x9348
  GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV*: GLenum = 0x9349
  GL_NV_conservative_raster_dilate*: GLenum = 1
  GL_CONSERVATIVE_RASTER_DILATE_NV*: GLenum = 0x9379
  GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV*: GLenum = 0x937A
  GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV*: GLenum = 0x937B
  GL_NV_conservative_raster_pre_snap_triangles*: GLenum = 1
  GL_CONSERVATIVE_RASTER_MODE_NV*: GLenum = 0x954D
  GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV*: GLenum = 0x954E
  GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV*: GLenum = 0x954F
  GL_NV_copy_buffer*: GLenum = 1
  GL_COPY_READ_BUFFER_NV*: GLenum = 0x8F36
  GL_COPY_WRITE_BUFFER_NV*: GLenum = 0x8F37
  GL_NV_copy_depth_to_color*: GLenum = 1
  GL_DEPTH_STENCIL_TO_RGBA_NV*: GLenum = 0x886E
  GL_DEPTH_STENCIL_TO_BGRA_NV*: GLenum = 0x886F
  GL_NV_copy_image*: GLenum = 1
  GL_NV_deep_texture3D*: GLenum = 1
  GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV*: GLenum = 0x90D0
  GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV*: GLenum = 0x90D1
  GL_NV_depth_buffer_float*: GLenum = 1
  GL_DEPTH_COMPONENT32F_NV*: GLenum = 0x8DAB
  GL_DEPTH32F_STENCIL8_NV*: GLenum = 0x8DAC
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV*: GLenum = 0x8DAD
  GL_DEPTH_BUFFER_FLOAT_MODE_NV*: GLenum = 0x8DAF
  GL_NV_depth_clamp*: GLenum = 1
  GL_DEPTH_CLAMP_NV*: GLenum = 0x864F
  GL_NV_depth_range_unclamped*: GLenum = 1
  GL_SAMPLE_COUNT_BITS_NV*: GLenum = 0x8864
  GL_CURRENT_SAMPLE_COUNT_QUERY_NV*: GLenum = 0x8865
  GL_QUERY_RESULT_NV*: GLenum = 0x8866
  GL_QUERY_RESULT_AVAILABLE_NV*: GLenum = 0x8867
  GL_SAMPLE_COUNT_NV*: GLenum = 0x8914
  GL_NV_draw_buffers*: GLenum = 1
  GL_MAX_DRAW_BUFFERS_NV*: GLenum = 0x8824
  GL_DRAW_BUFFER0_NV*: GLenum = 0x8825
  GL_DRAW_BUFFER1_NV*: GLenum = 0x8826
  GL_DRAW_BUFFER2_NV*: GLenum = 0x8827
  GL_DRAW_BUFFER3_NV*: GLenum = 0x8828
  GL_DRAW_BUFFER4_NV*: GLenum = 0x8829
  GL_DRAW_BUFFER5_NV*: GLenum = 0x882A
  GL_DRAW_BUFFER6_NV*: GLenum = 0x882B
  GL_DRAW_BUFFER7_NV*: GLenum = 0x882C
  GL_DRAW_BUFFER8_NV*: GLenum = 0x882D
  GL_DRAW_BUFFER9_NV*: GLenum = 0x882E
  GL_DRAW_BUFFER10_NV*: GLenum = 0x882F
  GL_DRAW_BUFFER11_NV*: GLenum = 0x8830
  GL_DRAW_BUFFER12_NV*: GLenum = 0x8831
  GL_DRAW_BUFFER13_NV*: GLenum = 0x8832
  GL_DRAW_BUFFER14_NV*: GLenum = 0x8833
  GL_DRAW_BUFFER15_NV*: GLenum = 0x8834
  GL_COLOR_ATTACHMENT0_NV*: GLenum = 0x8CE0
  GL_COLOR_ATTACHMENT1_NV*: GLenum = 0x8CE1
  GL_COLOR_ATTACHMENT2_NV*: GLenum = 0x8CE2
  GL_COLOR_ATTACHMENT3_NV*: GLenum = 0x8CE3
  GL_COLOR_ATTACHMENT4_NV*: GLenum = 0x8CE4
  GL_COLOR_ATTACHMENT5_NV*: GLenum = 0x8CE5
  GL_COLOR_ATTACHMENT6_NV*: GLenum = 0x8CE6
  GL_COLOR_ATTACHMENT7_NV*: GLenum = 0x8CE7
  GL_COLOR_ATTACHMENT8_NV*: GLenum = 0x8CE8
  GL_COLOR_ATTACHMENT9_NV*: GLenum = 0x8CE9
  GL_COLOR_ATTACHMENT10_NV*: GLenum = 0x8CEA
  GL_COLOR_ATTACHMENT11_NV*: GLenum = 0x8CEB
  GL_COLOR_ATTACHMENT12_NV*: GLenum = 0x8CEC
  GL_COLOR_ATTACHMENT13_NV*: GLenum = 0x8CED
  GL_COLOR_ATTACHMENT14_NV*: GLenum = 0x8CEE
  GL_COLOR_ATTACHMENT15_NV*: GLenum = 0x8CEF
  GL_NV_draw_instanced*: GLenum = 1
  GL_NV_draw_texture*: GLenum = 1
  GL_NV_draw_vulkan_image*: GLenum = 1
  GL_NV_evaluators*: GLenum = 1
  GL_EVAL_2D_NV*: GLenum = 0x86C0
  GL_EVAL_TRIANGULAR_2D_NV*: GLenum = 0x86C1
  GL_MAP_TESSELLATION_NV*: GLenum = 0x86C2
  GL_MAP_ATTRIB_U_ORDER_NV*: GLenum = 0x86C3
  GL_MAP_ATTRIB_V_ORDER_NV*: GLenum = 0x86C4
  GL_EVAL_FRACTIONAL_TESSELLATION_NV*: GLenum = 0x86C5
  GL_EVAL_VERTEX_ATTRIB0_NV*: GLenum = 0x86C6
  GL_EVAL_VERTEX_ATTRIB1_NV*: GLenum = 0x86C7
  GL_EVAL_VERTEX_ATTRIB2_NV*: GLenum = 0x86C8
  GL_EVAL_VERTEX_ATTRIB3_NV*: GLenum = 0x86C9
  GL_EVAL_VERTEX_ATTRIB4_NV*: GLenum = 0x86CA
  GL_EVAL_VERTEX_ATTRIB5_NV*: GLenum = 0x86CB
  GL_EVAL_VERTEX_ATTRIB6_NV*: GLenum = 0x86CC
  GL_EVAL_VERTEX_ATTRIB7_NV*: GLenum = 0x86CD
  GL_EVAL_VERTEX_ATTRIB8_NV*: GLenum = 0x86CE
  GL_EVAL_VERTEX_ATTRIB9_NV*: GLenum = 0x86CF
  GL_EVAL_VERTEX_ATTRIB10_NV*: GLenum = 0x86D0
  GL_EVAL_VERTEX_ATTRIB11_NV*: GLenum = 0x86D1
  GL_EVAL_VERTEX_ATTRIB12_NV*: GLenum = 0x86D2
  GL_EVAL_VERTEX_ATTRIB13_NV*: GLenum = 0x86D3
  GL_EVAL_VERTEX_ATTRIB14_NV*: GLenum = 0x86D4
  GL_EVAL_VERTEX_ATTRIB15_NV*: GLenum = 0x86D5
  GL_MAX_MAP_TESSELLATION_NV*: GLenum = 0x86D6
  GL_MAX_RATIONAL_EVAL_ORDER_NV*: GLenum = 0x86D7
  GL_NV_explicit_attrib_location*: GLenum = 1
  GL_NV_explicit_multisample*: GLenum = 1
  GL_SAMPLE_POSITION_NV*: GLenum = 0x8E50
  GL_SAMPLE_MASK_NV*: GLenum = 0x8E51
  GL_SAMPLE_MASK_VALUE_NV*: GLenum = 0x8E52
  GL_TEXTURE_BINDING_RENDERBUFFER_NV*: GLenum = 0x8E53
  GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV*: GLenum = 0x8E54
  GL_TEXTURE_RENDERBUFFER_NV*: GLenum = 0x8E55
  GL_SAMPLER_RENDERBUFFER_NV*: GLenum = 0x8E56
  GL_INT_SAMPLER_RENDERBUFFER_NV*: GLenum = 0x8E57
  GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV*: GLenum = 0x8E58
  GL_MAX_SAMPLE_MASK_WORDS_NV*: GLenum = 0x8E59
  GL_NV_fbo_color_attachments*: GLenum = 1
  GL_MAX_COLOR_ATTACHMENTS_NV*: GLenum = 0x8CDF
  GL_NV_fence*: GLenum = 1
  GL_ALL_COMPLETED_NV*: GLenum = 0x84F2
  GL_FENCE_STATUS_NV*: GLenum = 0x84F3
  GL_FENCE_CONDITION_NV*: GLenum = 0x84F4
  GL_NV_fill_rectangle*: GLenum = 1
  GL_FILL_RECTANGLE_NV*: GLenum = 0x933C
  GL_NV_float_buffer*: GLenum = 1
  GL_FLOAT_R_NV*: GLenum = 0x8880
  GL_FLOAT_RG_NV*: GLenum = 0x8881
  GL_FLOAT_RGB_NV*: GLenum = 0x8882
  GL_FLOAT_RGBA_NV*: GLenum = 0x8883
  GL_FLOAT_R16_NV*: GLenum = 0x8884
  GL_FLOAT_R32_NV*: GLenum = 0x8885
  GL_FLOAT_RG16_NV*: GLenum = 0x8886
  GL_FLOAT_RG32_NV*: GLenum = 0x8887
  GL_FLOAT_RGB16_NV*: GLenum = 0x8888
  GL_FLOAT_RGB32_NV*: GLenum = 0x8889
  GL_FLOAT_RGBA16_NV*: GLenum = 0x888A
  GL_FLOAT_RGBA32_NV*: GLenum = 0x888B
  GL_TEXTURE_FLOAT_COMPONENTS_NV*: GLenum = 0x888C
  GL_FLOAT_CLEAR_COLOR_VALUE_NV*: GLenum = 0x888D
  GL_FLOAT_RGBA_MODE_NV*: GLenum = 0x888E
  GL_NV_fog_distance*: GLenum = 1
  GL_FOG_DISTANCE_MODE_NV*: GLenum = 0x855A
  GL_EYE_RADIAL_NV*: GLenum = 0x855B
  GL_EYE_PLANE_ABSOLUTE_NV*: GLenum = 0x855C
  GL_NV_fragment_coverage_to_color*: GLenum = 1
  GL_FRAGMENT_COVERAGE_TO_COLOR_NV*: GLenum = 0x92DD
  GL_FRAGMENT_COVERAGE_COLOR_NV*: GLenum = 0x92DE
  GL_NV_fragment_program*: GLenum = 1
  GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV*: GLenum = 0x8868
  GL_FRAGMENT_PROGRAM_NV*: GLenum = 0x8870
  GL_MAX_TEXTURE_COORDS_NV*: GLenum = 0x8871
  GL_MAX_TEXTURE_IMAGE_UNITS_NV*: GLenum = 0x8872
  GL_FRAGMENT_PROGRAM_BINDING_NV*: GLenum = 0x8873
  GL_PROGRAM_ERROR_STRING_NV*: GLenum = 0x8874
  GL_NV_fragment_program2*: GLenum = 1
  GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV*: GLenum = 0x88F4
  GL_MAX_PROGRAM_CALL_DEPTH_NV*: GLenum = 0x88F5
  GL_MAX_PROGRAM_IF_DEPTH_NV*: GLenum = 0x88F6
  GL_MAX_PROGRAM_LOOP_DEPTH_NV*: GLenum = 0x88F7
  GL_MAX_PROGRAM_LOOP_COUNT_NV*: GLenum = 0x88F8
  GL_NV_fragment_program4*: GLenum = 1
  GL_NV_fragment_program_option*: GLenum = 1
  GL_NV_fragment_shader_interlock*: GLenum = 1
  GL_NV_framebuffer_blit*: GLenum = 1
  GL_DRAW_FRAMEBUFFER_BINDING_NV*: GLenum = 0x8CA6
  GL_READ_FRAMEBUFFER_NV*: GLenum = 0x8CA8
  GL_DRAW_FRAMEBUFFER_NV*: GLenum = 0x8CA9
  GL_READ_FRAMEBUFFER_BINDING_NV*: GLenum = 0x8CAA
  GL_NV_framebuffer_mixed_samples*: GLenum = 1
  GL_NV_framebuffer_multisample*: GLenum = 1
  GL_RENDERBUFFER_SAMPLES_NV*: GLenum = 0x8CAB
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV*: GLenum = 0x8D56
  GL_MAX_SAMPLES_NV*: GLenum = 0x8D57
  GL_NV_framebuffer_multisample_coverage*: GLenum = 1
  GL_RENDERBUFFER_COVERAGE_SAMPLES_NV*: GLenum = 0x8CAB
  GL_RENDERBUFFER_COLOR_SAMPLES_NV*: GLenum = 0x8E10
  GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV*: GLenum = 0x8E11
  GL_MULTISAMPLE_COVERAGE_MODES_NV*: GLenum = 0x8E12
  GL_NV_generate_mipmap_sRGB*: GLenum = 1
  GL_NV_geometry_program4*: GLenum = 1
  GL_GEOMETRY_PROGRAM_NV*: GLenum = 0x8C26
  GL_MAX_PROGRAM_OUTPUT_VERTICES_NV*: GLenum = 0x8C27
  GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV*: GLenum = 0x8C28
  GL_NV_geometry_shader4*: GLenum = 1
  GL_NV_geometry_shader_passthrough*: GLenum = 1
  GL_NV_gpu_multicast*: GLenum = 1
  GL_PER_GPU_STORAGE_BIT_NV*: GLenum = 0x0800
  GL_MULTICAST_GPUS_NV*: GLenum = 0x92BA
  GL_PER_GPU_STORAGE_NV*: GLenum = 0x9548
  GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV*: GLenum = 0x9549
  GL_RENDER_GPU_MASK_NV*: GLenum = 0x9558
  GL_NV_gpu_program4*: GLenum = 1
  GL_MIN_PROGRAM_TEXEL_OFFSET_NV*: GLenum = 0x8904
  GL_MAX_PROGRAM_TEXEL_OFFSET_NV*: GLenum = 0x8905
  GL_PROGRAM_ATTRIB_COMPONENTS_NV*: GLenum = 0x8906
  GL_PROGRAM_RESULT_COMPONENTS_NV*: GLenum = 0x8907
  GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV*: GLenum = 0x8908
  GL_MAX_PROGRAM_RESULT_COMPONENTS_NV*: GLenum = 0x8909
  GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV*: GLenum = 0x8DA5
  GL_MAX_PROGRAM_GENERIC_RESULTS_NV*: GLenum = 0x8DA6
  GL_NV_gpu_program5*: GLenum = 1
  GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV*: GLenum = 0x8E5A
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV*: GLenum = 0x8E5B
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV*: GLenum = 0x8E5C
  GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV*: GLenum = 0x8E5D
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV*: GLenum = 0x8E5E
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV*: GLenum = 0x8E5F
  GL_NV_gpu_program5_mem_extended*: GLenum = 1
  GL_NV_gpu_program_fp64*: GLenum = 1
  GL_NV_gpu_shader5*: GLenum = 1
  GL_INT64_NV*: GLenum = 0x140E
  GL_UNSIGNED_INT64_NV*: GLenum = 0x140F
  GL_INT8_NV*: GLenum = 0x8FE0
  GL_INT8_VEC2_NV*: GLenum = 0x8FE1
  GL_INT8_VEC3_NV*: GLenum = 0x8FE2
  GL_INT8_VEC4_NV*: GLenum = 0x8FE3
  GL_INT16_NV*: GLenum = 0x8FE4
  GL_INT16_VEC2_NV*: GLenum = 0x8FE5
  GL_INT16_VEC3_NV*: GLenum = 0x8FE6
  GL_INT16_VEC4_NV*: GLenum = 0x8FE7
  GL_INT64_VEC2_NV*: GLenum = 0x8FE9
  GL_INT64_VEC3_NV*: GLenum = 0x8FEA
  GL_INT64_VEC4_NV*: GLenum = 0x8FEB
  GL_UNSIGNED_INT8_NV*: GLenum = 0x8FEC
  GL_UNSIGNED_INT8_VEC2_NV*: GLenum = 0x8FED
  GL_UNSIGNED_INT8_VEC3_NV*: GLenum = 0x8FEE
  GL_UNSIGNED_INT8_VEC4_NV*: GLenum = 0x8FEF
  GL_UNSIGNED_INT16_NV*: GLenum = 0x8FF0
  GL_UNSIGNED_INT16_VEC2_NV*: GLenum = 0x8FF1
  GL_UNSIGNED_INT16_VEC3_NV*: GLenum = 0x8FF2
  GL_UNSIGNED_INT16_VEC4_NV*: GLenum = 0x8FF3
  GL_UNSIGNED_INT64_VEC2_NV*: GLenum = 0x8FF5
  GL_UNSIGNED_INT64_VEC3_NV*: GLenum = 0x8FF6
  GL_UNSIGNED_INT64_VEC4_NV*: GLenum = 0x8FF7
  GL_NV_half_float*: GLenum = 1
  GL_HALF_FLOAT_NV*: GLenum = 0x140B
  GL_NV_image_formats*: GLenum = 1
  GL_NV_instanced_arrays*: GLenum = 1
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV*: GLenum = 0x88FE
  GL_NV_internalformat_sample_query*: GLenum = 1
  GL_MULTISAMPLES_NV*: GLenum = 0x9371
  GL_SUPERSAMPLE_SCALE_X_NV*: GLenum = 0x9372
  GL_SUPERSAMPLE_SCALE_Y_NV*: GLenum = 0x9373
  GL_CONFORMANT_NV*: GLenum = 0x9374
  GL_NV_light_max_exponent*: GLenum = 1
  GL_MAX_SHININESS_NV*: GLenum = 0x8504
  GL_MAX_SPOT_EXPONENT_NV*: GLenum = 0x8505
  GL_NV_multisample_coverage*: GLenum = 1
  GL_NV_multisample_filter_hint*: GLenum = 1
  GL_MULTISAMPLE_FILTER_HINT_NV*: GLenum = 0x8534
  GL_NV_non_square_matrices*: GLenum = 1
  GL_FLOAT_MAT2x3_NV*: GLenum = 0x8B65
  GL_FLOAT_MAT2x4_NV*: GLenum = 0x8B66
  GL_FLOAT_MAT3x2_NV*: GLenum = 0x8B67
  GL_FLOAT_MAT3x4_NV*: GLenum = 0x8B68
  GL_FLOAT_MAT4x2_NV*: GLenum = 0x8B69
  GL_FLOAT_MAT4x3_NV*: GLenum = 0x8B6A
  GL_NV_occlusion_query*: GLenum = 1
  GL_PIXEL_COUNTER_BITS_NV*: GLenum = 0x8864
  GL_CURRENT_OCCLUSION_QUERY_ID_NV*: GLenum = 0x8865
  GL_PIXEL_COUNT_NV*: GLenum = 0x8866
  GL_PIXEL_COUNT_AVAILABLE_NV*: GLenum = 0x8867
  GL_NV_pack_subimage*: GLenum = 1
  GL_PACK_ROW_LENGTH_NV*: GLenum = 0x0D02
  GL_PACK_SKIP_ROWS_NV*: GLenum = 0x0D03
  GL_PACK_SKIP_PIXELS_NV*: GLenum = 0x0D04
  GL_NV_packed_depth_stencil*: GLenum = 1
  GL_DEPTH_STENCIL_NV*: GLenum = 0x84F9
  GL_UNSIGNED_INT_24_8_NV*: GLenum = 0x84FA
  GL_NV_packed_float*: GLenum = 1
  GL_R11F_G11F_B10F_NV*: GLenum = 0x8C3A
  GL_UNSIGNED_INT_10F_11F_11F_REV_NV*: GLenum = 0x8C3B
  GL_NV_packed_float_linear*: GLenum = 1
  GL_NV_parameter_buffer_object*: GLenum = 1
  GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV*: GLenum = 0x8DA0
  GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV*: GLenum = 0x8DA1
  GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV*: GLenum = 0x8DA2
  GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV*: GLenum = 0x8DA3
  GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV*: GLenum = 0x8DA4
  GL_NV_parameter_buffer_object2*: GLenum = 1
  GL_NV_path_rendering*: GLenum = 1
  GL_CLOSE_PATH_NV*: GLenum = 0x00
  GL_BOLD_BIT_NV*: GLenum = 0x01
  GL_GLYPH_WIDTH_BIT_NV*: GLenum = 0x01
  GL_GLYPH_HEIGHT_BIT_NV*: GLenum = 0x02
  GL_ITALIC_BIT_NV*: GLenum = 0x02
  GL_MOVE_TO_NV*: GLenum = 0x02
  GL_RELATIVE_MOVE_TO_NV*: GLenum = 0x03
  GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV*: GLenum = 0x04
  GL_LINE_TO_NV*: GLenum = 0x04
  GL_RELATIVE_LINE_TO_NV*: GLenum = 0x05
  GL_HORIZONTAL_LINE_TO_NV*: GLenum = 0x06
  GL_RELATIVE_HORIZONTAL_LINE_TO_NV*: GLenum = 0x07
  GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV*: GLenum = 0x08
  GL_VERTICAL_LINE_TO_NV*: GLenum = 0x08
  GL_RELATIVE_VERTICAL_LINE_TO_NV*: GLenum = 0x09
  GL_QUADRATIC_CURVE_TO_NV*: GLenum = 0x0A
  GL_RELATIVE_QUADRATIC_CURVE_TO_NV*: GLenum = 0x0B
  GL_CUBIC_CURVE_TO_NV*: GLenum = 0x0C
  GL_RELATIVE_CUBIC_CURVE_TO_NV*: GLenum = 0x0D
  GL_SMOOTH_QUADRATIC_CURVE_TO_NV*: GLenum = 0x0E
  GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV*: GLenum = 0x0F
  GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV*: GLenum = 0x10
  GL_SMOOTH_CUBIC_CURVE_TO_NV*: GLenum = 0x10
  GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV*: GLenum = 0x11
  GL_SMALL_CCW_ARC_TO_NV*: GLenum = 0x12
  GL_RELATIVE_SMALL_CCW_ARC_TO_NV*: GLenum = 0x13
  GL_SMALL_CW_ARC_TO_NV*: GLenum = 0x14
  GL_RELATIVE_SMALL_CW_ARC_TO_NV*: GLenum = 0x15
  GL_LARGE_CCW_ARC_TO_NV*: GLenum = 0x16
  GL_RELATIVE_LARGE_CCW_ARC_TO_NV*: GLenum = 0x17
  GL_LARGE_CW_ARC_TO_NV*: GLenum = 0x18
  GL_RELATIVE_LARGE_CW_ARC_TO_NV*: GLenum = 0x19
  GL_CONIC_CURVE_TO_NV*: GLenum = 0x1A
  GL_RELATIVE_CONIC_CURVE_TO_NV*: GLenum = 0x1B
  GL_GLYPH_VERTICAL_BEARING_X_BIT_NV*: GLenum = 0x20
  GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV*: GLenum = 0x40
  GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV*: GLenum = 0x80
  GL_ROUNDED_RECT_NV*: GLenum = 0xE8
  GL_RELATIVE_ROUNDED_RECT_NV*: GLenum = 0xE9
  GL_ROUNDED_RECT2_NV*: GLenum = 0xEA
  GL_RELATIVE_ROUNDED_RECT2_NV*: GLenum = 0xEB
  GL_ROUNDED_RECT4_NV*: GLenum = 0xEC
  GL_RELATIVE_ROUNDED_RECT4_NV*: GLenum = 0xED
  GL_ROUNDED_RECT8_NV*: GLenum = 0xEE
  GL_RELATIVE_ROUNDED_RECT8_NV*: GLenum = 0xEF
  GL_RESTART_PATH_NV*: GLenum = 0xF0
  GL_DUP_FIRST_CUBIC_CURVE_TO_NV*: GLenum = 0xF2
  GL_DUP_LAST_CUBIC_CURVE_TO_NV*: GLenum = 0xF4
  GL_RECT_NV*: GLenum = 0xF6
  GL_RELATIVE_RECT_NV*: GLenum = 0xF7
  GL_CIRCULAR_CCW_ARC_TO_NV*: GLenum = 0xF8
  GL_CIRCULAR_CW_ARC_TO_NV*: GLenum = 0xFA
  GL_CIRCULAR_TANGENT_ARC_TO_NV*: GLenum = 0xFC
  GL_ARC_TO_NV*: GLenum = 0xFE
  GL_RELATIVE_ARC_TO_NV*: GLenum = 0xFF
  GL_GLYPH_HAS_KERNING_BIT_NV*: GLenum = 0x100
  GL_PRIMARY_COLOR_NV*: GLenum = 0x852C
  GL_SECONDARY_COLOR_NV*: GLenum = 0x852D
  GL_PATH_FORMAT_SVG_NV*: GLenum = 0x9070
  GL_PATH_FORMAT_PS_NV*: GLenum = 0x9071
  GL_STANDARD_FONT_NAME_NV*: GLenum = 0x9072
  GL_SYSTEM_FONT_NAME_NV*: GLenum = 0x9073
  GL_FILE_NAME_NV*: GLenum = 0x9074
  GL_PATH_STROKE_WIDTH_NV*: GLenum = 0x9075
  GL_PATH_END_CAPS_NV*: GLenum = 0x9076
  GL_PATH_INITIAL_END_CAP_NV*: GLenum = 0x9077
  GL_PATH_TERMINAL_END_CAP_NV*: GLenum = 0x9078
  GL_PATH_JOIN_STYLE_NV*: GLenum = 0x9079
  GL_PATH_MITER_LIMIT_NV*: GLenum = 0x907A
  GL_PATH_DASH_CAPS_NV*: GLenum = 0x907B
  GL_PATH_INITIAL_DASH_CAP_NV*: GLenum = 0x907C
  GL_PATH_TERMINAL_DASH_CAP_NV*: GLenum = 0x907D
  GL_PATH_DASH_OFFSET_NV*: GLenum = 0x907E
  GL_PATH_CLIENT_LENGTH_NV*: GLenum = 0x907F
  GL_PATH_FILL_MODE_NV*: GLenum = 0x9080
  GL_PATH_FILL_MASK_NV*: GLenum = 0x9081
  GL_PATH_FILL_COVER_MODE_NV*: GLenum = 0x9082
  GL_PATH_STROKE_COVER_MODE_NV*: GLenum = 0x9083
  GL_PATH_STROKE_MASK_NV*: GLenum = 0x9084
  GL_PATH_STROKE_BOUND_NV*: GLenum = 0x9086
  GL_COUNT_UP_NV*: GLenum = 0x9088
  GL_COUNT_DOWN_NV*: GLenum = 0x9089
  GL_PATH_OBJECT_BOUNDING_BOX_NV*: GLenum = 0x908A
  GL_CONVEX_HULL_NV*: GLenum = 0x908B
  GL_BOUNDING_BOX_NV*: GLenum = 0x908D
  GL_TRANSLATE_X_NV*: GLenum = 0x908E
  GL_TRANSLATE_Y_NV*: GLenum = 0x908F
  GL_TRANSLATE_2D_NV*: GLenum = 0x9090
  GL_TRANSLATE_3D_NV*: GLenum = 0x9091
  GL_AFFINE_2D_NV*: GLenum = 0x9092
  GL_AFFINE_3D_NV*: GLenum = 0x9094
  GL_TRANSPOSE_AFFINE_2D_NV*: GLenum = 0x9096
  GL_TRANSPOSE_AFFINE_3D_NV*: GLenum = 0x9098
  GL_UTF8_NV*: GLenum = 0x909A
  GL_UTF16_NV*: GLenum = 0x909B
  GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV*: GLenum = 0x909C
  GL_PATH_COMMAND_COUNT_NV*: GLenum = 0x909D
  GL_PATH_COORD_COUNT_NV*: GLenum = 0x909E
  GL_PATH_DASH_ARRAY_COUNT_NV*: GLenum = 0x909F
  GL_PATH_COMPUTED_LENGTH_NV*: GLenum = 0x90A0
  GL_PATH_FILL_BOUNDING_BOX_NV*: GLenum = 0x90A1
  GL_PATH_STROKE_BOUNDING_BOX_NV*: GLenum = 0x90A2
  GL_SQUARE_NV*: GLenum = 0x90A3
  GL_ROUND_NV*: GLenum = 0x90A4
  GL_TRIANGULAR_NV*: GLenum = 0x90A5
  GL_BEVEL_NV*: GLenum = 0x90A6
  GL_MITER_REVERT_NV*: GLenum = 0x90A7
  GL_MITER_TRUNCATE_NV*: GLenum = 0x90A8
  GL_SKIP_MISSING_GLYPH_NV*: GLenum = 0x90A9
  GL_USE_MISSING_GLYPH_NV*: GLenum = 0x90AA
  GL_PATH_ERROR_POSITION_NV*: GLenum = 0x90AB
  GL_PATH_FOG_GEN_MODE_NV*: GLenum = 0x90AC
  GL_ACCUM_ADJACENT_PAIRS_NV*: GLenum = 0x90AD
  GL_ADJACENT_PAIRS_NV*: GLenum = 0x90AE
  GL_FIRST_TO_REST_NV*: GLenum = 0x90AF
  GL_PATH_GEN_MODE_NV*: GLenum = 0x90B0
  GL_PATH_GEN_COEFF_NV*: GLenum = 0x90B1
  GL_PATH_GEN_COLOR_FORMAT_NV*: GLenum = 0x90B2
  GL_PATH_GEN_COMPONENTS_NV*: GLenum = 0x90B3
  GL_PATH_DASH_OFFSET_RESET_NV*: GLenum = 0x90B4
  GL_MOVE_TO_RESETS_NV*: GLenum = 0x90B5
  GL_MOVE_TO_CONTINUES_NV*: GLenum = 0x90B6
  GL_PATH_STENCIL_FUNC_NV*: GLenum = 0x90B7
  GL_PATH_STENCIL_REF_NV*: GLenum = 0x90B8
  GL_PATH_STENCIL_VALUE_MASK_NV*: GLenum = 0x90B9
  GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV*: GLenum = 0x90BD
  GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV*: GLenum = 0x90BE
  GL_PATH_COVER_DEPTH_FUNC_NV*: GLenum = 0x90BF
  GL_FONT_GLYPHS_AVAILABLE_NV*: GLenum = 0x9368
  GL_FONT_TARGET_UNAVAILABLE_NV*: GLenum = 0x9369
  GL_FONT_UNAVAILABLE_NV*: GLenum = 0x936A
  GL_FONT_UNINTELLIGIBLE_NV*: GLenum = 0x936B
  GL_STANDARD_FONT_FORMAT_NV*: GLenum = 0x936C
  GL_FRAGMENT_INPUT_NV*: GLenum = 0x936D
  GL_FONT_X_MIN_BOUNDS_BIT_NV*: GLenum = 0x00010000
  GL_FONT_Y_MIN_BOUNDS_BIT_NV*: GLenum = 0x00020000
  GL_FONT_X_MAX_BOUNDS_BIT_NV*: GLenum = 0x00040000
  GL_FONT_Y_MAX_BOUNDS_BIT_NV*: GLenum = 0x00080000
  GL_FONT_UNITS_PER_EM_BIT_NV*: GLenum64 = 0x00100000u
  GL_FONT_ASCENDER_BIT_NV*: GLenum64 = 0x00200000u
  GL_FONT_DESCENDER_BIT_NV*: GLenum64 = 0x00400000u
  GL_FONT_HEIGHT_BIT_NV*: GLenum64 = 0x00800000u
  GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV*: GLenum64 = 0x01000000u
  GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV*: GLenum64 = 0x02000000u
  GL_FONT_UNDERLINE_POSITION_BIT_NV*: GLenum64 = 0x04000000u
  GL_FONT_UNDERLINE_THICKNESS_BIT_NV*: GLenum64 = 0x08000000u
  GL_FONT_HAS_KERNING_BIT_NV*: GLenum64 = 0x10000000u
  GL_FONT_NUM_GLYPH_INDICES_BIT_NV*: GLenum64 = 0x20000000u
  GL_NV_path_rendering_shared_edge*: GLenum = 1
  GL_SHARED_EDGE_NV*: GLenum = 0xC0
  GL_NV_pixel_buffer_object*: GLenum = 1
  GL_PIXEL_PACK_BUFFER_NV*: GLenum = 0x88EB
  GL_PIXEL_UNPACK_BUFFER_NV*: GLenum = 0x88EC
  GL_PIXEL_PACK_BUFFER_BINDING_NV*: GLenum = 0x88ED
  GL_PIXEL_UNPACK_BUFFER_BINDING_NV*: GLenum = 0x88EF
  GL_NV_pixel_data_range*: GLenum = 1
  GL_WRITE_PIXEL_DATA_RANGE_NV*: GLenum = 0x8878
  GL_READ_PIXEL_DATA_RANGE_NV*: GLenum = 0x8879
  GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV*: GLenum = 0x887A
  GL_READ_PIXEL_DATA_RANGE_LENGTH_NV*: GLenum = 0x887B
  GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV*: GLenum = 0x887C
  GL_READ_PIXEL_DATA_RANGE_POINTER_NV*: GLenum = 0x887D
  GL_NV_platform_binary*: GLenum = 1
  GL_NVIDIA_PLATFORM_BINARY_NV*: GLenum = 0x890B
  GL_NV_point_sprite*: GLenum = 1
  GL_POINT_SPRITE_NV*: GLenum = 0x8861
  GL_COORD_REPLACE_NV*: GLenum = 0x8862
  GL_POINT_SPRITE_R_MODE_NV*: GLenum = 0x8863
  GL_NV_polygon_mode*: GLenum = 1
  GL_POLYGON_MODE_NV*: GLenum = 0x0B40
  GL_POINT_NV*: GLenum = 0x1B00
  GL_LINE_NV*: GLenum = 0x1B01
  GL_FILL_NV*: GLenum = 0x1B02
  GL_POLYGON_OFFSET_POINT_NV*: GLenum = 0x2A01
  GL_POLYGON_OFFSET_LINE_NV*: GLenum = 0x2A02
  GL_NV_present_video*: GLenum = 1
  GL_FRAME_NV*: GLenum = 0x8E26
  GL_FIELDS_NV*: GLenum = 0x8E27
  GL_CURRENT_TIME_NV*: GLenum = 0x8E28
  GL_NUM_FILL_STREAMS_NV*: GLenum = 0x8E29
  GL_PRESENT_TIME_NV*: GLenum = 0x8E2A
  GL_PRESENT_DURATION_NV*: GLenum = 0x8E2B
  GL_NV_primitive_restart*: GLenum = 1
  GL_PRIMITIVE_RESTART_NV*: GLenum = 0x8558
  GL_PRIMITIVE_RESTART_INDEX_NV*: GLenum = 0x8559
  GL_NV_read_depth*: GLenum = 1
  GL_NV_read_depth_stencil*: GLenum = 1
  GL_NV_read_stencil*: GLenum = 1
  GL_NV_register_combiners*: GLenum = 1
  GL_REGISTER_COMBINERS_NV*: GLenum = 0x8522
  GL_VARIABLE_A_NV*: GLenum = 0x8523
  GL_VARIABLE_B_NV*: GLenum = 0x8524
  GL_VARIABLE_C_NV*: GLenum = 0x8525
  GL_VARIABLE_D_NV*: GLenum = 0x8526
  GL_VARIABLE_E_NV*: GLenum = 0x8527
  GL_VARIABLE_F_NV*: GLenum = 0x8528
  GL_VARIABLE_G_NV*: GLenum = 0x8529
  GL_CONSTANT_COLOR0_NV*: GLenum = 0x852A
  GL_CONSTANT_COLOR1_NV*: GLenum = 0x852B
  GL_SPARE0_NV*: GLenum = 0x852E
  GL_SPARE1_NV*: GLenum = 0x852F
  GL_DISCARD_NV*: GLenum = 0x8530
  GL_E_TIMES_F_NV*: GLenum = 0x8531
  GL_SPARE0_PLUS_SECONDARY_COLOR_NV*: GLenum = 0x8532
  GL_UNSIGNED_IDENTITY_NV*: GLenum = 0x8536
  GL_UNSIGNED_INVERT_NV*: GLenum = 0x8537
  GL_EXPAND_NORMAL_NV*: GLenum = 0x8538
  GL_EXPAND_NEGATE_NV*: GLenum = 0x8539
  GL_HALF_BIAS_NORMAL_NV*: GLenum = 0x853A
  GL_HALF_BIAS_NEGATE_NV*: GLenum = 0x853B
  GL_SIGNED_IDENTITY_NV*: GLenum = 0x853C
  GL_SIGNED_NEGATE_NV*: GLenum = 0x853D
  GL_SCALE_BY_TWO_NV*: GLenum = 0x853E
  GL_SCALE_BY_FOUR_NV*: GLenum = 0x853F
  GL_SCALE_BY_ONE_HALF_NV*: GLenum = 0x8540
  GL_BIAS_BY_NEGATIVE_ONE_HALF_NV*: GLenum = 0x8541
  GL_COMBINER_INPUT_NV*: GLenum = 0x8542
  GL_COMBINER_MAPPING_NV*: GLenum = 0x8543
  GL_COMBINER_COMPONENT_USAGE_NV*: GLenum = 0x8544
  GL_COMBINER_AB_DOT_PRODUCT_NV*: GLenum = 0x8545
  GL_COMBINER_CD_DOT_PRODUCT_NV*: GLenum = 0x8546
  GL_COMBINER_MUX_SUM_NV*: GLenum = 0x8547
  GL_COMBINER_SCALE_NV*: GLenum = 0x8548
  GL_COMBINER_BIAS_NV*: GLenum = 0x8549
  GL_COMBINER_AB_OUTPUT_NV*: GLenum = 0x854A
  GL_COMBINER_CD_OUTPUT_NV*: GLenum = 0x854B
  GL_COMBINER_SUM_OUTPUT_NV*: GLenum = 0x854C
  GL_MAX_GENERAL_COMBINERS_NV*: GLenum = 0x854D
  GL_NUM_GENERAL_COMBINERS_NV*: GLenum = 0x854E
  GL_COLOR_SUM_CLAMP_NV*: GLenum = 0x854F
  GL_COMBINER0_NV*: GLenum = 0x8550
  GL_COMBINER1_NV*: GLenum = 0x8551
  GL_COMBINER2_NV*: GLenum = 0x8552
  GL_COMBINER3_NV*: GLenum = 0x8553
  GL_COMBINER4_NV*: GLenum = 0x8554
  GL_COMBINER5_NV*: GLenum = 0x8555
  GL_COMBINER6_NV*: GLenum = 0x8556
  GL_COMBINER7_NV*: GLenum = 0x8557
  GL_NV_register_combiners2*: GLenum = 1
  GL_PER_STAGE_CONSTANTS_NV*: GLenum = 0x8535
  GL_NV_robustness_video_memory_purge*: GLenum = 1
  GL_NV_sRGB_formats*: GLenum = 1
  GL_ETC1_SRGB8_NV*: GLenum = 0x88EE
  GL_SRGB8_NV*: GLenum = 0x8C41
  GL_SLUMINANCE_ALPHA_NV*: GLenum = 0x8C44
  GL_SLUMINANCE8_ALPHA8_NV*: GLenum = 0x8C45
  GL_SLUMINANCE_NV*: GLenum = 0x8C46
  GL_SLUMINANCE8_NV*: GLenum = 0x8C47
  GL_COMPRESSED_SRGB_S3TC_DXT1_NV*: GLenum = 0x8C4C
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV*: GLenum = 0x8C4D
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV*: GLenum = 0x8C4E
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV*: GLenum = 0x8C4F
  GL_NV_sample_locations*: GLenum = 1
  GL_SAMPLE_LOCATION_NV*: GLenum = 0x8E50
  GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV*: GLenum = 0x933D
  GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV*: GLenum = 0x933E
  GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV*: GLenum = 0x933F
  GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV*: GLenum = 0x9340
  GL_PROGRAMMABLE_SAMPLE_LOCATION_NV*: GLenum = 0x9341
  GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV*: GLenum = 0x9342
  GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV*: GLenum = 0x9343
  GL_NV_sample_mask_override_coverage*: GLenum = 1
  GL_NV_shader_atomic_counters*: GLenum = 1
  GL_NV_shader_atomic_float*: GLenum = 1
  GL_NV_shader_atomic_float64*: GLenum = 1
  GL_NV_shader_atomic_fp16_vector*: GLenum = 1
  GL_NV_shader_atomic_int64*: GLenum = 1
  GL_NV_shader_buffer_load*: GLenum = 1
  GL_BUFFER_GPU_ADDRESS_NV*: GLenum = 0x8F1D
  GL_GPU_ADDRESS_NV*: GLenum = 0x8F34
  GL_MAX_SHADER_BUFFER_ADDRESS_NV*: GLenum = 0x8F35
  GL_NV_shader_noperspective_interpolation*: GLenum = 1
  GL_NV_shader_storage_buffer_object*: GLenum = 1
  GL_NV_shader_thread_group*: GLenum = 1
  GL_WARP_SIZE_NV*: GLenum = 0x9339
  GL_WARPS_PER_SM_NV*: GLenum = 0x933A
  GL_SM_COUNT_NV*: GLenum = 0x933B
  GL_NV_shader_thread_shuffle*: GLenum = 1
  GL_NV_shadow_samplers_array*: GLenum = 1
  GL_SAMPLER_2D_ARRAY_SHADOW_NV*: GLenum = 0x8DC4
  GL_NV_shadow_samplers_cube*: GLenum = 1
  GL_SAMPLER_CUBE_SHADOW_NV*: GLenum = 0x8DC5
  GL_NV_stereo_view_rendering*: GLenum = 1
  GL_NV_tessellation_program5*: GLenum = 1
  GL_MAX_PROGRAM_PATCH_ATTRIBS_NV*: GLenum = 0x86D8
  GL_TESS_CONTROL_PROGRAM_NV*: GLenum = 0x891E
  GL_TESS_EVALUATION_PROGRAM_NV*: GLenum = 0x891F
  GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV*: GLenum = 0x8C74
  GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV*: GLenum = 0x8C75
  GL_NV_texgen_emboss*: GLenum = 1
  GL_EMBOSS_LIGHT_NV*: GLenum = 0x855D
  GL_EMBOSS_CONSTANT_NV*: GLenum = 0x855E
  GL_EMBOSS_MAP_NV*: GLenum = 0x855F
  GL_NV_texgen_reflection*: GLenum = 1
  GL_NORMAL_MAP_NV*: GLenum = 0x8511
  GL_REFLECTION_MAP_NV*: GLenum = 0x8512
  GL_NV_texture_array*: GLenum = 1
  GL_UNPACK_SKIP_IMAGES_NV*: GLenum = 0x806D
  GL_UNPACK_IMAGE_HEIGHT_NV*: GLenum = 0x806E
  GL_MAX_ARRAY_TEXTURE_LAYERS_NV*: GLenum = 0x88FF
  GL_TEXTURE_2D_ARRAY_NV*: GLenum = 0x8C1A
  GL_TEXTURE_BINDING_2D_ARRAY_NV*: GLenum = 0x8C1D
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_NV*: GLenum = 0x8CD4
  GL_SAMPLER_2D_ARRAY_NV*: GLenum = 0x8DC1
  GL_NV_texture_barrier*: GLenum = 1
  GL_NV_texture_border_clamp*: GLenum = 1
  GL_TEXTURE_BORDER_COLOR_NV*: GLenum = 0x1004
  GL_CLAMP_TO_BORDER_NV*: GLenum = 0x812D
  GL_NV_texture_compression_latc*: GLenum = 1
  GL_COMPRESSED_LUMINANCE_LATC1_NV*: GLenum = 0x8C70
  GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_NV*: GLenum = 0x8C71
  GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_NV*: GLenum = 0x8C72
  GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_NV*: GLenum = 0x8C73
  GL_NV_texture_compression_s3tc*: GLenum = 1
  GL_COMPRESSED_RGB_S3TC_DXT1_NV*: GLenum = 0x83F0
  GL_COMPRESSED_RGBA_S3TC_DXT1_NV*: GLenum = 0x83F1
  GL_COMPRESSED_RGBA_S3TC_DXT3_NV*: GLenum = 0x83F2
  GL_COMPRESSED_RGBA_S3TC_DXT5_NV*: GLenum = 0x83F3
  GL_NV_texture_compression_s3tc_update*: GLenum = 1
  GL_NV_texture_compression_vtc*: GLenum = 1
  GL_NV_texture_env_combine4*: GLenum = 1
  GL_COMBINE4_NV*: GLenum = 0x8503
  GL_SOURCE3_RGB_NV*: GLenum = 0x8583
  GL_SOURCE3_ALPHA_NV*: GLenum = 0x858B
  GL_OPERAND3_RGB_NV*: GLenum = 0x8593
  GL_OPERAND3_ALPHA_NV*: GLenum = 0x859B
  GL_NV_texture_expand_normal*: GLenum = 1
  GL_TEXTURE_UNSIGNED_REMAP_MODE_NV*: GLenum = 0x888F
  GL_NV_texture_multisample*: GLenum = 1
  GL_TEXTURE_COVERAGE_SAMPLES_NV*: GLenum = 0x9045
  GL_TEXTURE_COLOR_SAMPLES_NV*: GLenum = 0x9046
  GL_NV_texture_npot_2D_mipmap*: GLenum = 1
  GL_NV_texture_rectangle*: GLenum = 1
  GL_TEXTURE_RECTANGLE_NV*: GLenum = 0x84F5
  GL_TEXTURE_BINDING_RECTANGLE_NV*: GLenum = 0x84F6
  GL_PROXY_TEXTURE_RECTANGLE_NV*: GLenum = 0x84F7
  GL_MAX_RECTANGLE_TEXTURE_SIZE_NV*: GLenum = 0x84F8
  GL_NV_texture_rectangle_compressed*: GLenum = 1
  GL_NV_texture_shader*: GLenum = 1
  GL_OFFSET_TEXTURE_RECTANGLE_NV*: GLenum = 0x864C
  GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV*: GLenum = 0x864D
  GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV*: GLenum = 0x864E
  GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV*: GLenum = 0x86D9
  GL_UNSIGNED_INT_S8_S8_8_8_NV*: GLenum = 0x86DA
  GL_UNSIGNED_INT_8_8_S8_S8_REV_NV*: GLenum = 0x86DB
  GL_DSDT_MAG_INTENSITY_NV*: GLenum = 0x86DC
  GL_SHADER_CONSISTENT_NV*: GLenum = 0x86DD
  GL_TEXTURE_SHADER_NV*: GLenum = 0x86DE
  GL_SHADER_OPERATION_NV*: GLenum = 0x86DF
  GL_CULL_MODES_NV*: GLenum = 0x86E0
  GL_OFFSET_TEXTURE_2D_MATRIX_NV*: GLenum = 0x86E1
  GL_OFFSET_TEXTURE_MATRIX_NV*: GLenum = 0x86E1
  GL_OFFSET_TEXTURE_2D_SCALE_NV*: GLenum = 0x86E2
  GL_OFFSET_TEXTURE_SCALE_NV*: GLenum = 0x86E2
  GL_OFFSET_TEXTURE_2D_BIAS_NV*: GLenum = 0x86E3
  GL_OFFSET_TEXTURE_BIAS_NV*: GLenum = 0x86E3
  GL_PREVIOUS_TEXTURE_INPUT_NV*: GLenum = 0x86E4
  GL_CONST_EYE_NV*: GLenum = 0x86E5
  GL_PASS_THROUGH_NV*: GLenum = 0x86E6
  GL_CULL_FRAGMENT_NV*: GLenum = 0x86E7
  GL_OFFSET_TEXTURE_2D_NV*: GLenum = 0x86E8
  GL_DEPENDENT_AR_TEXTURE_2D_NV*: GLenum = 0x86E9
  GL_DEPENDENT_GB_TEXTURE_2D_NV*: GLenum = 0x86EA
  GL_DOT_PRODUCT_NV*: GLenum = 0x86EC
  GL_DOT_PRODUCT_DEPTH_REPLACE_NV*: GLenum = 0x86ED
  GL_DOT_PRODUCT_TEXTURE_2D_NV*: GLenum = 0x86EE
  GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV*: GLenum = 0x86F0
  GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV*: GLenum = 0x86F1
  GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV*: GLenum = 0x86F2
  GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV*: GLenum = 0x86F3
  GL_HILO_NV*: GLenum = 0x86F4
  GL_DSDT_NV*: GLenum = 0x86F5
  GL_DSDT_MAG_NV*: GLenum = 0x86F6
  GL_DSDT_MAG_VIB_NV*: GLenum = 0x86F7
  GL_HILO16_NV*: GLenum = 0x86F8
  GL_SIGNED_HILO_NV*: GLenum = 0x86F9
  GL_SIGNED_HILO16_NV*: GLenum = 0x86FA
  GL_SIGNED_RGBA_NV*: GLenum = 0x86FB
  GL_SIGNED_RGBA8_NV*: GLenum = 0x86FC
  GL_SIGNED_RGB_NV*: GLenum = 0x86FE
  GL_SIGNED_RGB8_NV*: GLenum = 0x86FF
  GL_SIGNED_LUMINANCE_NV*: GLenum = 0x8701
  GL_SIGNED_LUMINANCE8_NV*: GLenum = 0x8702
  GL_SIGNED_LUMINANCE_ALPHA_NV*: GLenum = 0x8703
  GL_SIGNED_LUMINANCE8_ALPHA8_NV*: GLenum = 0x8704
  GL_SIGNED_ALPHA_NV*: GLenum = 0x8705
  GL_SIGNED_ALPHA8_NV*: GLenum = 0x8706
  GL_SIGNED_INTENSITY_NV*: GLenum = 0x8707
  GL_SIGNED_INTENSITY8_NV*: GLenum = 0x8708
  GL_DSDT8_NV*: GLenum = 0x8709
  GL_DSDT8_MAG8_NV*: GLenum = 0x870A
  GL_DSDT8_MAG8_INTENSITY8_NV*: GLenum = 0x870B
  GL_SIGNED_RGB_UNSIGNED_ALPHA_NV*: GLenum = 0x870C
  GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV*: GLenum = 0x870D
  GL_HI_SCALE_NV*: GLenum = 0x870E
  GL_LO_SCALE_NV*: GLenum = 0x870F
  GL_DS_SCALE_NV*: GLenum = 0x8710
  GL_DT_SCALE_NV*: GLenum = 0x8711
  GL_MAGNITUDE_SCALE_NV*: GLenum = 0x8712
  GL_VIBRANCE_SCALE_NV*: GLenum = 0x8713
  GL_HI_BIAS_NV*: GLenum = 0x8714
  GL_LO_BIAS_NV*: GLenum = 0x8715
  GL_DS_BIAS_NV*: GLenum = 0x8716
  GL_DT_BIAS_NV*: GLenum = 0x8717
  GL_MAGNITUDE_BIAS_NV*: GLenum = 0x8718
  GL_VIBRANCE_BIAS_NV*: GLenum = 0x8719
  GL_TEXTURE_BORDER_VALUES_NV*: GLenum = 0x871A
  GL_TEXTURE_HI_SIZE_NV*: GLenum = 0x871B
  GL_TEXTURE_LO_SIZE_NV*: GLenum = 0x871C
  GL_TEXTURE_DS_SIZE_NV*: GLenum = 0x871D
  GL_TEXTURE_DT_SIZE_NV*: GLenum = 0x871E
  GL_TEXTURE_MAG_SIZE_NV*: GLenum = 0x871F
  GL_NV_texture_shader2*: GLenum = 1
  GL_DOT_PRODUCT_TEXTURE_3D_NV*: GLenum = 0x86EF
  GL_NV_texture_shader3*: GLenum = 1
  GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV*: GLenum = 0x8850
  GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV*: GLenum = 0x8851
  GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV*: GLenum = 0x8852
  GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV*: GLenum = 0x8853
  GL_OFFSET_HILO_TEXTURE_2D_NV*: GLenum = 0x8854
  GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV*: GLenum = 0x8855
  GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV*: GLenum = 0x8856
  GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV*: GLenum = 0x8857
  GL_DEPENDENT_HILO_TEXTURE_2D_NV*: GLenum = 0x8858
  GL_DEPENDENT_RGB_TEXTURE_3D_NV*: GLenum = 0x8859
  GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV*: GLenum = 0x885A
  GL_DOT_PRODUCT_PASS_THROUGH_NV*: GLenum = 0x885B
  GL_DOT_PRODUCT_TEXTURE_1D_NV*: GLenum = 0x885C
  GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV*: GLenum = 0x885D
  GL_HILO8_NV*: GLenum = 0x885E
  GL_SIGNED_HILO8_NV*: GLenum = 0x885F
  GL_FORCE_BLUE_TO_ONE_NV*: GLenum = 0x8860
  GL_NV_transform_feedback*: GLenum = 1
  GL_BACK_PRIMARY_COLOR_NV*: GLenum = 0x8C77
  GL_BACK_SECONDARY_COLOR_NV*: GLenum = 0x8C78
  GL_TEXTURE_COORD_NV*: GLenum = 0x8C79
  GL_CLIP_DISTANCE_NV*: GLenum = 0x8C7A
  GL_VERTEX_ID_NV*: GLenum = 0x8C7B
  GL_PRIMITIVE_ID_NV*: GLenum = 0x8C7C
  GL_GENERIC_ATTRIB_NV*: GLenum = 0x8C7D
  GL_TRANSFORM_FEEDBACK_ATTRIBS_NV*: GLenum = 0x8C7E
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV*: GLenum = 0x8C7F
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV*: GLenum = 0x8C80
  GL_ACTIVE_VARYINGS_NV*: GLenum = 0x8C81
  GL_ACTIVE_VARYING_MAX_LENGTH_NV*: GLenum = 0x8C82
  GL_TRANSFORM_FEEDBACK_VARYINGS_NV*: GLenum = 0x8C83
  GL_TRANSFORM_FEEDBACK_BUFFER_START_NV*: GLenum = 0x8C84
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV*: GLenum = 0x8C85
  GL_TRANSFORM_FEEDBACK_RECORD_NV*: GLenum = 0x8C86
  GL_PRIMITIVES_GENERATED_NV*: GLenum = 0x8C87
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV*: GLenum = 0x8C88
  GL_RASTERIZER_DISCARD_NV*: GLenum = 0x8C89
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV*: GLenum = 0x8C8A
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV*: GLenum = 0x8C8B
  GL_INTERLEAVED_ATTRIBS_NV*: GLenum = 0x8C8C
  GL_SEPARATE_ATTRIBS_NV*: GLenum = 0x8C8D
  GL_TRANSFORM_FEEDBACK_BUFFER_NV*: GLenum = 0x8C8E
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV*: GLenum = 0x8C8F
  GL_NV_transform_feedback2*: GLenum = 1
  GL_TRANSFORM_FEEDBACK_NV*: GLenum = 0x8E22
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV*: GLenum = 0x8E23
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV*: GLenum = 0x8E24
  GL_TRANSFORM_FEEDBACK_BINDING_NV*: GLenum = 0x8E25
  GL_NV_uniform_buffer_unified_memory*: GLenum = 1
  GL_UNIFORM_BUFFER_UNIFIED_NV*: GLenum = 0x936E
  GL_UNIFORM_BUFFER_ADDRESS_NV*: GLenum = 0x936F
  GL_UNIFORM_BUFFER_LENGTH_NV*: GLenum = 0x9370
  GL_NV_vdpau_interop*: GLenum = 1
  GL_SURFACE_STATE_NV*: GLenum = 0x86EB
  GL_SURFACE_REGISTERED_NV*: GLenum = 0x86FD
  GL_SURFACE_MAPPED_NV*: GLenum = 0x8700
  GL_WRITE_DISCARD_NV*: GLenum = 0x88BE
  GL_NV_vertex_array_range*: GLenum = 1
  GL_VERTEX_ARRAY_RANGE_NV*: GLenum = 0x851D
  GL_VERTEX_ARRAY_RANGE_LENGTH_NV*: GLenum = 0x851E
  GL_VERTEX_ARRAY_RANGE_VALID_NV*: GLenum = 0x851F
  GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV*: GLenum = 0x8520
  GL_VERTEX_ARRAY_RANGE_POINTER_NV*: GLenum = 0x8521
  GL_NV_vertex_array_range2*: GLenum = 1
  GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV*: GLenum = 0x8533
  GL_NV_vertex_attrib_integer_64bit*: GLenum = 1
  GL_NV_vertex_buffer_unified_memory*: GLenum = 1
  GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV*: GLenum = 0x8F1E
  GL_ELEMENT_ARRAY_UNIFIED_NV*: GLenum = 0x8F1F
  GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV*: GLenum = 0x8F20
  GL_VERTEX_ARRAY_ADDRESS_NV*: GLenum = 0x8F21
  GL_NORMAL_ARRAY_ADDRESS_NV*: GLenum = 0x8F22
  GL_COLOR_ARRAY_ADDRESS_NV*: GLenum = 0x8F23
  GL_INDEX_ARRAY_ADDRESS_NV*: GLenum = 0x8F24
  GL_TEXTURE_COORD_ARRAY_ADDRESS_NV*: GLenum = 0x8F25
  GL_EDGE_FLAG_ARRAY_ADDRESS_NV*: GLenum = 0x8F26
  GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV*: GLenum = 0x8F27
  GL_FOG_COORD_ARRAY_ADDRESS_NV*: GLenum = 0x8F28
  GL_ELEMENT_ARRAY_ADDRESS_NV*: GLenum = 0x8F29
  GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV*: GLenum = 0x8F2A
  GL_VERTEX_ARRAY_LENGTH_NV*: GLenum = 0x8F2B
  GL_NORMAL_ARRAY_LENGTH_NV*: GLenum = 0x8F2C
  GL_COLOR_ARRAY_LENGTH_NV*: GLenum = 0x8F2D
  GL_INDEX_ARRAY_LENGTH_NV*: GLenum = 0x8F2E
  GL_TEXTURE_COORD_ARRAY_LENGTH_NV*: GLenum = 0x8F2F
  GL_EDGE_FLAG_ARRAY_LENGTH_NV*: GLenum = 0x8F30
  GL_SECONDARY_COLOR_ARRAY_LENGTH_NV*: GLenum = 0x8F31
  GL_FOG_COORD_ARRAY_LENGTH_NV*: GLenum = 0x8F32
  GL_ELEMENT_ARRAY_LENGTH_NV*: GLenum = 0x8F33
  GL_DRAW_INDIRECT_UNIFIED_NV*: GLenum = 0x8F40
  GL_DRAW_INDIRECT_ADDRESS_NV*: GLenum = 0x8F41
  GL_DRAW_INDIRECT_LENGTH_NV*: GLenum = 0x8F42
  GL_NV_vertex_program*: GLenum = 1
  GL_VERTEX_PROGRAM_NV*: GLenum = 0x8620
  GL_VERTEX_STATE_PROGRAM_NV*: GLenum = 0x8621
  GL_ATTRIB_ARRAY_SIZE_NV*: GLenum = 0x8623
  GL_ATTRIB_ARRAY_STRIDE_NV*: GLenum = 0x8624
  GL_ATTRIB_ARRAY_TYPE_NV*: GLenum = 0x8625
  GL_CURRENT_ATTRIB_NV*: GLenum = 0x8626
  GL_PROGRAM_LENGTH_NV*: GLenum = 0x8627
  GL_PROGRAM_STRING_NV*: GLenum = 0x8628
  GL_MODELVIEW_PROJECTION_NV*: GLenum = 0x8629
  GL_IDENTITY_NV*: GLenum = 0x862A
  GL_INVERSE_NV*: GLenum = 0x862B
  GL_TRANSPOSE_NV*: GLenum = 0x862C
  GL_INVERSE_TRANSPOSE_NV*: GLenum = 0x862D
  GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV*: GLenum = 0x862E
  GL_MAX_TRACK_MATRICES_NV*: GLenum = 0x862F
  GL_MATRIX0_NV*: GLenum = 0x8630
  GL_MATRIX1_NV*: GLenum = 0x8631
  GL_MATRIX2_NV*: GLenum = 0x8632
  GL_MATRIX3_NV*: GLenum = 0x8633
  GL_MATRIX4_NV*: GLenum = 0x8634
  GL_MATRIX5_NV*: GLenum = 0x8635
  GL_MATRIX6_NV*: GLenum = 0x8636
  GL_MATRIX7_NV*: GLenum = 0x8637
  GL_CURRENT_MATRIX_STACK_DEPTH_NV*: GLenum = 0x8640
  GL_CURRENT_MATRIX_NV*: GLenum = 0x8641
  GL_VERTEX_PROGRAM_POINT_SIZE_NV*: GLenum = 0x8642
  GL_VERTEX_PROGRAM_TWO_SIDE_NV*: GLenum = 0x8643
  GL_PROGRAM_PARAMETER_NV*: GLenum = 0x8644
  GL_ATTRIB_ARRAY_POINTER_NV*: GLenum = 0x8645
  GL_PROGRAM_TARGET_NV*: GLenum = 0x8646
  GL_PROGRAM_RESIDENT_NV*: GLenum = 0x8647
  GL_TRACK_MATRIX_NV*: GLenum = 0x8648
  GL_TRACK_MATRIX_TRANSFORM_NV*: GLenum = 0x8649
  GL_VERTEX_PROGRAM_BINDING_NV*: GLenum = 0x864A
  GL_PROGRAM_ERROR_POSITION_NV*: GLenum = 0x864B
  GL_VERTEX_ATTRIB_ARRAY0_NV*: GLenum = 0x8650
  GL_VERTEX_ATTRIB_ARRAY1_NV*: GLenum = 0x8651
  GL_VERTEX_ATTRIB_ARRAY2_NV*: GLenum = 0x8652
  GL_VERTEX_ATTRIB_ARRAY3_NV*: GLenum = 0x8653
  GL_VERTEX_ATTRIB_ARRAY4_NV*: GLenum = 0x8654
  GL_VERTEX_ATTRIB_ARRAY5_NV*: GLenum = 0x8655
  GL_VERTEX_ATTRIB_ARRAY6_NV*: GLenum = 0x8656
  GL_VERTEX_ATTRIB_ARRAY7_NV*: GLenum = 0x8657
  GL_VERTEX_ATTRIB_ARRAY8_NV*: GLenum = 0x8658
  GL_VERTEX_ATTRIB_ARRAY9_NV*: GLenum = 0x8659
  GL_VERTEX_ATTRIB_ARRAY10_NV*: GLenum = 0x865A
  GL_VERTEX_ATTRIB_ARRAY11_NV*: GLenum = 0x865B
  GL_VERTEX_ATTRIB_ARRAY12_NV*: GLenum = 0x865C
  GL_VERTEX_ATTRIB_ARRAY13_NV*: GLenum = 0x865D
  GL_VERTEX_ATTRIB_ARRAY14_NV*: GLenum = 0x865E
  GL_VERTEX_ATTRIB_ARRAY15_NV*: GLenum = 0x865F
  GL_MAP1_VERTEX_ATTRIB0_4_NV*: GLenum = 0x8660
  GL_MAP1_VERTEX_ATTRIB1_4_NV*: GLenum = 0x8661
  GL_MAP1_VERTEX_ATTRIB2_4_NV*: GLenum = 0x8662
  GL_MAP1_VERTEX_ATTRIB3_4_NV*: GLenum = 0x8663
  GL_MAP1_VERTEX_ATTRIB4_4_NV*: GLenum = 0x8664
  GL_MAP1_VERTEX_ATTRIB5_4_NV*: GLenum = 0x8665
  GL_MAP1_VERTEX_ATTRIB6_4_NV*: GLenum = 0x8666
  GL_MAP1_VERTEX_ATTRIB7_4_NV*: GLenum = 0x8667
  GL_MAP1_VERTEX_ATTRIB8_4_NV*: GLenum = 0x8668
  GL_MAP1_VERTEX_ATTRIB9_4_NV*: GLenum = 0x8669
  GL_MAP1_VERTEX_ATTRIB10_4_NV*: GLenum = 0x866A
  GL_MAP1_VERTEX_ATTRIB11_4_NV*: GLenum = 0x866B
  GL_MAP1_VERTEX_ATTRIB12_4_NV*: GLenum = 0x866C
  GL_MAP1_VERTEX_ATTRIB13_4_NV*: GLenum = 0x866D
  GL_MAP1_VERTEX_ATTRIB14_4_NV*: GLenum = 0x866E
  GL_MAP1_VERTEX_ATTRIB15_4_NV*: GLenum = 0x866F
  GL_MAP2_VERTEX_ATTRIB0_4_NV*: GLenum = 0x8670
  GL_MAP2_VERTEX_ATTRIB1_4_NV*: GLenum = 0x8671
  GL_MAP2_VERTEX_ATTRIB2_4_NV*: GLenum = 0x8672
  GL_MAP2_VERTEX_ATTRIB3_4_NV*: GLenum = 0x8673
  GL_MAP2_VERTEX_ATTRIB4_4_NV*: GLenum = 0x8674
  GL_MAP2_VERTEX_ATTRIB5_4_NV*: GLenum = 0x8675
  GL_MAP2_VERTEX_ATTRIB6_4_NV*: GLenum = 0x8676
  GL_MAP2_VERTEX_ATTRIB7_4_NV*: GLenum = 0x8677
  GL_MAP2_VERTEX_ATTRIB8_4_NV*: GLenum = 0x8678
  GL_MAP2_VERTEX_ATTRIB9_4_NV*: GLenum = 0x8679
  GL_MAP2_VERTEX_ATTRIB10_4_NV*: GLenum = 0x867A
  GL_MAP2_VERTEX_ATTRIB11_4_NV*: GLenum = 0x867B
  GL_MAP2_VERTEX_ATTRIB12_4_NV*: GLenum = 0x867C
  GL_MAP2_VERTEX_ATTRIB13_4_NV*: GLenum = 0x867D
  GL_MAP2_VERTEX_ATTRIB14_4_NV*: GLenum = 0x867E
  GL_MAP2_VERTEX_ATTRIB15_4_NV*: GLenum = 0x867F
  GL_NV_vertex_program1_1*: GLenum = 1
  GL_NV_vertex_program2*: GLenum = 1
  GL_NV_vertex_program2_option*: GLenum = 1
  GL_NV_vertex_program3*: GLenum = 1
  MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB*: GLenum = 0x8B4C
  GL_NV_vertex_program4*: GLenum = 1
  GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV*: GLenum = 0x88FD
  GL_NV_video_capture*: GLenum = 1
  GL_VIDEO_BUFFER_NV*: GLenum = 0x9020
  GL_VIDEO_BUFFER_BINDING_NV*: GLenum = 0x9021
  GL_FIELD_UPPER_NV*: GLenum = 0x9022
  GL_FIELD_LOWER_NV*: GLenum = 0x9023
  GL_NUM_VIDEO_CAPTURE_STREAMS_NV*: GLenum = 0x9024
  GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV*: GLenum = 0x9025
  GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV*: GLenum = 0x9026
  GL_LAST_VIDEO_CAPTURE_STATUS_NV*: GLenum = 0x9027
  GL_VIDEO_BUFFER_PITCH_NV*: GLenum = 0x9028
  GL_VIDEO_COLOR_CONVERSION_MATRIX_NV*: GLenum = 0x9029
  GL_VIDEO_COLOR_CONVERSION_MAX_NV*: GLenum = 0x902A
  GL_VIDEO_COLOR_CONVERSION_MIN_NV*: GLenum = 0x902B
  GL_VIDEO_COLOR_CONVERSION_OFFSET_NV*: GLenum = 0x902C
  GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV*: GLenum = 0x902D
  GL_PARTIAL_SUCCESS_NV*: GLenum = 0x902E
  GL_SUCCESS_NV*: GLenum = 0x902F
  GL_FAILURE_NV*: GLenum = 0x9030
  GL_YCBYCR8_422_NV*: GLenum = 0x9031
  GL_YCBAYCR8A_4224_NV*: GLenum = 0x9032
  GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV*: GLenum = 0x9033
  GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV*: GLenum = 0x9034
  GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV*: GLenum = 0x9035
  GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV*: GLenum = 0x9036
  GL_Z4Y12Z4CB12Z4CR12_444_NV*: GLenum = 0x9037
  GL_VIDEO_CAPTURE_FRAME_WIDTH_NV*: GLenum = 0x9038
  GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV*: GLenum = 0x9039
  GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV*: GLenum = 0x903A
  GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV*: GLenum = 0x903B
  GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV*: GLenum = 0x903C
  GL_NV_viewport_array*: GLenum = 1
  GL_MAX_VIEWPORTS_NV*: GLenum = 0x825B
  GL_VIEWPORT_SUBPIXEL_BITS_NV*: GLenum = 0x825C
  GL_VIEWPORT_BOUNDS_RANGE_NV*: GLenum = 0x825D
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV*: GLenum = 0x825F
  GL_NV_viewport_array2*: GLenum = 1
  GL_NV_viewport_swizzle*: GLenum = 1
  GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV*: GLenum = 0x9350
  GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV*: GLenum = 0x9351
  GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV*: GLenum = 0x9352
  GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV*: GLenum = 0x9353
  GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV*: GLenum = 0x9354
  GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV*: GLenum = 0x9355
  GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV*: GLenum = 0x9356
  GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV*: GLenum = 0x9357
  GL_VIEWPORT_SWIZZLE_X_NV*: GLenum = 0x9358
  GL_VIEWPORT_SWIZZLE_Y_NV*: GLenum = 0x9359
  GL_VIEWPORT_SWIZZLE_Z_NV*: GLenum = 0x935A
  GL_VIEWPORT_SWIZZLE_W_NV*: GLenum = 0x935B
  GL_OES_byte_coordinates*: GLenum = 1
  GL_OML_interlace*: GLenum = 1
  GL_INTERLACE_OML*: GLenum = 0x8980
  GL_INTERLACE_READ_OML*: GLenum = 0x8981
  GL_OML_resample*: GLenum = 1
  GL_PACK_RESAMPLE_OML*: GLenum = 0x8984
  GL_UNPACK_RESAMPLE_OML*: GLenum = 0x8985
  GL_RESAMPLE_REPLICATE_OML*: GLenum = 0x8986
  GL_RESAMPLE_ZERO_FILL_OML*: GLenum = 0x8987
  GL_RESAMPLE_AVERAGE_OML*: GLenum = 0x8988
  GL_RESAMPLE_DECIMATE_OML*: GLenum = 0x8989
  GL_OML_subsample*: GLenum = 1
  GL_FORMAT_SUBSAMPLE_24_24_OML*: GLenum = 0x8982
  GL_FORMAT_SUBSAMPLE_244_244_OML*: GLenum = 0x8983
  GL_OVR_multiview*: GLenum = 1
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR*: GLenum = 0x9630
  GL_MAX_VIEWS_OVR*: GLenum = 0x9631
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR*: GLenum = 0x9632
  GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR*: GLenum = 0x9633
  GL_OVR_multiview2*: GLenum = 1
  GL_OVR_multiview_multisampled_render_to_texture*: GLenum = 1
  GL_PGI_misc_hints*: GLenum = 1
  GL_PREFER_DOUBLEBUFFER_HINT_PGI*: GLenum = 107000
  GL_CONSERVE_MEMORY_HINT_PGI*: GLenum = 107005
  GL_RECLAIM_MEMORY_HINT_PGI*: GLenum = 107006
  GL_NATIVE_GRAPHICS_HANDLE_PGI*: GLenum = 107010
  GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI*: GLenum = 107011
  GL_NATIVE_GRAPHICS_END_HINT_PGI*: GLenum = 107012
  GL_ALWAYS_FAST_HINT_PGI*: GLenum = 107020
  GL_ALWAYS_SOFT_HINT_PGI*: GLenum = 107021
  GL_ALLOW_DRAW_OBJ_HINT_PGI*: GLenum = 107022
  GL_ALLOW_DRAW_WIN_HINT_PGI*: GLenum = 107023
  GL_ALLOW_DRAW_FRG_HINT_PGI*: GLenum = 107024
  GL_ALLOW_DRAW_MEM_HINT_PGI*: GLenum = 107025
  GL_STRICT_DEPTHFUNC_HINT_PGI*: GLenum = 107030
  GL_STRICT_LIGHTING_HINT_PGI*: GLenum = 107031
  GL_STRICT_SCISSOR_HINT_PGI*: GLenum = 107032
  GL_FULL_STIPPLE_HINT_PGI*: GLenum = 107033
  GL_CLIP_NEAR_HINT_PGI*: GLenum = 107040
  GL_CLIP_FAR_HINT_PGI*: GLenum = 107041
  GL_WIDE_LINE_HINT_PGI*: GLenum = 107042
  GL_BACK_NORMALS_HINT_PGI*: GLenum = 107043
  GL_PGI_vertex_hints*: GLenum = 1
  GL_VERTEX23_BIT_PGI*: GLenum = 0x00000004
  GL_VERTEX4_BIT_PGI*: GLenum = 0x00000008
  GL_COLOR3_BIT_PGI*: GLenum = 0x00010000
  GL_COLOR4_BIT_PGI*: GLenum = 0x00020000
  GL_EDGEFLAG_BIT_PGI*: GLenum = 0x00040000
  GL_INDEX_BIT_PGI*: GLenum = 0x00080000
  GL_MAT_AMBIENT_BIT_PGI*: GLenum64 = 0x00100000u
  GL_VERTEX_DATA_HINT_PGI*: GLenum = 107050
  GL_VERTEX_CONSISTENT_HINT_PGI*: GLenum = 107051
  GL_MATERIAL_SIDE_HINT_PGI*: GLenum = 107052
  GL_MAX_VERTEX_HINT_PGI*: GLenum = 107053
  GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI*: GLenum64 = 0x00200000u
  GL_MAT_DIFFUSE_BIT_PGI*: GLenum64 = 0x00400000u
  GL_MAT_EMISSION_BIT_PGI*: GLenum64 = 0x00800000u
  GL_MAT_COLOR_INDEXES_BIT_PGI*: GLenum64 = 0x01000000u
  GL_MAT_SHININESS_BIT_PGI*: GLenum64 = 0x02000000u
  GL_MAT_SPECULAR_BIT_PGI*: GLenum64 = 0x04000000u
  GL_NORMAL_BIT_PGI*: GLenum64 = 0x08000000u
  GL_TEXCOORD1_BIT_PGI*: GLenum64 = 0x10000000u
  GL_TEXCOORD2_BIT_PGI*: GLenum64 = 0x20000000u
  GL_TEXCOORD3_BIT_PGI*: GLenum64 = 0x40000000u
  GL_TEXCOORD4_BIT_PGI*: GLenum64 = 0x80000000u
  GL_QCOM_alpha_test*: GLenum = 1
  GL_ALPHA_TEST_QCOM*: GLenum = 0x0BC0
  GL_ALPHA_TEST_FUNC_QCOM*: GLenum = 0x0BC1
  GL_ALPHA_TEST_REF_QCOM*: GLenum = 0x0BC2
  GL_QCOM_binning_control*: GLenum = 1
  GL_BINNING_CONTROL_HINT_QCOM*: GLenum = 0x8FB0
  GL_CPU_OPTIMIZED_QCOM*: GLenum = 0x8FB1
  GL_GPU_OPTIMIZED_QCOM*: GLenum = 0x8FB2
  GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM*: GLenum = 0x8FB3
  GL_QCOM_driver_control*: GLenum = 1
  GL_QCOM_extended_get*: GLenum = 1
  GL_TEXTURE_WIDTH_QCOM*: GLenum = 0x8BD2
  GL_TEXTURE_HEIGHT_QCOM*: GLenum = 0x8BD3
  GL_TEXTURE_DEPTH_QCOM*: GLenum = 0x8BD4
  GL_TEXTURE_INTERNAL_FORMAT_QCOM*: GLenum = 0x8BD5
  GL_TEXTURE_FORMAT_QCOM*: GLenum = 0x8BD6
  GL_TEXTURE_TYPE_QCOM*: GLenum = 0x8BD7
  GL_TEXTURE_IMAGE_VALID_QCOM*: GLenum = 0x8BD8
  GL_TEXTURE_NUM_LEVELS_QCOM*: GLenum = 0x8BD9
  GL_TEXTURE_TARGET_QCOM*: GLenum = 0x8BDA
  GL_TEXTURE_OBJECT_VALID_QCOM*: GLenum = 0x8BDB
  GL_STATE_RESTORE*: GLenum = 0x8BDC
  GL_QCOM_extended_get2*: GLenum = 1
  GL_QCOM_framebuffer_foveated*: GLenum = 1
  GL_FOVEATION_ENABLE_BIT_QCOM*: GLenum = 0x1
  GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM*: GLenum = 0x2
  GL_QCOM_perfmon_global_mode*: GLenum = 1
  GL_PERFMON_GLOBAL_MODE_QCOM*: GLenum = 0x8FA0
  GL_QCOM_shader_framebuffer_fetch_noncoherent*: GLenum = 1
  GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM*: GLenum = 0x96A2
  GL_QCOM_tiled_rendering*: GLenum = 1
  GL_COLOR_BUFFER_BIT0_QCOM*: GLenum = 0x00000001
  GL_COLOR_BUFFER_BIT1_QCOM*: GLenum = 0x00000002
  GL_COLOR_BUFFER_BIT2_QCOM*: GLenum = 0x00000004
  GL_COLOR_BUFFER_BIT3_QCOM*: GLenum = 0x00000008
  GL_COLOR_BUFFER_BIT4_QCOM*: GLenum = 0x00000010
  GL_COLOR_BUFFER_BIT5_QCOM*: GLenum = 0x00000020
  GL_COLOR_BUFFER_BIT6_QCOM*: GLenum = 0x00000040
  GL_COLOR_BUFFER_BIT7_QCOM*: GLenum = 0x00000080
  GL_DEPTH_BUFFER_BIT0_QCOM*: GLenum = 0x00000100
  GL_DEPTH_BUFFER_BIT1_QCOM*: GLenum = 0x00000200
  GL_DEPTH_BUFFER_BIT2_QCOM*: GLenum = 0x00000400
  GL_DEPTH_BUFFER_BIT3_QCOM*: GLenum = 0x00000800
  GL_DEPTH_BUFFER_BIT4_QCOM*: GLenum = 0x00001000
  GL_DEPTH_BUFFER_BIT5_QCOM*: GLenum = 0x00002000
  GL_DEPTH_BUFFER_BIT6_QCOM*: GLenum = 0x00004000
  GL_DEPTH_BUFFER_BIT7_QCOM*: GLenum = 0x00008000
  GL_STENCIL_BUFFER_BIT0_QCOM*: GLenum = 0x00010000
  GL_STENCIL_BUFFER_BIT1_QCOM*: GLenum = 0x00020000
  GL_STENCIL_BUFFER_BIT2_QCOM*: GLenum = 0x00040000
  GL_STENCIL_BUFFER_BIT3_QCOM*: GLenum = 0x00080000
  GL_STENCIL_BUFFER_BIT4_QCOM*: GLenum64 = 0x00100000u
  GL_STENCIL_BUFFER_BIT5_QCOM*: GLenum64 = 0x00200000u
  GL_STENCIL_BUFFER_BIT6_QCOM*: GLenum64 = 0x00400000u
  GL_STENCIL_BUFFER_BIT7_QCOM*: GLenum64 = 0x00800000u
  GL_MULTISAMPLE_BUFFER_BIT0_QCOM*: GLenum64 = 0x01000000u
  GL_MULTISAMPLE_BUFFER_BIT1_QCOM*: GLenum64 = 0x02000000u
  GL_MULTISAMPLE_BUFFER_BIT2_QCOM*: GLenum64 = 0x04000000u
  GL_MULTISAMPLE_BUFFER_BIT3_QCOM*: GLenum64 = 0x08000000u
  GL_MULTISAMPLE_BUFFER_BIT4_QCOM*: GLenum64 = 0x10000000u
  GL_MULTISAMPLE_BUFFER_BIT5_QCOM*: GLenum64 = 0x20000000u
  GL_MULTISAMPLE_BUFFER_BIT6_QCOM*: GLenum64 = 0x40000000u
  GL_MULTISAMPLE_BUFFER_BIT7_QCOM*: GLenum64 = 0x80000000u
  GL_QCOM_writeonly_rendering*: GLenum = 1
  GL_WRITEONLY_RENDERING_QCOM*: GLenum = 0x8823
  GL_REGAL_ES1_0_compatibility*: GLenum = 1
  GL_REGAL_ES1_1_compatibility*: GLenum = 1
  GL_REGAL_enable*: GLenum = 1
  GL_ERROR_REGAL*: GLenum = 0x9322
  GL_DEBUG_REGAL*: GLenum = 0x9323
  GL_LOG_REGAL*: GLenum = 0x9324
  GL_EMULATION_REGAL*: GLenum = 0x9325
  GL_DRIVER_REGAL*: GLenum = 0x9326
  GL_MISSING_REGAL*: GLenum = 0x9360
  GL_TRACE_REGAL*: GLenum = 0x9361
  GL_CACHE_REGAL*: GLenum = 0x9362
  GL_CODE_REGAL*: GLenum = 0x9363
  GL_STATISTICS_REGAL*: GLenum = 0x9364
  GL_REGAL_error_string*: GLenum = 1
  GL_REGAL_extension_query*: GLenum = 1
  GL_REGAL_log*: GLenum = 1
  GL_LOG_ERROR_REGAL*: GLenum = 0x9319
  GL_LOG_WARNING_REGAL*: GLenum = 0x931A
  GL_LOG_INFO_REGAL*: GLenum = 0x931B
  GL_LOG_APP_REGAL*: GLenum = 0x931C
  GL_LOG_DRIVER_REGAL*: GLenum = 0x931D
  GL_LOG_INTERNAL_REGAL*: GLenum = 0x931E
  GL_LOG_DEBUG_REGAL*: GLenum = 0x931F
  GL_LOG_STATUS_REGAL*: GLenum = 0x9320
  GL_LOG_HTTP_REGAL*: GLenum = 0x9321
  GL_REGAL_proc_address*: GLenum = 1
  GL_REND_screen_coordinates*: GLenum = 1
  GL_SCREEN_COORDINATES_REND*: GLenum = 0x8490
  GL_INVERTED_SCREEN_W_REND*: GLenum = 0x8491
  GL_S3_s3tc*: GLenum = 1
  GL_RGB_S3TC*: GLenum = 0x83A0
  GL_RGB4_S3TC*: GLenum = 0x83A1
  GL_RGBA_S3TC*: GLenum = 0x83A2
  GL_RGBA4_S3TC*: GLenum = 0x83A3
  GL_RGBA_DXT5_S3TC*: GLenum = 0x83A4
  GL_RGBA4_DXT5_S3TC*: GLenum = 0x83A5
  GL_SGIS_clip_band_hint*: GLenum = 1
  GL_SGIS_color_range*: GLenum = 1
  GL_EXTENDED_RANGE_SGIS*: GLenum = 0x85A5
  GL_MIN_RED_SGIS*: GLenum = 0x85A6
  GL_MAX_RED_SGIS*: GLenum = 0x85A7
  GL_MIN_GREEN_SGIS*: GLenum = 0x85A8
  GL_MAX_GREEN_SGIS*: GLenum = 0x85A9
  GL_MIN_BLUE_SGIS*: GLenum = 0x85AA
  GL_MAX_BLUE_SGIS*: GLenum = 0x85AB
  GL_MIN_ALPHA_SGIS*: GLenum = 0x85AC
  GL_MAX_ALPHA_SGIS*: GLenum = 0x85AD
  GL_SGIS_detail_texture*: GLenum = 1
  GL_SGIS_fog_function*: GLenum = 1
  GL_SGIS_generate_mipmap*: GLenum = 1
  GL_GENERATE_MIPMAP_SGIS*: GLenum = 0x8191
  GL_GENERATE_MIPMAP_HINT_SGIS*: GLenum = 0x8192
  GL_SGIS_line_texgen*: GLenum = 1
  GL_SGIS_multisample*: GLenum = 1
  GL_MULTISAMPLE_SGIS*: GLenum = 0x809D
  GL_SAMPLE_ALPHA_TO_MASK_SGIS*: GLenum = 0x809E
  GL_SAMPLE_ALPHA_TO_ONE_SGIS*: GLenum = 0x809F
  GL_SAMPLE_MASK_SGIS*: GLenum = 0x80A0
  GL_1PASS_SGIS*: GLenum = 0x80A1
  GL_2PASS_0_SGIS*: GLenum = 0x80A2
  GL_2PASS_1_SGIS*: GLenum = 0x80A3
  GL_4PASS_0_SGIS*: GLenum = 0x80A4
  GL_4PASS_1_SGIS*: GLenum = 0x80A5
  GL_4PASS_2_SGIS*: GLenum = 0x80A6
  GL_4PASS_3_SGIS*: GLenum = 0x80A7
  GL_SAMPLE_BUFFERS_SGIS*: GLenum = 0x80A8
  GL_SAMPLES_SGIS*: GLenum = 0x80A9
  GL_SAMPLE_MASK_VALUE_SGIS*: GLenum = 0x80AA
  GL_SAMPLE_MASK_INVERT_SGIS*: GLenum = 0x80AB
  GL_SAMPLE_PATTERN_SGIS*: GLenum = 0x80AC
  GL_SGIS_multitexture*: GLenum = 1
  GL_SELECTED_TEXTURE_SGIS*: GLenum = 0x83C0
  GL_SELECTED_TEXTURE_COORD_SET_SGIS*: GLenum = 0x83C1
  GL_SELECTED_TEXTURE_TRANSFORM_SGIS*: GLenum = 0x83C2
  GL_MAX_TEXTURES_SGIS*: GLenum = 0x83C3
  GL_MAX_TEXTURE_COORD_SETS_SGIS*: GLenum = 0x83C4
  GL_TEXTURE_COORD_SET_INTERLEAVE_FACTOR_SGIS*: GLenum = 0x83C5
  GL_TEXTURE_ENV_COORD_SET_SGIS*: GLenum = 0x83C6
  GL_TEXTURE0_SGIS*: GLenum = 0x83C7
  GL_TEXTURE1_SGIS*: GLenum = 0x83C8
  GL_TEXTURE2_SGIS*: GLenum = 0x83C9
  GL_TEXTURE3_SGIS*: GLenum = 0x83CA
  GL_SGIS_pixel_texture*: GLenum = 1
  GL_SGIS_point_line_texgen*: GLenum = 1
  GL_EYE_DISTANCE_TO_POINT_SGIS*: GLenum = 0x81F0
  GL_OBJECT_DISTANCE_TO_POINT_SGIS*: GLenum = 0x81F1
  GL_EYE_DISTANCE_TO_LINE_SGIS*: GLenum = 0x81F2
  GL_OBJECT_DISTANCE_TO_LINE_SGIS*: GLenum = 0x81F3
  GL_EYE_POINT_SGIS*: GLenum = 0x81F4
  GL_OBJECT_POINT_SGIS*: GLenum = 0x81F5
  GL_EYE_LINE_SGIS*: GLenum = 0x81F6
  GL_OBJECT_LINE_SGIS*: GLenum = 0x81F7
  GL_SGIS_shared_multisample*: GLenum = 1
  GL_SGIS_sharpen_texture*: GLenum = 1
  GL_SGIS_texture4D*: GLenum = 1
  GL_SGIS_texture_border_clamp*: GLenum = 1
  GL_CLAMP_TO_BORDER_SGIS*: GLenum = 0x812D
  GL_SGIS_texture_edge_clamp*: GLenum = 1
  GL_CLAMP_TO_EDGE_SGIS*: GLenum = 0x812F
  GL_SGIS_texture_filter4*: GLenum = 1
  GL_SGIS_texture_lod*: GLenum = 1
  GL_TEXTURE_MIN_LOD_SGIS*: GLenum = 0x813A
  GL_TEXTURE_MAX_LOD_SGIS*: GLenum = 0x813B
  GL_TEXTURE_BASE_LEVEL_SGIS*: GLenum = 0x813C
  GL_TEXTURE_MAX_LEVEL_SGIS*: GLenum = 0x813D
  GL_SGIS_texture_select*: GLenum = 1
  GL_SGIX_async*: GLenum = 1
  GL_ASYNC_MARKER_SGIX*: GLenum = 0x8329
  GL_SGIX_async_histogram*: GLenum = 1
  GL_ASYNC_HISTOGRAM_SGIX*: GLenum = 0x832C
  GL_MAX_ASYNC_HISTOGRAM_SGIX*: GLenum = 0x832D
  GL_SGIX_async_pixel*: GLenum = 1
  GL_ASYNC_TEX_IMAGE_SGIX*: GLenum = 0x835C
  GL_ASYNC_DRAW_PIXELS_SGIX*: GLenum = 0x835D
  GL_ASYNC_READ_PIXELS_SGIX*: GLenum = 0x835E
  GL_MAX_ASYNC_TEX_IMAGE_SGIX*: GLenum = 0x835F
  GL_MAX_ASYNC_DRAW_PIXELS_SGIX*: GLenum = 0x8360
  GL_MAX_ASYNC_READ_PIXELS_SGIX*: GLenum = 0x8361
  GL_SGIX_bali_g_instruments*: GLenum = 1
  GL_BALI_NUM_TRIS_CULLED_INSTRUMENT*: GLenum = 0x6080
  GL_BALI_NUM_PRIMS_CLIPPED_INSTRUMENT*: GLenum = 0x6081
  GL_BALI_NUM_PRIMS_REJECT_INSTRUMENT*: GLenum = 0x6082
  GL_BALI_NUM_PRIMS_CLIP_RESULT_INSTRUMENT*: GLenum = 0x6083
  GL_SGIX_bali_r_instruments*: GLenum = 1
  GL_BALI_FRAGMENTS_GENERATED_INSTRUMENT*: GLenum = 0x6090
  GL_BALI_DEPTH_PASS_INSTRUMENT*: GLenum = 0x6091
  GL_BALI_R_CHIP_COUNT*: GLenum = 0x6092
  GL_SGIX_bali_timer_instruments*: GLenum = 1
  GL_SGIX_blend_alpha_minmax*: GLenum = 1
  GL_ALPHA_MIN_SGIX*: GLenum = 0x8320
  GL_ALPHA_MAX_SGIX*: GLenum = 0x8321
  GL_SGIX_blend_cadd*: GLenum = 1
  GL_FUNC_COMPLEX_ADD_EXT*: GLenum = 0x601C
  GL_SGIX_blend_cmultiply*: GLenum = 1
  GL_FUNC_COMPLEX_MULTIPLY_EXT*: GLenum = 0x601B
  GL_SGIX_calligraphic_fragment*: GLenum = 1
  GL_SGIX_clipmap*: GLenum = 1
  GL_SGIX_color_matrix_accuracy*: GLenum = 1
  GL_COLOR_MATRIX_HINT*: GLenum = 0x8317
  GL_SGIX_color_table_index_mode*: GLenum = 1
  GL_SGIX_complex_polar*: GLenum = 1
  GL_SGIX_convolution_accuracy*: GLenum = 1
  GL_CONVOLUTION_HINT_SGIX*: GLenum = 0x8316
  GL_SGIX_cube_map*: GLenum = 1
  GL_ENV_MAP_SGIX*: GLenum = 0x8340
  GL_CUBE_MAP_SGIX*: GLenum = 0x8341
  GL_CUBE_MAP_ZP_SGIX*: GLenum = 0x8342
  GL_CUBE_MAP_ZN_SGIX*: GLenum = 0x8343
  GL_CUBE_MAP_XN_SGIX*: GLenum = 0x8344
  GL_CUBE_MAP_XP_SGIX*: GLenum = 0x8345
  GL_CUBE_MAP_YN_SGIX*: GLenum = 0x8346
  GL_CUBE_MAP_YP_SGIX*: GLenum = 0x8347
  GL_CUBE_MAP_BINDING_SGIX*: GLenum = 0x8348
  GL_SGIX_cylinder_texgen*: GLenum = 1
  GL_SGIX_datapipe*: GLenum = 1
  GL_GEOMETRY_BIT*: GLenum = 0x1
  GL_IMAGE_BIT*: GLenum = 0x2
  GL_SGIX_decimation*: GLenum = 1
  GL_SGIX_depth_pass_instrument*: GLenum = 1
  GL_DEPTH_PASS_INSTRUMENT_SGIX*: GLenum = 0x8310
  GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX*: GLenum = 0x8311
  GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX*: GLenum = 0x8312
  GL_SGIX_depth_texture*: GLenum = 1
  GL_DEPTH_COMPONENT16_SGIX*: GLenum = 0x81A5
  GL_DEPTH_COMPONENT24_SGIX*: GLenum = 0x81A6
  GL_DEPTH_COMPONENT32_SGIX*: GLenum = 0x81A7
  GL_SGIX_dvc*: GLenum = 1
  GL_SGIX_flush_raster*: GLenum = 1
  GL_SGIX_fog_blend*: GLenum = 1
  GL_FOG_BLEND_ALPHA_SGIX*: GLenum = 0x81FE
  GL_FOG_BLEND_COLOR_SGIX*: GLenum = 0x81FF
  GL_SGIX_fog_factor_to_alpha*: GLenum = 1
  GL_SGIX_fog_layers*: GLenum = 1
  GL_FOG_TYPE_SGIX*: GLenum = 0x8323
  GL_UNIFORM_SGIX*: GLenum = 0x8324
  GL_LAYERED_SGIX*: GLenum = 0x8325
  GL_FOG_GROUND_PLANE_SGIX*: GLenum = 0x8326
  GL_FOG_LAYERS_POINTS_SGIX*: GLenum = 0x8327
  GL_MAX_FOG_LAYERS_POINTS_SGIX*: GLenum = 0x8328
  GL_SGIX_fog_offset*: GLenum = 1
  GL_FOG_OFFSET_SGIX*: GLenum = 0x8198
  GL_FOG_OFFSET_VALUE_SGIX*: GLenum = 0x8199
  GL_SGIX_fog_patchy*: GLenum = 1
  GL_SGIX_fog_scale*: GLenum = 1
  GL_FOG_SCALE_SGIX*: GLenum = 0x81FC
  GL_FOG_SCALE_VALUE_SGIX*: GLenum = 0x81FD
  GL_SGIX_fog_texture*: GLenum = 1
  GL_SGIX_fragment_lighting_space*: GLenum = 1
  GL_EYE_SPACE_SGIX*: GLenum = 0x8436
  GL_TANGENT_SPACE_SGIX*: GLenum = 0x8437
  GL_OBJECT_SPACE_SGIX*: GLenum = 0x8438
  GL_FRAGMENT_LIGHT_SPACE_SGIX*: GLenum = 0x843D
  GL_SGIX_fragment_specular_lighting*: GLenum = 1
  GL_SGIX_fragments_instrument*: GLenum = 1
  GL_FRAGMENTS_INSTRUMENT_SGIX*: GLenum = 0x8313
  GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX*: GLenum = 0x8314
  GL_FRAGMENTS_INSTRUMENT_MAX_SGIX*: GLenum = 0x8315
  GL_SGIX_framezoom*: GLenum = 1
  GL_SGIX_icc_texture*: GLenum = 1
  GL_RGB_ICC_SGIX*: GLenum = 0x8460
  GL_RGBA_ICC_SGIX*: GLenum = 0x8461
  GL_ALPHA_ICC_SGIX*: GLenum = 0x8462
  GL_LUMINANCE_ICC_SGIX*: GLenum = 0x8463
  GL_INTENSITY_ICC_SGIX*: GLenum = 0x8464
  GL_LUMINANCE_ALPHA_ICC_SGIX*: GLenum = 0x8465
  GL_R5_G6_B5_ICC_SGIX*: GLenum = 0x8466
  GL_R5_G6_B5_A8_ICC_SGIX*: GLenum = 0x8467
  GL_ALPHA16_ICC_SGIX*: GLenum = 0x8468
  GL_LUMINANCE16_ICC_SGIX*: GLenum = 0x8469
  GL_INTENSITY16_ICC_SGIX*: GLenum = 0x846A
  GL_LUMINANCE16_ALPHA8_ICC_SGIX*: GLenum = 0x846B
  GL_SGIX_igloo_interface*: GLenum = 1
  GL_IGLOO_FULLSCREEN_SGIX*: GLenum = 0x819E
  GL_IGLOO_VIEWPORT_OFFSET_SGIX*: GLenum = 0x819F
  GL_IGLOO_SWAPTMESH_SGIX*: GLenum = 0x81A0
  GL_IGLOO_COLORNORMAL_SGIX*: GLenum = 0x81A1
  GL_IGLOO_IRISGL_MODE_SGIX*: GLenum = 0x81A2
  GL_IGLOO_LMC_COLOR_SGIX*: GLenum = 0x81A3
  GL_IGLOO_TMESHMODE_SGIX*: GLenum = 0x81A4
  GL_LIGHT31*: GLenum = 0xBEAD
  GL_SGIX_image_compression*: GLenum = 1
  GL_SGIX_impact_pixel_texture*: GLenum = 1
  GL_SGIX_instrument_error*: GLenum = 1
  GL_SGIX_interlace*: GLenum = 1
  GL_INTERLACE_SGIX*: GLenum = 0x8094
  GL_SGIX_ir_instrument1*: GLenum = 1
  GL_SGIX_line_quality_hint*: GLenum = 1
  GL_LINE_QUALITY_HINT_SGIX*: GLenum = 0x835B
  GL_SGIX_list_priority*: GLenum = 1
  GL_SGIX_mpeg1*: GLenum = 1
  GL_SGIX_mpeg2*: GLenum = 1
  GL_SGIX_nonlinear_lighting_pervertex*: GLenum = 1
  GL_SGIX_nurbs_eval*: GLenum = 1
  GL_MAP1_VERTEX_3_NURBS_SGIX*: GLenum = 0x81CB
  GL_MAP1_VERTEX_4_NURBS_SGIX*: GLenum = 0x81CC
  GL_MAP1_INDEX_NURBS_SGIX*: GLenum = 0x81CD
  GL_MAP1_COLOR_4_NURBS_SGIX*: GLenum = 0x81CE
  GL_MAP1_NORMAL_NURBS_SGIX*: GLenum = 0x81CF
  GL_MAP1_TEXTURE_COORD_1_NURBS_SGIX*: GLenum = 0x81E0
  GL_MAP1_TEXTURE_COORD_2_NURBS_SGIX*: GLenum = 0x81E1
  GL_MAP1_TEXTURE_COORD_3_NURBS_SGIX*: GLenum = 0x81E2
  GL_MAP1_TEXTURE_COORD_4_NURBS_SGIX*: GLenum = 0x81E3
  GL_MAP2_VERTEX_3_NURBS_SGIX*: GLenum = 0x81E4
  GL_MAP2_VERTEX_4_NURBS_SGIX*: GLenum = 0x81E5
  GL_MAP2_INDEX_NURBS_SGIX*: GLenum = 0x81E6
  GL_MAP2_COLOR_4_NURBS_SGIX*: GLenum = 0x81E7
  GL_MAP2_NORMAL_NURBS_SGIX*: GLenum = 0x81E8
  GL_MAP2_TEXTURE_COORD_1_NURBS_SGIX*: GLenum = 0x81E9
  GL_MAP2_TEXTURE_COORD_2_NURBS_SGIX*: GLenum = 0x81EA
  GL_MAP2_TEXTURE_COORD_3_NURBS_SGIX*: GLenum = 0x81EB
  GL_MAP2_TEXTURE_COORD_4_NURBS_SGIX*: GLenum = 0x81EC
  GL_NURBS_KNOT_COUNT_SGIX*: GLenum = 0x81ED
  GL_NURBS_KNOT_VECTOR_SGIX*: GLenum = 0x81EE
  GL_SGIX_occlusion_instrument*: GLenum = 1
  GL_OCCLUSION_INSTRUMENT_SGIX*: GLenum = 0x6060
  GL_SGIX_packed_6bytes*: GLenum = 1
  GL_SGIX_pixel_texture*: GLenum = 1
  GL_SGIX_pixel_texture_bits*: GLenum = 1
  GL_SGIX_pixel_texture_lod*: GLenum = 1
  GL_SGIX_pixel_tiles*: GLenum = 1
  GL_SGIX_polynomial_ffd*: GLenum = 1
  GL_TEXTURE_DEFORMATION_BIT_SGIX*: GLenum = 0x1
  GL_GEOMETRY_DEFORMATION_BIT_SGIX*: GLenum = 0x2
  GL_SGIX_quad_mesh*: GLenum = 1
  GL_SGIX_reference_plane*: GLenum = 1
  GL_SGIX_resample*: GLenum = 1
  GL_PACK_RESAMPLE_SGIX*: GLenum = 0x842E
  GL_UNPACK_RESAMPLE_SGIX*: GLenum = 0x842F
  GL_RESAMPLE_DECIMATE_SGIX*: GLenum = 0x8430
  GL_RESAMPLE_REPLICATE_SGIX*: GLenum = 0x8433
  GL_RESAMPLE_ZERO_FILL_SGIX*: GLenum = 0x8434
  GL_SGIX_scalebias_hint*: GLenum = 1
  GL_SCALEBIAS_HINT_SGIX*: GLenum = 0x8322
  GL_SGIX_shadow*: GLenum = 1
  GL_TEXTURE_COMPARE_SGIX*: GLenum = 0x819A
  GL_TEXTURE_COMPARE_OPERATOR_SGIX*: GLenum = 0x819B
  GL_TEXTURE_LEQUAL_R_SGIX*: GLenum = 0x819C
  GL_TEXTURE_GEQUAL_R_SGIX*: GLenum = 0x819D
  GL_SGIX_shadow_ambient*: GLenum = 1
  GL_SHADOW_AMBIENT_SGIX*: GLenum = 0x80BF
  GL_SGIX_slim*: GLenum = 1
  GL_PACK_MAX_COMPRESSED_SIZE_SGIX*: GLenum = 0x831B
  GL_SLIM8U_SGIX*: GLenum = 0x831D
  GL_SLIM10U_SGIX*: GLenum = 0x831E
  GL_SLIM12S_SGIX*: GLenum = 0x831F
  GL_SGIX_spotlight_cutoff*: GLenum = 1
  GL_SPOT_CUTOFF_DELTA_SGIX*: GLenum = 0x8193
  GL_SGIX_sprite*: GLenum = 1
  GL_SGIX_subdiv_patch*: GLenum = 1
  GL_SGIX_subsample*: GLenum = 1
  GL_PACK_SUBSAMPLE_RATE_SGIX*: GLenum = 0x85A0
  GL_UNPACK_SUBSAMPLE_RATE_SGIX*: GLenum = 0x85A1
  GL_PIXEL_SUBSAMPLE_4444_SGIX*: GLenum = 0x85A2
  GL_PIXEL_SUBSAMPLE_2424_SGIX*: GLenum = 0x85A3
  GL_PIXEL_SUBSAMPLE_4242_SGIX*: GLenum = 0x85A4
  GL_SGIX_tag_sample_buffer*: GLenum = 1
  GL_SGIX_texture_add_env*: GLenum = 1
  GL_SGIX_texture_coordinate_clamp*: GLenum = 1
  GL_TEXTURE_MAX_CLAMP_S_SGIX*: GLenum = 0x8369
  GL_TEXTURE_MAX_CLAMP_T_SGIX*: GLenum = 0x836A
  GL_TEXTURE_MAX_CLAMP_R_SGIX*: GLenum = 0x836B
  GL_SGIX_texture_lod_bias*: GLenum = 1
  GL_SGIX_texture_mipmap_anisotropic*: GLenum = 1
  GL_TEXTURE_MIPMAP_ANISOTROPY_SGIX*: GLenum = 0x832E
  GL_MAX_MIPMAP_ANISOTROPY_SGIX*: GLenum = 0x832F
  GL_SGIX_texture_multi_buffer*: GLenum = 1
  GL_TEXTURE_MULTI_BUFFER_HINT_SGIX*: GLenum = 0x812E
  GL_SGIX_texture_phase*: GLenum = 1
  GL_PHASE_SGIX*: GLenum = 0x832A
  GL_SGIX_texture_range*: GLenum = 1
  GL_RGB_SIGNED_SGIX*: GLenum = 0x85E0
  GL_RGBA_SIGNED_SGIX*: GLenum = 0x85E1
  GL_ALPHA_SIGNED_SGIX*: GLenum = 0x85E2
  GL_LUMINANCE_SIGNED_SGIX*: GLenum = 0x85E3
  GL_INTENSITY_SIGNED_SGIX*: GLenum = 0x85E4
  GL_LUMINANCE_ALPHA_SIGNED_SGIX*: GLenum = 0x85E5
  GL_RGB16_SIGNED_SGIX*: GLenum = 0x85E6
  GL_RGBA16_SIGNED_SGIX*: GLenum = 0x85E7
  GL_ALPHA16_SIGNED_SGIX*: GLenum = 0x85E8
  GL_LUMINANCE16_SIGNED_SGIX*: GLenum = 0x85E9
  GL_INTENSITY16_SIGNED_SGIX*: GLenum = 0x85EA
  GL_LUMINANCE16_ALPHA16_SIGNED_SGIX*: GLenum = 0x85EB
  GL_RGB_EXTENDED_RANGE_SGIX*: GLenum = 0x85EC
  GL_RGBA_EXTENDED_RANGE_SGIX*: GLenum = 0x85ED
  GL_ALPHA_EXTENDED_RANGE_SGIX*: GLenum = 0x85EE
  GL_LUMINANCE_EXTENDED_RANGE_SGIX*: GLenum = 0x85EF
  GL_INTENSITY_EXTENDED_RANGE_SGIX*: GLenum = 0x85F0
  GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX*: GLenum = 0x85F1
  GL_RGB16_EXTENDED_RANGE_SGIX*: GLenum = 0x85F2
  GL_RGBA16_EXTENDED_RANGE_SGIX*: GLenum = 0x85F3
  GL_ALPHA16_EXTENDED_RANGE_SGIX*: GLenum = 0x85F4
  GL_LUMINANCE16_EXTENDED_RANGE_SGIX*: GLenum = 0x85F5
  GL_INTENSITY16_EXTENDED_RANGE_SGIX*: GLenum = 0x85F6
  GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX*: GLenum = 0x85F7
  GL_MIN_LUMINANCE_SGIS*: GLenum = 0x85F8
  GL_MAX_LUMINANCE_SGIS*: GLenum = 0x85F9
  GL_MIN_INTENSITY_SGIS*: GLenum = 0x85FA
  GL_MAX_INTENSITY_SGIS*: GLenum = 0x85FB
  GL_SGIX_texture_scale_bias*: GLenum = 1
  GL_POST_TEXTURE_FILTER_BIAS_SGIX*: GLenum = 0x8179
  GL_POST_TEXTURE_FILTER_SCALE_SGIX*: GLenum = 0x817A
  GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX*: GLenum = 0x817B
  GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX*: GLenum = 0x817C
  GL_SGIX_texture_supersample*: GLenum = 1
  GL_SGIX_vector_ops*: GLenum = 1
  GL_SGIX_vertex_array_object*: GLenum = 1
  GL_SGIX_vertex_preclip*: GLenum = 1
  GL_VERTEX_PRECLIP_SGIX*: GLenum = 0x83EE
  GL_VERTEX_PRECLIP_HINT_SGIX*: GLenum = 0x83EF
  GL_SGIX_vertex_preclip_hint*: GLenum = 1
  GL_SGIX_ycrcb*: GLenum = 1
  GL_SGIX_ycrcb_subsample*: GLenum = 1
  GL_SGIX_ycrcba*: GLenum = 1
  GL_YCRCB_SGIX*: GLenum = 0x8318
  GL_YCRCBA_SGIX*: GLenum = 0x8319
  GL_SGI_color_matrix*: GLenum = 1
  GL_COLOR_MATRIX_SGI*: GLenum = 0x80B1
  GL_COLOR_MATRIX_STACK_DEPTH_SGI*: GLenum = 0x80B2
  GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI*: GLenum = 0x80B3
  GL_POST_COLOR_MATRIX_RED_SCALE_SGI*: GLenum = 0x80B4
  GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI*: GLenum = 0x80B5
  GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI*: GLenum = 0x80B6
  GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI*: GLenum = 0x80B7
  GL_POST_COLOR_MATRIX_RED_BIAS_SGI*: GLenum = 0x80B8
  GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI*: GLenum = 0x80B9
  GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI*: GLenum = 0x80BA
  GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI*: GLenum = 0x80BB
  GL_SGI_color_table*: GLenum = 1
  GL_COLOR_TABLE_SGI*: GLenum = 0x80D0
  GL_POST_CONVOLUTION_COLOR_TABLE_SGI*: GLenum = 0x80D1
  GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI*: GLenum = 0x80D2
  GL_PROXY_COLOR_TABLE_SGI*: GLenum = 0x80D3
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI*: GLenum = 0x80D4
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI*: GLenum = 0x80D5
  GL_COLOR_TABLE_SCALE_SGI*: GLenum = 0x80D6
  GL_COLOR_TABLE_BIAS_SGI*: GLenum = 0x80D7
  GL_COLOR_TABLE_FORMAT_SGI*: GLenum = 0x80D8
  GL_COLOR_TABLE_WIDTH_SGI*: GLenum = 0x80D9
  GL_COLOR_TABLE_RED_SIZE_SGI*: GLenum = 0x80DA
  GL_COLOR_TABLE_GREEN_SIZE_SGI*: GLenum = 0x80DB
  GL_COLOR_TABLE_BLUE_SIZE_SGI*: GLenum = 0x80DC
  GL_COLOR_TABLE_ALPHA_SIZE_SGI*: GLenum = 0x80DD
  GL_COLOR_TABLE_LUMINANCE_SIZE_SGI*: GLenum = 0x80DE
  GL_COLOR_TABLE_INTENSITY_SIZE_SGI*: GLenum = 0x80DF
  GL_SGI_complex*: GLenum = 1
  GL_SGI_complex_type*: GLenum = 1
  GL_COMPLEX_UNSIGNED_BYTE_SGI*: GLenum = 0x81BD
  GL_COMPLEX_BYTE_SGI*: GLenum = 0x81BE
  GL_COMPLEX_UNSIGNED_SHORT_SGI*: GLenum = 0x81BF
  GL_COMPLEX_SHORT_SGI*: GLenum = 0x81C0
  GL_COMPLEX_UNSIGNED_INT_SGI*: GLenum = 0x81C1
  GL_COMPLEX_INT_SGI*: GLenum = 0x81C2
  GL_COMPLEX_FLOAT_SGI*: GLenum = 0x81C3
  GL_SGI_fft*: GLenum = 1
  GL_PIXEL_TRANSFORM_OPERATOR_SGI*: GLenum = 0x81C4
  GL_CONVOLUTION_SGI*: GLenum = 0x81C5
  GL_FFT_1D_SGI*: GLenum = 0x81C6
  GL_PIXEL_TRANSFORM_SGI*: GLenum = 0x81C7
  GL_MAX_FFT_WIDTH_SGI*: GLenum = 0x81C8
  GL_SGI_texture_color_table*: GLenum = 1
  GL_TEXTURE_COLOR_TABLE_SGI*: GLenum = 0x80BC
  GL_PROXY_TEXTURE_COLOR_TABLE_SGI*: GLenum = 0x80BD
  GL_SUNX_ant_data*: GLenum = 1
  GL_UNPACK_CONSTANT_DATA_SUNX*: GLenum = 0x81D5
  GL_TEXTURE_CONSTANT_DATA_SUNX*: GLenum = 0x81D6
  GL_SUN_convolution_border_modes*: GLenum = 1
  GL_WRAP_BORDER_SUN*: GLenum = 0x81D4
  GL_SUN_global_alpha*: GLenum = 1
  GL_GLOBAL_ALPHA_SUN*: GLenum = 0x81D9
  GL_GLOBAL_ALPHA_FACTOR_SUN*: GLenum = 0x81DA
  GL_SUN_mesh_array*: GLenum = 1
  GL_QUAD_MESH_SUN*: GLenum = 0x8614
  GL_TRIANGLE_MESH_SUN*: GLenum = 0x8615
  GL_SUN_read_video_pixels*: GLenum = 1
  GL_SUN_slice_accum*: GLenum = 1
  GL_SLICE_ACCUM_SUN*: GLenum = 0x85CC
  GL_SUN_triangle_list*: GLenum = 1
  GL_RESTART_SUN*: GLenum = 0x01
  GL_REPLACE_MIDDLE_SUN*: GLenum = 0x02
  GL_REPLACE_OLDEST_SUN*: GLenum = 0x03
  GL_TRIANGLE_LIST_SUN*: GLenum = 0x81D7
  GL_REPLACEMENT_CODE_SUN*: GLenum = 0x81D8
  GL_REPLACEMENT_CODE_ARRAY_SUN*: GLenum = 0x85C0
  GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN*: GLenum = 0x85C1
  GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN*: GLenum = 0x85C2
  GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN*: GLenum = 0x85C3
  GL_R1UI_V3F_SUN*: GLenum = 0x85C4
  GL_R1UI_C4UB_V3F_SUN*: GLenum = 0x85C5
  GL_R1UI_C3F_V3F_SUN*: GLenum = 0x85C6
  GL_R1UI_N3F_V3F_SUN*: GLenum = 0x85C7
  GL_R1UI_C4F_N3F_V3F_SUN*: GLenum = 0x85C8
  GL_R1UI_T2F_V3F_SUN*: GLenum = 0x85C9
  GL_R1UI_T2F_N3F_V3F_SUN*: GLenum = 0x85CA
  GL_R1UI_T2F_C4F_N3F_V3F_SUN*: GLenum = 0x85CB
  GL_SUN_vertex*: GLenum = 1
  GL_WIN_phong_shading*: GLenum = 1
  GL_PHONG_WIN*: GLenum = 0x80EA
  GL_PHONG_HINT_WIN*: GLenum = 0x80EB
  GL_WIN_scene_markerXXX*: GLenum = 1
  GL_WIN_specular_fog*: GLenum = 1
  GL_FOG_SPECULAR_TEXTURE_WIN*: GLenum = 0x80EC
  GL_WIN_swap_hint*: GLenum = 1
  GLEW_OK*: GLenum = 0
  GLEW_NO_ERROR*: GLenum = 0
  GLEW_VERSION*: GLenum = 1
  GLEW_VERSION_MAJOR*: GLenum = 2
  GLEW_VERSION_MINOR*: GLenum = 3
  GLEW_VERSION_MICRO*: GLenum = 4
  GL_FOG_COORD_ARRAY_BUFFER_BINDING*: uint32 = 0x889D
  GL_BLEND_EQUATION_RGB*: uint32 = 0x8009
  GL_COMPARE_REF_TO_TEXTURE*: uint32 = 0x884E

# Procedures
proc init*(): uint32 {.glew_lib, importc: "glewInit".}
proc accum*(op: GLenum, value: float32): void {.glew_lib, importc: "glAccum".}
proc alphaFunc*(fun: GLenum, reff: float32): void {.glew_lib, importc: "glAlphaFunc".}
proc areTexturesResident*(n: int32, textures: ptr uint32, residences: ptr bool): bool {.glew_lib, importc: "glAreTexturesResident".}
proc arrayElement*(i: int32): void {.glew_lib, importc: "glArrayElement".}
proc begin*(mode: GLenum): void {.glew_lib, importc: "glBegin".}
proc bindTexture*(target: GLenum, texture: uint32): void {.glew_lib, importc: "glBindTexture".}
proc bitmap*(width: int32, height: int32, xorig: float32, yorig: float32, xmove: float32, ymove: float32, bitmap: ptr uint8): void {.glew_lib, importc: "glBitmap".}
proc blendFunc*(sfactor: GLenum, dfactor: GLenum): void {.glew_lib, importc: "glBlendFunc".}
proc callList*(list: uint32): void {.glew_lib, importc: "glCallList".}
proc callLists*(n: int32, tipe: GLenum, lists: pointer): void {.glew_lib, importc: "glCallLists".}
proc clear*(mask: uint32): void {.glew_lib, importc: "glClear".}
proc clearAccum*(red: float32, green: float32, blue: float32, alpha: float32): void {.glew_lib, importc: "glClearAccum".}
proc clearColor*(red: float32, green: float32, blue: float32, alpha: float32): void {.glew_lib, importc: "glClearColor".}
proc clearDepth*(depth: float64): void {.glew_lib, importc: "glClearDepth".}
proc clearIndex*(c: float32): void {.glew_lib, importc: "glClearIndex".}
proc clearStencil*(s: int32): void {.glew_lib, importc: "glClearStencil".}
proc clipPlane*(plane: GLenum, equation: ptr float64): void {.glew_lib, importc: "glClipPlane".}
proc color3b*(red: int8, green: int8, blue: int8): void {.glew_lib, importc: "glColor3b".}
proc color3bv*(v: ptr int8): void {.glew_lib, importc: "glColor3bv".}
proc color3d*(red: float64, green: float64, blue: float64): void {.glew_lib, importc: "glColor3d".}
proc color3dv*(v: ptr float64): void {.glew_lib, importc: "glColor3dv".}
proc color3f*(red: float32, green: float32, blue: float32): void {.glew_lib, importc: "glColor3f".}
proc color3fv*(v: ptr float32): void {.glew_lib, importc: "glColor3fv".}
proc color3i*(red: int32, green: int32, blue: int32): void {.glew_lib, importc: "glColor3i".}
proc color3iv*(v: ptr int32): void {.glew_lib, importc: "glColor3iv".}
proc color3s*(red: int16, green: int16, blue: int16): void {.glew_lib, importc: "glColor3s".}
proc color3sv*(v: ptr int16): void {.glew_lib, importc: "glColor3sv".}
proc color3ub*(red: uint8, green: uint8, blue: uint8): void {.glew_lib, importc: "glColor3ub".}
proc color3ubv*(v: ptr uint8): void {.glew_lib, importc: "glColor3ubv".}
proc color3ui*(red: uint32, green: uint32, blue: uint32): void {.glew_lib, importc: "glColor3ui".}
proc color3uiv*(v: ptr uint32): void {.glew_lib, importc: "glColor3uiv".}
proc color3us*(red: uint16, green: uint16, blue: uint16): void {.glew_lib, importc: "glColor3us".}
proc color3usv*(v: ptr uint16): void {.glew_lib, importc: "glColor3usv".}
proc color4b*(red: int8, green: int8, blue: int8, alpha: int8): void {.glew_lib, importc: "glColor4b".}
proc color4bv*(v: ptr int8): void {.glew_lib, importc: "glColor4bv".}
proc color4d*(red: float64, green: float64, blue: float64, alpha: float64): void {.glew_lib, importc: "glColor4d".}
proc color4dv*(v: ptr float64): void {.glew_lib, importc: "glColor4dv".}
proc color4f*(red: float32, green: float32, blue: float32, alpha: float32): void {.glew_lib, importc: "glColor4f".}
proc color4fv*(v: ptr float32): void {.glew_lib, importc: "glColor4fv".}
proc color4i*(red: int32, green: int32, blue: int32, alpha: int32): void {.glew_lib, importc: "glColor4i".}
proc color4iv*(v: ptr int32): void {.glew_lib, importc: "glColor4iv".}
proc color4s*(red: int16, green: int16, blue: int16, alpha: int16): void {.glew_lib, importc: "glColor4s".}
proc color4sv*(v: ptr int16): void {.glew_lib, importc: "glColor4sv".}
proc color4ub*(red: uint8, green: uint8, blue: uint8, alpha: uint8): void {.glew_lib, importc: "glColor4ub".}
proc color4ubv*(v: ptr uint8): void {.glew_lib, importc: "glColor4ubv".}
proc color4ui*(red: uint32, green: uint32, blue: uint32, alpha: uint32): void {.glew_lib, importc: "glColor4ui".}
proc color4uiv*(v: ptr uint32): void {.glew_lib, importc: "glColor4uiv".}
proc color4us*(red: uint16, green: uint16, blue: uint16, alpha: uint16): void {.glew_lib, importc: "glColor4us".}
proc color4usv*(v: ptr uint16): void {.glew_lib, importc: "glColor4usv".}
proc colorMask*(red: bool, green: bool, blue: bool, alpha: bool): void {.glew_lib, importc: "glColorMask".}
proc colorMaterial*(face: GLenum, mode: GLenum): void {.glew_lib, importc: "glColorMaterial".}
proc colorPointer*(size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glColorPointer".}
proc copyPixels*(x: int32, y: int32, width: int32, height: int32, tipe: GLenum): void {.glew_lib, importc: "glCopyPixels".}
proc copyTexImage1D*(target: GLenum, level: int32, internalFormat: GLenum, x: int32, y: int32, width: int32, border: int32): void {.glew_lib, importc: "glCopyTexImage1D".}
proc copyTexImage2D*(target: GLenum, level: int32, internalFormat: GLenum, x: int32, y: int32, width: int32, height: int32, border: int32): void {.glew_lib, importc: "glCopyTexImage2D".}
proc copyTexSubImage1D*(target: GLenum, level: int32, xoffset: int32, x: int32, y: int32, width: int32): void {.glew_lib, importc: "glCopyTexSubImage1D".}
proc copyTexSubImage2D*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyTexSubImage2D".}
proc cullFace*(mode: GLenum): void {.glew_lib, importc: "glCullFace".}
proc deleteLists*(list: uint32, rangee: int32): void {.glew_lib, importc: "glDeleteLists".}
proc deleteTextures*(n: int32, textures: ptr uint32): void {.glew_lib, importc: "glDeleteTextures".}
proc depthFunc*(fun: GLenum): void {.glew_lib, importc: "glDepthFunc".}
proc depthMask*(flag: bool): void {.glew_lib, importc: "glDepthMask".}
proc depthRange*(zNear: float64, zFar: float64): void {.glew_lib, importc: "glDepthRange".}
proc disable*(cap: GLenum): void {.glew_lib, importc: "glDisable".}
proc disableClientState*(arrai: GLenum): void {.glew_lib, importc: "glDisableClientState".}
proc drawArrays*(mode: GLenum, first: int32, count: int32): void {.glew_lib, importc: "glDrawArrays".}
proc drawBuffer*(mode: GLenum): void {.glew_lib, importc: "glDrawBuffer".}
proc drawElements*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer): void {.glew_lib, importc: "glDrawElements".}
proc drawPixels*(width: int32, height: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glDrawPixels".}
proc edgeFlag*(flag: bool): void {.glew_lib, importc: "glEdgeFlag".}
proc edgeFlagPointer*(stride: int32, poynter: pointer): void {.glew_lib, importc: "glEdgeFlagPointer".}
proc edgeFlagv*(flag: ptr bool): void {.glew_lib, importc: "glEdgeFlagv".}
proc enable*(cap: GLenum): void {.glew_lib, importc: "glEnable".}
proc enableClientState*(arrai: GLenum): void {.glew_lib, importc: "glEnableClientState".}
proc glEnd*(): void {.glew_lib.}
proc endList*(): void {.glew_lib, importc: "glEndList".}
proc evalCoord1d*(u: float64): void {.glew_lib, importc: "glEvalCoord1d".}
proc evalCoord1dv*(u: ptr float64): void {.glew_lib, importc: "glEvalCoord1dv".}
proc evalCoord1f*(u: float32): void {.glew_lib, importc: "glEvalCoord1f".}
proc evalCoord1fv*(u: ptr float32): void {.glew_lib, importc: "glEvalCoord1fv".}
proc evalCoord2d*(u: float64, v: float64): void {.glew_lib, importc: "glEvalCoord2d".}
proc evalCoord2dv*(u: ptr float64): void {.glew_lib, importc: "glEvalCoord2dv".}
proc evalCoord2f*(u: float32, v: float32): void {.glew_lib, importc: "glEvalCoord2f".}
proc evalCoord2fv*(u: ptr float32): void {.glew_lib, importc: "glEvalCoord2fv".}
proc evalMesh1*(mode: GLenum, i1: int32, i2: int32): void {.glew_lib, importc: "glEvalMesh1".}
proc evalMesh2*(mode: GLenum, i1: int32, i2: int32, j1: int32, j2: int32): void {.glew_lib, importc: "glEvalMesh2".}
proc evalPoint1*(i: int32): void {.glew_lib, importc: "glEvalPoint1".}
proc evalPoint2*(i: int32, j: int32): void {.glew_lib, importc: "glEvalPoint2".}
proc feedbackBuffer*(size: int32, tipe: GLenum, buffer: ptr float32): void {.glew_lib, importc: "glFeedbackBuffer".}
proc finish*(): void {.glew_lib, importc: "glFinish".}
proc flush*(): void {.glew_lib, importc: "glFlush".}
proc fogf*(pname: GLenum, param: float32): void {.glew_lib, importc: "glFogf".}
proc fogfv*(pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glFogfv".}
proc fogi*(pname: GLenum, param: int32): void {.glew_lib, importc: "glFogi".}
proc fogiv*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glFogiv".}
proc frontFace*(mode: GLenum): void {.glew_lib, importc: "glFrontFace".}
proc frustum*(left: float64, right: float64, bottom: float64, top: float64, zNear: float64, zFar: float64): void {.glew_lib, importc: "glFrustum".}
proc genLists*(rangee: int32): uint32 {.glew_lib, importc: "glGenLists".}
proc genTextures*(n: int32, textures: ptr uint32): void {.glew_lib, importc: "glGenTextures".}
proc getBooleanv*(pname: GLenum, params: ptr bool): void {.glew_lib, importc: "glGetBooleanv".}
proc getClipPlane*(plane: GLenum, equation: ptr float64): void {.glew_lib, importc: "glGetClipPlane".}
proc getDoublev*(pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glGetDoublev".}
proc getError*(): GLenum {.glew_lib, importc: "glGetError".}
proc getFloatv*(pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetFloatv".}
proc getIntegerv*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetIntegerv".}
proc getLightfv*(light: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetLightfv".}
proc getLightiv*(light: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetLightiv".}
proc getMapdv*(target: GLenum, query: GLenum, v: ptr float64): void {.glew_lib, importc: "glGetMapdv".}
proc getMapfv*(target: GLenum, query: GLenum, v: ptr float32): void {.glew_lib, importc: "glGetMapfv".}
proc getMapiv*(target: GLenum, query: GLenum, v: ptr int32): void {.glew_lib, importc: "glGetMapiv".}
proc getMaterialfv*(face: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetMaterialfv".}
proc getMaterialiv*(face: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMaterialiv".}
proc getPixelMapfv*(map: GLenum, values: ptr float32): void {.glew_lib, importc: "glGetPixelMapfv".}
proc getPixelMapuiv*(map: GLenum, values: ptr uint32): void {.glew_lib, importc: "glGetPixelMapuiv".}
proc getPixelMapusv*(map: GLenum, values: ptr uint16): void {.glew_lib, importc: "glGetPixelMapusv".}
proc getPointerv*(pname: GLenum, params: ptr void): void {.glew_lib, importc: "glGetPointerv".}
proc getPolygonStipple*(mask: ptr uint8): void {.glew_lib, importc: "glGetPolygonStipple".}
proc getString*(name: GLenum): ptr uint8 {.glew_lib, importc: "glGetString".}
proc getTexEnvfv*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetTexEnvfv".}
proc getTexEnviv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTexEnviv".}
proc getTexGendv*(coord: GLenum, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glGetTexGendv".}
proc getTexGenfv*(coord: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetTexGenfv".}
proc getTexGeniv*(coord: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTexGeniv".}
proc getTexImage*(target: GLenum, level: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glGetTexImage".}
proc getTexLevelParameterfv*(target: GLenum, level: int32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetTexLevelParameterfv".}
proc getTexLevelParameteriv*(target: GLenum, level: int32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTexLevelParameteriv".}
proc getTexParameterfv*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetTexParameterfv".}
proc getTexParameteriv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTexParameteriv".}
proc hint*(target: GLenum, mode: GLenum): void {.glew_lib, importc: "glHint".}
proc indexMask*(mask: uint32): void {.glew_lib, importc: "glIndexMask".}
proc indexPointer*(tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glIndexPointer".}
proc indexd*(c: float64): void {.glew_lib, importc: "glIndexd".}
proc indexdv*(c: ptr float64): void {.glew_lib, importc: "glIndexdv".}
proc indexf*(c: float32): void {.glew_lib, importc: "glIndexf".}
proc indexfv*(c: ptr float32): void {.glew_lib, importc: "glIndexfv".}
proc indexi*(c: int32): void {.glew_lib, importc: "glIndexi".}
proc indexiv*(c: ptr int32): void {.glew_lib, importc: "glIndexiv".}
proc indexs*(c: int16): void {.glew_lib, importc: "glIndexs".}
proc indexsv*(c: ptr int16): void {.glew_lib, importc: "glIndexsv".}
proc indexub*(c: uint8): void {.glew_lib, importc: "glIndexub".}
proc indexubv*(c: ptr uint8): void {.glew_lib, importc: "glIndexubv".}
proc initNames*(): void {.glew_lib, importc: "glInitNames".}
proc interleavedArrays*(format: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glInterleavedArrays".}
proc isEnabled*(cap: GLenum): bool {.glew_lib, importc: "glIsEnabled".}
proc isList*(list: uint32): bool {.glew_lib, importc: "glIsList".}
proc isTexture*(texture: uint32): bool {.glew_lib, importc: "glIsTexture".}
proc lightModelf*(pname: GLenum, param: float32): void {.glew_lib, importc: "glLightModelf".}
proc lightModelfv*(pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glLightModelfv".}
proc lightModeli*(pname: GLenum, param: int32): void {.glew_lib, importc: "glLightModeli".}
proc lightModeliv*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glLightModeliv".}
proc lightf*(light: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glLightf".}
proc lightfv*(light: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glLightfv".}
proc lighti*(light: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glLighti".}
proc lightiv*(light: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glLightiv".}
proc lineStipple*(factor: int32, pattern: uint16): void {.glew_lib, importc: "glLineStipple".}
proc lineWidth*(width: float32): void {.glew_lib, importc: "glLineWidth".}
proc listBase*(base: uint32): void {.glew_lib, importc: "glListBase".}
proc loadIdentity*(): void {.glew_lib, importc: "glLoadIdentity".}
proc loadMatrixd*(m: ptr float64): void {.glew_lib, importc: "glLoadMatrixd".}
proc loadMatrixf*(m: ptr float32): void {.glew_lib, importc: "glLoadMatrixf".}
proc loadName*(name: uint32): void {.glew_lib, importc: "glLoadName".}
proc logicOp*(opcode: GLenum): void {.glew_lib, importc: "glLogicOp".}
proc map1d*(target: GLenum, u1: float64, u2: float64, stride: int32, order: int32, points: ptr float64): void {.glew_lib, importc: "glMap1d".}
proc map1f*(target: GLenum, u1: float32, u2: float32, stride: int32, order: int32, points: ptr float32): void {.glew_lib, importc: "glMap1f".}
proc map2d*(target: GLenum, u1: float64, u2: float64, ustride: int32, uorder: int32, v1: float64, v2: float64, vstride: int32, vorder: int32, points: ptr float64): void {.glew_lib, importc: "glMap2d".}
proc map2f*(target: GLenum, u1: float32, u2: float32, ustride: int32, uorder: int32, v1: float32, v2: float32, vstride: int32, vorder: int32, points: ptr float32): void {.glew_lib, importc: "glMap2f".}
proc mapGrid1d*(un: int32, u1: float64, u2: float64): void {.glew_lib, importc: "glMapGrid1d".}
proc mapGrid1f*(un: int32, u1: float32, u2: float32): void {.glew_lib, importc: "glMapGrid1f".}
proc mapGrid2d*(un: int32, u1: float64, u2: float64, vn: int32, v1: float64, v2: float64): void {.glew_lib, importc: "glMapGrid2d".}
proc mapGrid2f*(un: int32, u1: float32, u2: float32, vn: int32, v1: float32, v2: float32): void {.glew_lib, importc: "glMapGrid2f".}
proc materialf*(face: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glMaterialf".}
proc materialfv*(face: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glMaterialfv".}
proc materiali*(face: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glMateriali".}
proc materialiv*(face: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glMaterialiv".}
proc matrixMode*(mode: GLenum): void {.glew_lib, importc: "glMatrixMode".}
proc multMatrixd*(m: ptr float64): void {.glew_lib, importc: "glMultMatrixd".}
proc multMatrixf*(m: ptr float32): void {.glew_lib, importc: "glMultMatrixf".}
proc newList*(list: uint32, mode: GLenum): void {.glew_lib, importc: "glNewList".}
proc normal3b*(nx: int8, ny: int8, nz: int8): void {.glew_lib, importc: "glNormal3b".}
proc normal3bv*(v: ptr int8): void {.glew_lib, importc: "glNormal3bv".}
proc normal3d*(nx: float64, ny: float64, nz: float64): void {.glew_lib, importc: "glNormal3d".}
proc normal3dv*(v: ptr float64): void {.glew_lib, importc: "glNormal3dv".}
proc normal3f*(nx: float32, ny: float32, nz: float32): void {.glew_lib, importc: "glNormal3f".}
proc normal3fv*(v: ptr float32): void {.glew_lib, importc: "glNormal3fv".}
proc normal3i*(nx: int32, ny: int32, nz: int32): void {.glew_lib, importc: "glNormal3i".}
proc normal3iv*(v: ptr int32): void {.glew_lib, importc: "glNormal3iv".}
proc normal3s*(nx: int16, ny: int16, nz: int16): void {.glew_lib, importc: "glNormal3s".}
proc normal3sv*(v: ptr int16): void {.glew_lib, importc: "glNormal3sv".}
proc normalPointer*(tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glNormalPointer".}
proc ortho*(left: float64, right: float64, bottom: float64, top: float64, zNear: float64, zFar: float64): void {.glew_lib, importc: "glOrtho".}
proc passThrough*(token: float32): void {.glew_lib, importc: "glPassThrough".}
proc pixelMapfv*(map: GLenum, mapsize: int32, values: ptr float32): void {.glew_lib, importc: "glPixelMapfv".}
proc pixelMapuiv*(map: GLenum, mapsize: int32, values: ptr uint32): void {.glew_lib, importc: "glPixelMapuiv".}
proc pixelMapusv*(map: GLenum, mapsize: int32, values: ptr uint16): void {.glew_lib, importc: "glPixelMapusv".}
proc pixelStoref*(pname: GLenum, param: float32): void {.glew_lib, importc: "glPixelStoref".}
proc pixelStorei*(pname: GLenum, param: int32): void {.glew_lib, importc: "glPixelStorei".}
proc pixelTransferf*(pname: GLenum, param: float32): void {.glew_lib, importc: "glPixelTransferf".}
proc pixelTransferi*(pname: GLenum, param: int32): void {.glew_lib, importc: "glPixelTransferi".}
proc pixelZoom*(xfactor: float32, yfactor: float32): void {.glew_lib, importc: "glPixelZoom".}
proc pointSize*(size: float32): void {.glew_lib, importc: "glPointSize".}
proc polygonMode*(face: GLenum, mode: GLenum): void {.glew_lib, importc: "glPolygonMode".}
proc polygonOffset*(factor: float32, units: float32): void {.glew_lib, importc: "glPolygonOffset".}
proc polygonStipple*(mask: ptr uint8): void {.glew_lib, importc: "glPolygonStipple".}
proc popAttrib*(): void {.glew_lib, importc: "glPopAttrib".}
proc popClientAttrib*(): void {.glew_lib, importc: "glPopClientAttrib".}
proc popMatrix*(): void {.glew_lib, importc: "glPopMatrix".}
proc popName*(): void {.glew_lib, importc: "glPopName".}
proc prioritizeTextures*(n: int32, textures: ptr uint32, priorities: ptr float32): void {.glew_lib, importc: "glPrioritizeTextures".}
proc pushAttrib*(mask: uint32): void {.glew_lib, importc: "glPushAttrib".}
proc pushClientAttrib*(mask: uint32): void {.glew_lib, importc: "glPushClientAttrib".}
proc pushMatrix*(): void {.glew_lib, importc: "glPushMatrix".}
proc pushName*(name: uint32): void {.glew_lib, importc: "glPushName".}
proc rasterPos2d*(x: float64, y: float64): void {.glew_lib, importc: "glRasterPos2d".}
proc rasterPos2dv*(v: ptr float64): void {.glew_lib, importc: "glRasterPos2dv".}
proc rasterPos2f*(x: float32, y: float32): void {.glew_lib, importc: "glRasterPos2f".}
proc rasterPos2fv*(v: ptr float32): void {.glew_lib, importc: "glRasterPos2fv".}
proc rasterPos2i*(x: int32, y: int32): void {.glew_lib, importc: "glRasterPos2i".}
proc rasterPos2iv*(v: ptr int32): void {.glew_lib, importc: "glRasterPos2iv".}
proc rasterPos2s*(x: int16, y: int16): void {.glew_lib, importc: "glRasterPos2s".}
proc rasterPos2sv*(v: ptr int16): void {.glew_lib, importc: "glRasterPos2sv".}
proc rasterPos3d*(x: float64, y: float64, z: float64): void {.glew_lib, importc: "glRasterPos3d".}
proc rasterPos3dv*(v: ptr float64): void {.glew_lib, importc: "glRasterPos3dv".}
proc rasterPos3f*(x: float32, y: float32, z: float32): void {.glew_lib, importc: "glRasterPos3f".}
proc rasterPos3fv*(v: ptr float32): void {.glew_lib, importc: "glRasterPos3fv".}
proc rasterPos3i*(x: int32, y: int32, z: int32): void {.glew_lib, importc: "glRasterPos3i".}
proc rasterPos3iv*(v: ptr int32): void {.glew_lib, importc: "glRasterPos3iv".}
proc rasterPos3s*(x: int16, y: int16, z: int16): void {.glew_lib, importc: "glRasterPos3s".}
proc rasterPos3sv*(v: ptr int16): void {.glew_lib, importc: "glRasterPos3sv".}
proc rasterPos4d*(x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glRasterPos4d".}
proc rasterPos4dv*(v: ptr float64): void {.glew_lib, importc: "glRasterPos4dv".}
proc rasterPos4f*(x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glRasterPos4f".}
proc rasterPos4fv*(v: ptr float32): void {.glew_lib, importc: "glRasterPos4fv".}
proc rasterPos4i*(x: int32, y: int32, z: int32, w: int32): void {.glew_lib, importc: "glRasterPos4i".}
proc rasterPos4iv*(v: ptr int32): void {.glew_lib, importc: "glRasterPos4iv".}
proc rasterPos4s*(x: int16, y: int16, z: int16, w: int16): void {.glew_lib, importc: "glRasterPos4s".}
proc rasterPos4sv*(v: ptr int16): void {.glew_lib, importc: "glRasterPos4sv".}
proc readBuffer*(mode: GLenum): void {.glew_lib, importc: "glReadBuffer".}
proc readPixels*(x: int32, y: int32, width: int32, height: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glReadPixels".}
proc rectd*(x1: float64, y1: float64, x2: float64, y2: float64): void {.glew_lib, importc: "glRectd".}
proc rectdv*(v1: ptr float64, v2: ptr float64): void {.glew_lib, importc: "glRectdv".}
proc rectf*(x1: float32, y1: float32, x2: float32, y2: float32): void {.glew_lib, importc: "glRectf".}
proc rectfv*(v1: ptr float32, v2: ptr float32): void {.glew_lib, importc: "glRectfv".}
proc recti*(x1: int32, y1: int32, x2: int32, y2: int32): void {.glew_lib, importc: "glRecti".}
proc rectiv*(v1: ptr int32, v2: ptr int32): void {.glew_lib, importc: "glRectiv".}
proc rects*(x1: int16, y1: int16, x2: int16, y2: int16): void {.glew_lib, importc: "glRects".}
proc rectsv*(v1: ptr int16, v2: ptr int16): void {.glew_lib, importc: "glRectsv".}
proc renderMode*(mode: GLenum): int32 {.glew_lib, importc: "glRenderMode".}
proc rotated*(angle: float64, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glRotated".}
proc rotatef*(angle: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glRotatef".}
proc scaled*(x: float64, y: float64, z: float64): void {.glew_lib, importc: "glScaled".}
proc scalef*(x: float32, y: float32, z: float32): void {.glew_lib, importc: "glScalef".}
proc scissor*(x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glScissor".}
proc selectBuffer*(size: int32, buffer: ptr uint32): void {.glew_lib, importc: "glSelectBuffer".}
proc shadeModel*(mode: GLenum): void {.glew_lib, importc: "glShadeModel".}
proc stencilFunc*(fun: GLenum, reff: int32, mask: uint32): void {.glew_lib, importc: "glStencilFunc".}
proc stencilMask*(mask: uint32): void {.glew_lib, importc: "glStencilMask".}
proc stencilOp*(fail: GLenum, zfail: GLenum, zpass: GLenum): void {.glew_lib, importc: "glStencilOp".}
proc texCoord1d*(s: float64): void {.glew_lib, importc: "glTexCoord1d".}
proc texCoord1dv*(v: ptr float64): void {.glew_lib, importc: "glTexCoord1dv".}
proc texCoord1f*(s: float32): void {.glew_lib, importc: "glTexCoord1f".}
proc texCoord1fv*(v: ptr float32): void {.glew_lib, importc: "glTexCoord1fv".}
proc texCoord1i*(s: int32): void {.glew_lib, importc: "glTexCoord1i".}
proc texCoord1iv*(v: ptr int32): void {.glew_lib, importc: "glTexCoord1iv".}
proc texCoord1s*(s: int16): void {.glew_lib, importc: "glTexCoord1s".}
proc texCoord1sv*(v: ptr int16): void {.glew_lib, importc: "glTexCoord1sv".}
proc texCoord2d*(s: float64, t: float64): void {.glew_lib, importc: "glTexCoord2d".}
proc texCoord2dv*(v: ptr float64): void {.glew_lib, importc: "glTexCoord2dv".}
proc texCoord2f*(s: float32, t: float32): void {.glew_lib, importc: "glTexCoord2f".}
proc texCoord2fv*(v: ptr float32): void {.glew_lib, importc: "glTexCoord2fv".}
proc texCoord2i*(s: int32, t: int32): void {.glew_lib, importc: "glTexCoord2i".}
proc texCoord2iv*(v: ptr int32): void {.glew_lib, importc: "glTexCoord2iv".}
proc texCoord2s*(s: int16, t: int16): void {.glew_lib, importc: "glTexCoord2s".}
proc texCoord2sv*(v: ptr int16): void {.glew_lib, importc: "glTexCoord2sv".}
proc texCoord3d*(s: float64, t: float64, r: float64): void {.glew_lib, importc: "glTexCoord3d".}
proc texCoord3dv*(v: ptr float64): void {.glew_lib, importc: "glTexCoord3dv".}
proc texCoord3f*(s: float32, t: float32, r: float32): void {.glew_lib, importc: "glTexCoord3f".}
proc texCoord3fv*(v: ptr float32): void {.glew_lib, importc: "glTexCoord3fv".}
proc texCoord3i*(s: int32, t: int32, r: int32): void {.glew_lib, importc: "glTexCoord3i".}
proc texCoord3iv*(v: ptr int32): void {.glew_lib, importc: "glTexCoord3iv".}
proc texCoord3s*(s: int16, t: int16, r: int16): void {.glew_lib, importc: "glTexCoord3s".}
proc texCoord3sv*(v: ptr int16): void {.glew_lib, importc: "glTexCoord3sv".}
proc texCoord4d*(s: float64, t: float64, r: float64, q: float64): void {.glew_lib, importc: "glTexCoord4d".}
proc texCoord4dv*(v: ptr float64): void {.glew_lib, importc: "glTexCoord4dv".}
proc texCoord4f*(s: float32, t: float32, r: float32, q: float32): void {.glew_lib, importc: "glTexCoord4f".}
proc texCoord4fv*(v: ptr float32): void {.glew_lib, importc: "glTexCoord4fv".}
proc texCoord4i*(s: int32, t: int32, r: int32, q: int32): void {.glew_lib, importc: "glTexCoord4i".}
proc texCoord4iv*(v: ptr int32): void {.glew_lib, importc: "glTexCoord4iv".}
proc texCoord4s*(s: int16, t: int16, r: int16, q: int16): void {.glew_lib, importc: "glTexCoord4s".}
proc texCoord4sv*(v: ptr int16): void {.glew_lib, importc: "glTexCoord4sv".}
proc texCoordPointer*(size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glTexCoordPointer".}
proc texEnvf*(target: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glTexEnvf".}
proc texEnvfv*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glTexEnvfv".}
proc texEnvi*(target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glTexEnvi".}
proc texEnviv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glTexEnviv".}
proc texGend*(coord: GLenum, pname: GLenum, param: float64): void {.glew_lib, importc: "glTexGend".}
proc texGendv*(coord: GLenum, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glTexGendv".}
proc texGenf*(coord: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glTexGenf".}
proc texGenfv*(coord: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glTexGenfv".}
proc texGeni*(coord: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glTexGeni".}
proc texGeniv*(coord: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glTexGeniv".}
proc texImage1D*(target: GLenum, level: int32, internalformat: int32, width: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexImage1D".}
proc texImage2D*(target: GLenum, level: int32, internalformat: int32, width: int32, height: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexImage2D".}
proc texParameterf*(target: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glTexParameterf".}
proc texParameterfv*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glTexParameterfv".}
proc texParameteri*(target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glTexParameteri".}
proc texParameteriv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glTexParameteriv".}
proc texSubImage1D*(target: GLenum, level: int32, xoffset: int32, width: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexSubImage1D".}
proc texSubImage2D*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, width: int32, height: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexSubImage2D".}
proc translated*(x: float64, y: float64, z: float64): void {.glew_lib, importc: "glTranslated".}
proc translatef*(x: float32, y: float32, z: float32): void {.glew_lib, importc: "glTranslatef".}
proc vertex2d*(x: float64, y: float64): void {.glew_lib, importc: "glVertex2d".}
proc vertex2dv*(v: ptr float64): void {.glew_lib, importc: "glVertex2dv".}
proc vertex2f*(x: float32, y: float32): void {.glew_lib, importc: "glVertex2f".}
proc vertex2fv*(v: ptr float32): void {.glew_lib, importc: "glVertex2fv".}
proc vertex2i*(x: int32, y: int32): void {.glew_lib, importc: "glVertex2i".}
proc vertex2iv*(v: ptr int32): void {.glew_lib, importc: "glVertex2iv".}
proc vertex2s*(x: int16, y: int16): void {.glew_lib, importc: "glVertex2s".}
proc vertex2sv*(v: ptr int16): void {.glew_lib, importc: "glVertex2sv".}
proc vertex3d*(x: float64, y: float64, z: float64): void {.glew_lib, importc: "glVertex3d".}
proc vertex3dv*(v: ptr float64): void {.glew_lib, importc: "glVertex3dv".}
proc vertex3f*(x: float32, y: float32, z: float32): void {.glew_lib, importc: "glVertex3f".}
proc vertex3fv*(v: ptr float32): void {.glew_lib, importc: "glVertex3fv".}
proc vertex3i*(x: int32, y: int32, z: int32): void {.glew_lib, importc: "glVertex3i".}
proc vertex3iv*(v: ptr int32): void {.glew_lib, importc: "glVertex3iv".}
proc vertex3s*(x: int16, y: int16, z: int16): void {.glew_lib, importc: "glVertex3s".}
proc vertex3sv*(v: ptr int16): void {.glew_lib, importc: "glVertex3sv".}
proc vertex4d*(x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glVertex4d".}
proc vertex4dv*(v: ptr float64): void {.glew_lib, importc: "glVertex4dv".}
proc vertex4f*(x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glVertex4f".}
proc vertex4fv*(v: ptr float32): void {.glew_lib, importc: "glVertex4fv".}
proc vertex4i*(x: int32, y: int32, z: int32, w: int32): void {.glew_lib, importc: "glVertex4i".}
proc vertex4iv*(v: ptr int32): void {.glew_lib, importc: "glVertex4iv".}
proc vertex4s*(x: int16, y: int16, z: int16, w: int16): void {.glew_lib, importc: "glVertex4s".}
proc vertex4sv*(v: ptr int16): void {.glew_lib, importc: "glVertex4sv".}
proc vertexPointer*(size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glVertexPointer".}
proc viewport*(x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glViewport".}
proc copyTexSubImage3D*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyTexSubImage3D".}
proc drawRangeElements*(mode: GLenum, start: uint32, glEnd: uint32, count: int32, tipe: GLenum, indices: pointer): void {.glew_lib, importc: "glDrawRangeElements".}
proc texImage3D*(target: GLenum, level: int32, internalFormat: int32, width: int32, height: int32, depth: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexImage3D".}
proc texSubImage3D*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexSubImage3D".}
proc activeTexture*(texture: GLenum): void {.glew_lib, importc: "glActiveTexture".}
proc clientActiveTexture*(texture: GLenum): void {.glew_lib, importc: "glClientActiveTexture".}
proc compressedTexImage1D*(target: GLenum, level: int32, internalformat: GLenum, width: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexImage1D".}
proc compressedTexImage2D*(target: GLenum, level: int32, internalformat: GLenum, width: int32, height: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexImage2D".}
proc compressedTexImage3D*(target: GLenum, level: int32, internalformat: GLenum, width: int32, height: int32, depth: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexImage3D".}
proc compressedTexSubImage1D*(target: GLenum, level: int32, xoffset: int32, width: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexSubImage1D".}
proc compressedTexSubImage2D*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, width: int32, height: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexSubImage2D".}
proc compressedTexSubImage3D*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexSubImage3D".}
proc getCompressedTexImage*(target: GLenum, lod: int32, img: pointer): void {.glew_lib, importc: "glGetCompressedTexImage".}
proc loadTransposeMatrixd*(m: ptr float64): void {.glew_lib, importc: "glLoadTransposeMatrixd".}
proc loadTransposeMatrixf*(m: ptr float32): void {.glew_lib, importc: "glLoadTransposeMatrixf".}
proc multTransposeMatrixd*(m: ptr float64): void {.glew_lib, importc: "glMultTransposeMatrixd".}
proc multTransposeMatrixf*(m: ptr float32): void {.glew_lib, importc: "glMultTransposeMatrixf".}
proc multiTexCoord1d*(target: GLenum, s: float64): void {.glew_lib, importc: "glMultiTexCoord1d".}
proc multiTexCoord1dv*(target: GLenum, v: ptr float64): void {.glew_lib, importc: "glMultiTexCoord1dv".}
proc multiTexCoord1f*(target: GLenum, s: float32): void {.glew_lib, importc: "glMultiTexCoord1f".}
proc multiTexCoord1fv*(target: GLenum, v: ptr float32): void {.glew_lib, importc: "glMultiTexCoord1fv".}
proc multiTexCoord1i*(target: GLenum, s: int32): void {.glew_lib, importc: "glMultiTexCoord1i".}
proc multiTexCoord1iv*(target: GLenum, v: ptr int32): void {.glew_lib, importc: "glMultiTexCoord1iv".}
proc multiTexCoord1s*(target: GLenum, s: int16): void {.glew_lib, importc: "glMultiTexCoord1s".}
proc multiTexCoord1sv*(target: GLenum, v: ptr int16): void {.glew_lib, importc: "glMultiTexCoord1sv".}
proc multiTexCoord2d*(target: GLenum, s: float64, t: float64): void {.glew_lib, importc: "glMultiTexCoord2d".}
proc multiTexCoord2dv*(target: GLenum, v: ptr float64): void {.glew_lib, importc: "glMultiTexCoord2dv".}
proc multiTexCoord2f*(target: GLenum, s: float32, t: float32): void {.glew_lib, importc: "glMultiTexCoord2f".}
proc multiTexCoord2fv*(target: GLenum, v: ptr float32): void {.glew_lib, importc: "glMultiTexCoord2fv".}
proc multiTexCoord2i*(target: GLenum, s: int32, t: int32): void {.glew_lib, importc: "glMultiTexCoord2i".}
proc multiTexCoord2iv*(target: GLenum, v: ptr int32): void {.glew_lib, importc: "glMultiTexCoord2iv".}
proc multiTexCoord2s*(target: GLenum, s: int16, t: int16): void {.glew_lib, importc: "glMultiTexCoord2s".}
proc multiTexCoord2sv*(target: GLenum, v: ptr int16): void {.glew_lib, importc: "glMultiTexCoord2sv".}
proc multiTexCoord3d*(target: GLenum, s: float64, t: float64, r: float64): void {.glew_lib, importc: "glMultiTexCoord3d".}
proc multiTexCoord3dv*(target: GLenum, v: ptr float64): void {.glew_lib, importc: "glMultiTexCoord3dv".}
proc multiTexCoord3f*(target: GLenum, s: float32, t: float32, r: float32): void {.glew_lib, importc: "glMultiTexCoord3f".}
proc multiTexCoord3fv*(target: GLenum, v: ptr float32): void {.glew_lib, importc: "glMultiTexCoord3fv".}
proc multiTexCoord3i*(target: GLenum, s: int32, t: int32, r: int32): void {.glew_lib, importc: "glMultiTexCoord3i".}
proc multiTexCoord3iv*(target: GLenum, v: ptr int32): void {.glew_lib, importc: "glMultiTexCoord3iv".}
proc multiTexCoord3s*(target: GLenum, s: int16, t: int16, r: int16): void {.glew_lib, importc: "glMultiTexCoord3s".}
proc multiTexCoord3sv*(target: GLenum, v: ptr int16): void {.glew_lib, importc: "glMultiTexCoord3sv".}
proc multiTexCoord4d*(target: GLenum, s: float64, t: float64, r: float64, q: float64): void {.glew_lib, importc: "glMultiTexCoord4d".}
proc multiTexCoord4dv*(target: GLenum, v: ptr float64): void {.glew_lib, importc: "glMultiTexCoord4dv".}
proc multiTexCoord4f*(target: GLenum, s: float32, t: float32, r: float32, q: float32): void {.glew_lib, importc: "glMultiTexCoord4f".}
proc multiTexCoord4fv*(target: GLenum, v: ptr float32): void {.glew_lib, importc: "glMultiTexCoord4fv".}
proc multiTexCoord4i*(target: GLenum, s: int32, t: int32, r: int32, q: int32): void {.glew_lib, importc: "glMultiTexCoord4i".}
proc multiTexCoord4iv*(target: GLenum, v: ptr int32): void {.glew_lib, importc: "glMultiTexCoord4iv".}
proc multiTexCoord4s*(target: GLenum, s: int16, t: int16, r: int16, q: int16): void {.glew_lib, importc: "glMultiTexCoord4s".}
proc multiTexCoord4sv*(target: GLenum, v: ptr int16): void {.glew_lib, importc: "glMultiTexCoord4sv".}
proc sampleCoverage*(value: float32, invert: bool): void {.glew_lib, importc: "glSampleCoverage".}
proc blendColor*(red: float32, green: float32, blue: float32, alpha: float32): void {.glew_lib, importc: "glBlendColor".}
proc blendEquation*(mode: GLenum): void {.glew_lib, importc: "glBlendEquation".}
proc blendFuncSeparate*(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum): void {.glew_lib, importc: "glBlendFuncSeparate".}
proc fogCoordPointer*(tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glFogCoordPointer".}
proc fogCoordd*(coord: float64): void {.glew_lib, importc: "glFogCoordd".}
proc fogCoorddv*(coord: ptr float64): void {.glew_lib, importc: "glFogCoorddv".}
proc fogCoordf*(coord: float32): void {.glew_lib, importc: "glFogCoordf".}
proc fogCoordfv*(coord: ptr float32): void {.glew_lib, importc: "glFogCoordfv".}
proc multiDrawArrays*(mode: GLenum, first: ptr int32, count: ptr int32, drawcount: int32): void {.glew_lib, importc: "glMultiDrawArrays".}
proc multiDrawElements*(mode: GLenum, count: ptr int32, tipe: GLenum, indices: ptr void, drawcount: int32): void {.glew_lib, importc: "glMultiDrawElements".}
proc pointParameterf*(pname: GLenum, param: float32): void {.glew_lib, importc: "glPointParameterf".}
proc pointParameterfv*(pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glPointParameterfv".}
proc pointParameteri*(pname: GLenum, param: int32): void {.glew_lib, importc: "glPointParameteri".}
proc pointParameteriv*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glPointParameteriv".}
proc secondaryColor3b*(red: int8, green: int8, blue: int8): void {.glew_lib, importc: "glSecondaryColor3b".}
proc secondaryColor3bv*(v: ptr int8): void {.glew_lib, importc: "glSecondaryColor3bv".}
proc secondaryColor3d*(red: float64, green: float64, blue: float64): void {.glew_lib, importc: "glSecondaryColor3d".}
proc secondaryColor3dv*(v: ptr float64): void {.glew_lib, importc: "glSecondaryColor3dv".}
proc secondaryColor3f*(red: float32, green: float32, blue: float32): void {.glew_lib, importc: "glSecondaryColor3f".}
proc secondaryColor3fv*(v: ptr float32): void {.glew_lib, importc: "glSecondaryColor3fv".}
proc secondaryColor3i*(red: int32, green: int32, blue: int32): void {.glew_lib, importc: "glSecondaryColor3i".}
proc secondaryColor3iv*(v: ptr int32): void {.glew_lib, importc: "glSecondaryColor3iv".}
proc secondaryColor3s*(red: int16, green: int16, blue: int16): void {.glew_lib, importc: "glSecondaryColor3s".}
proc secondaryColor3sv*(v: ptr int16): void {.glew_lib, importc: "glSecondaryColor3sv".}
proc secondaryColor3ub*(red: uint8, green: uint8, blue: uint8): void {.glew_lib, importc: "glSecondaryColor3ub".}
proc secondaryColor3ubv*(v: ptr uint8): void {.glew_lib, importc: "glSecondaryColor3ubv".}
proc secondaryColor3ui*(red: uint32, green: uint32, blue: uint32): void {.glew_lib, importc: "glSecondaryColor3ui".}
proc secondaryColor3uiv*(v: ptr uint32): void {.glew_lib, importc: "glSecondaryColor3uiv".}
proc secondaryColor3us*(red: uint16, green: uint16, blue: uint16): void {.glew_lib, importc: "glSecondaryColor3us".}
proc secondaryColor3usv*(v: ptr uint16): void {.glew_lib, importc: "glSecondaryColor3usv".}
proc secondaryColorPointer*(size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glSecondaryColorPointer".}
proc windowPos2d*(x: float64, y: float64): void {.glew_lib, importc: "glWindowPos2d".}
proc windowPos2dv*(p: ptr float64): void {.glew_lib, importc: "glWindowPos2dv".}
proc windowPos2f*(x: float32, y: float32): void {.glew_lib, importc: "glWindowPos2f".}
proc windowPos2fv*(p: ptr float32): void {.glew_lib, importc: "glWindowPos2fv".}
proc windowPos2i*(x: int32, y: int32): void {.glew_lib, importc: "glWindowPos2i".}
proc windowPos2iv*(p: ptr int32): void {.glew_lib, importc: "glWindowPos2iv".}
proc windowPos2s*(x: int16, y: int16): void {.glew_lib, importc: "glWindowPos2s".}
proc windowPos2sv*(p: ptr int16): void {.glew_lib, importc: "glWindowPos2sv".}
proc windowPos3d*(x: float64, y: float64, z: float64): void {.glew_lib, importc: "glWindowPos3d".}
proc windowPos3dv*(p: ptr float64): void {.glew_lib, importc: "glWindowPos3dv".}
proc windowPos3f*(x: float32, y: float32, z: float32): void {.glew_lib, importc: "glWindowPos3f".}
proc windowPos3fv*(p: ptr float32): void {.glew_lib, importc: "glWindowPos3fv".}
proc windowPos3i*(x: int32, y: int32, z: int32): void {.glew_lib, importc: "glWindowPos3i".}
proc windowPos3iv*(p: ptr int32): void {.glew_lib, importc: "glWindowPos3iv".}
proc windowPos3s*(x: int16, y: int16, z: int16): void {.glew_lib, importc: "glWindowPos3s".}
proc windowPos3sv*(p: ptr int16): void {.glew_lib, importc: "glWindowPos3sv".}
proc beginQuery*(target: GLenum, id: uint32): void {.glew_lib, importc: "glBeginQuery".}
proc bindBuffer*(target: GLenum, buffer: uint32): void {.glew_lib, importc: "glBindBuffer".}
proc bufferData*(target: GLenum, size: int32, data: pointer, usage: GLenum): void {.glew_lib, importc: "glBufferData".}
proc bufferSubData*(target: GLenum, offset: int32, size: int32, data: pointer): void {.glew_lib, importc: "glBufferSubData".}
proc deleteBuffers*(n: int32, buffers: ptr uint32): void {.glew_lib, importc: "glDeleteBuffers".}
proc deleteQueries*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glDeleteQueries".}
proc endQuery*(target: GLenum): void {.glew_lib, importc: "glEndQuery".}
proc genBuffers*(n: int32, buffers: ptr uint32): void {.glew_lib, importc: "glGenBuffers".}
proc genQueries*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glGenQueries".}
proc getBufferParameteriv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetBufferParameteriv".}
proc getBufferPointerv*(target: GLenum, pname: GLenum, params: ptr void): void {.glew_lib, importc: "glGetBufferPointerv".}
proc getBufferSubData*(target: GLenum, offset: int32, size: int32, data: pointer): void {.glew_lib, importc: "glGetBufferSubData".}
proc getQueryObjectiv*(id: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetQueryObjectiv".}
proc getQueryObjectuiv*(id: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetQueryObjectuiv".}
proc getQueryiv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetQueryiv".}
proc isBuffer*(buffer: uint32): bool {.glew_lib, importc: "glIsBuffer".}
proc isQuery*(id: uint32): bool {.glew_lib, importc: "glIsQuery".}
proc mapBuffer*(target: GLenum, access: GLenum): ptr void {.glew_lib, importc: "glMapBuffer".}
proc unmapBuffer*(target: GLenum): bool {.glew_lib, importc: "glUnmapBuffer".}
proc attachShader*(program: uint32, shader: uint32): void {.glew_lib, importc: "glAttachShader".}
proc bindAttribLocation*(program: uint32, index: uint32, name: cstring): void {.glew_lib, importc: "glBindAttribLocation".}
proc blendEquationSeparate*(modeRGB: GLenum, modeAlpha: GLenum): void {.glew_lib, importc: "glBlendEquationSeparate".}
proc compileShader*(shader: uint32): void {.glew_lib, importc: "glCompileShader".}
proc createProgram*(): uint32 {.glew_lib, importc: "glCreateProgram".}
proc createShader*(tipe: GLenum): uint32 {.glew_lib, importc: "glCreateShader".}
proc deleteProgram*(program: uint32): void {.glew_lib, importc: "glDeleteProgram".}
proc deleteShader*(shader: uint32): void {.glew_lib, importc: "glDeleteShader".}
proc detachShader*(program: uint32, shader: uint32): void {.glew_lib, importc: "glDetachShader".}
proc disableVertexAttribArray*(index: uint32): void {.glew_lib, importc: "glDisableVertexAttribArray".}
proc drawBuffers*(n: int32, bufs: ptr GLenum): void {.glew_lib, importc: "glDrawBuffers".}
proc enableVertexAttribArray*(index: uint32): void {.glew_lib, importc: "glEnableVertexAttribArray".}
proc getActiveAttrib*(program: uint32, index: uint32, maxLength: int32, length: ptr int32, size: ptr int32, tipe: ptr GLenum, name: ptr char): void {.glew_lib, importc: "glGetActiveAttrib".}
proc getActiveUniform*(program: uint32, index: uint32, maxLength: int32, length: ptr int32, size: ptr int32, tipe: ptr GLenum, name: ptr char): void {.glew_lib, importc: "glGetActiveUniform".}
proc getAttachedShaders*(program: uint32, maxCount: int32, count: ptr int32, shaders: ptr uint32): void {.glew_lib, importc: "glGetAttachedShaders".}
proc getAttribLocation*(program: uint32, name: cstring): int32 {.glew_lib, importc: "glGetAttribLocation".}
proc getProgramInfoLog*(program: uint32, bufSize: int32, length: ptr int32, infoLog: ptr char): void {.glew_lib, importc: "glGetProgramInfoLog".}
proc getProgramiv*(program: uint32, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glGetProgramiv".}
proc getShaderInfoLog*(shader: uint32, bufSize: int32, length: ptr int32, infoLog: ptr char): void {.glew_lib, importc: "glGetShaderInfoLog".}
proc getShaderSource*(obj: uint32, maxLength: int32, length: ptr int32, source: ptr char): void {.glew_lib, importc: "glGetShaderSource".}
proc getShaderiv*(shader: uint32, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glGetShaderiv".}
proc getUniformLocation*(program: uint32, name: cstring): int32 {.glew_lib, importc: "glGetUniformLocation".}
proc getUniformfv*(program: uint32, location: int32, params: ptr float32): void {.glew_lib, importc: "glGetUniformfv".}
proc getUniformiv*(program: uint32, location: int32, params: ptr int32): void {.glew_lib, importc: "glGetUniformiv".}
proc getVertexAttribPointerv*(index: uint32, pname: GLenum, poynter: ptr void): void {.glew_lib, importc: "glGetVertexAttribPointerv".}
proc getVertexAttribdv*(index: uint32, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glGetVertexAttribdv".}
proc getVertexAttribfv*(index: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetVertexAttribfv".}
proc getVertexAttribiv*(index: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetVertexAttribiv".}
proc isProgram*(program: uint32): bool {.glew_lib, importc: "glIsProgram".}
proc isShader*(shader: uint32): bool {.glew_lib, importc: "glIsShader".}
proc linkProgram*(program: uint32): void {.glew_lib, importc: "glLinkProgram".}
proc shaderSource*(shader: uint32, count: int32, stryng: ptr cstring, length: ptr int32): void {.glew_lib, importc: "glShaderSource".}
proc stencilFuncSeparate*(frontfunc: GLenum, backfunc: GLenum, reff: int32, mask: uint32): void {.glew_lib, importc: "glStencilFuncSeparate".}
proc stencilMaskSeparate*(face: GLenum, mask: uint32): void {.glew_lib, importc: "glStencilMaskSeparate".}
proc stencilOpSeparate*(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum): void {.glew_lib, importc: "glStencilOpSeparate".}
proc uniform1f*(location: int32, v0: float32): void {.glew_lib, importc: "glUniform1f".}
proc uniform1fv*(location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glUniform1fv".}
proc uniform1i*(location: int32, v0: int32): void {.glew_lib, importc: "glUniform1i".}
proc uniform1iv*(location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glUniform1iv".}
proc uniform2f*(location: int32, v0: float32, v1: float32): void {.glew_lib, importc: "glUniform2f".}
proc uniform2fv*(location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glUniform2fv".}
proc uniform2i*(location: int32, v0: int32, v1: int32): void {.glew_lib, importc: "glUniform2i".}
proc uniform2iv*(location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glUniform2iv".}
proc uniform3f*(location: int32, v0: float32, v1: float32, v2: float32): void {.glew_lib, importc: "glUniform3f".}
proc uniform3fv*(location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glUniform3fv".}
proc uniform3i*(location: int32, v0: int32, v1: int32, v2: int32): void {.glew_lib, importc: "glUniform3i".}
proc uniform3iv*(location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glUniform3iv".}
proc uniform4f*(location: int32, v0: float32, v1: float32, v2: float32, v3: float32): void {.glew_lib, importc: "glUniform4f".}
proc uniform4fv*(location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glUniform4fv".}
proc uniform4i*(location: int32, v0: int32, v1: int32, v2: int32, v3: int32): void {.glew_lib, importc: "glUniform4i".}
proc uniform4iv*(location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glUniform4iv".}
proc uniformMatrix2fv*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix2fv".}
proc uniformMatrix3fv*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix3fv".}
proc uniformMatrix4fv*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix4fv".}
proc useProgram*(program: uint32): void {.glew_lib, importc: "glUseProgram".}
proc validateProgram*(program: uint32): void {.glew_lib, importc: "glValidateProgram".}
proc vertexAttrib1d*(index: uint32, x: float64): void {.glew_lib, importc: "glVertexAttrib1d".}
proc vertexAttrib1dv*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib1dv".}
proc vertexAttrib1f*(index: uint32, x: float32): void {.glew_lib, importc: "glVertexAttrib1f".}
proc vertexAttrib1fv*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib1fv".}
proc vertexAttrib1s*(index: uint32, x: int16): void {.glew_lib, importc: "glVertexAttrib1s".}
proc vertexAttrib1sv*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib1sv".}
proc vertexAttrib2d*(index: uint32, x: float64, y: float64): void {.glew_lib, importc: "glVertexAttrib2d".}
proc vertexAttrib2dv*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib2dv".}
proc vertexAttrib2f*(index: uint32, x: float32, y: float32): void {.glew_lib, importc: "glVertexAttrib2f".}
proc vertexAttrib2fv*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib2fv".}
proc vertexAttrib2s*(index: uint32, x: int16, y: int16): void {.glew_lib, importc: "glVertexAttrib2s".}
proc vertexAttrib2sv*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib2sv".}
proc vertexAttrib3d*(index: uint32, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glVertexAttrib3d".}
proc vertexAttrib3dv*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib3dv".}
proc vertexAttrib3f*(index: uint32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glVertexAttrib3f".}
proc vertexAttrib3fv*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib3fv".}
proc vertexAttrib3s*(index: uint32, x: int16, y: int16, z: int16): void {.glew_lib, importc: "glVertexAttrib3s".}
proc vertexAttrib3sv*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib3sv".}
proc vertexAttrib4Nbv*(index: uint32, v: ptr int8): void {.glew_lib, importc: "glVertexAttrib4Nbv".}
proc vertexAttrib4Niv*(index: uint32, v: ptr int32): void {.glew_lib, importc: "glVertexAttrib4Niv".}
proc vertexAttrib4Nsv*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib4Nsv".}
proc vertexAttrib4Nub*(index: uint32, x: uint8, y: uint8, z: uint8, w: uint8): void {.glew_lib, importc: "glVertexAttrib4Nub".}
proc vertexAttrib4Nubv*(index: uint32, v: ptr uint8): void {.glew_lib, importc: "glVertexAttrib4Nubv".}
proc vertexAttrib4Nuiv*(index: uint32, v: ptr uint32): void {.glew_lib, importc: "glVertexAttrib4Nuiv".}
proc vertexAttrib4Nusv*(index: uint32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttrib4Nusv".}
proc vertexAttrib4bv*(index: uint32, v: ptr int8): void {.glew_lib, importc: "glVertexAttrib4bv".}
proc vertexAttrib4d*(index: uint32, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glVertexAttrib4d".}
proc vertexAttrib4dv*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib4dv".}
proc vertexAttrib4f*(index: uint32, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glVertexAttrib4f".}
proc vertexAttrib4fv*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib4fv".}
proc vertexAttrib4iv*(index: uint32, v: ptr int32): void {.glew_lib, importc: "glVertexAttrib4iv".}
proc vertexAttrib4s*(index: uint32, x: int16, y: int16, z: int16, w: int16): void {.glew_lib, importc: "glVertexAttrib4s".}
proc vertexAttrib4sv*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib4sv".}
proc vertexAttrib4ubv*(index: uint32, v: ptr uint8): void {.glew_lib, importc: "glVertexAttrib4ubv".}
proc vertexAttrib4uiv*(index: uint32, v: ptr uint32): void {.glew_lib, importc: "glVertexAttrib4uiv".}
proc vertexAttrib4usv*(index: uint32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttrib4usv".}
proc vertexAttribPointer*(index: uint32, size: int32, tipe: GLenum, normalized: bool, stride: int32, poynter: pointer): void {.glew_lib, importc: "glVertexAttribPointer".}
proc uniformMatrix2x3fv*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix2x3fv".}
proc uniformMatrix2x4fv*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix2x4fv".}
proc uniformMatrix3x2fv*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix3x2fv".}
proc uniformMatrix3x4fv*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix3x4fv".}
proc uniformMatrix4x2fv*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix4x2fv".}
proc uniformMatrix4x3fv*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix4x3fv".}
proc beginConditionalRender*(id: uint32, mode: GLenum): void {.glew_lib, importc: "glBeginConditionalRender".}
proc beginTransformFeedback*(primitiveMode: GLenum): void {.glew_lib, importc: "glBeginTransformFeedback".}
proc bindFragDataLocation*(program: uint32, colorNumber: uint32, name: cstring): void {.glew_lib, importc: "glBindFragDataLocation".}
proc clampColor*(target: GLenum, clamp: GLenum): void {.glew_lib, importc: "glClampColor".}
proc clearBufferfi*(buffer: GLenum, drawBuffer: int32, depth: float32, stencil: int32): void {.glew_lib, importc: "glClearBufferfi".}
proc clearBufferfv*(buffer: GLenum, drawBuffer: int32, value: ptr float32): void {.glew_lib, importc: "glClearBufferfv".}
proc clearBufferiv*(buffer: GLenum, drawBuffer: int32, value: ptr int32): void {.glew_lib, importc: "glClearBufferiv".}
proc clearBufferuiv*(buffer: GLenum, drawBuffer: int32, value: ptr uint32): void {.glew_lib, importc: "glClearBufferuiv".}
proc colorMaski*(buf: uint32, red: bool, green: bool, blue: bool, alpha: bool): void {.glew_lib, importc: "glColorMaski".}
proc disablei*(cap: GLenum, index: uint32): void {.glew_lib, importc: "glDisablei".}
proc enablei*(cap: GLenum, index: uint32): void {.glew_lib, importc: "glEnablei".}
proc endConditionalRender*(): void {.glew_lib, importc: "glEndConditionalRender".}
proc endTransformFeedback*(): void {.glew_lib, importc: "glEndTransformFeedback".}
proc getBooleani_v*(pname: GLenum, index: uint32, data: ptr bool): void {.glew_lib, importc: "glGetBooleani_v".}
proc getFragDataLocation*(program: uint32, name: cstring): int32 {.glew_lib, importc: "glGetFragDataLocation".}
proc getStringi*(name: GLenum, index: uint32): ptr uint8 {.glew_lib, importc: "glGetStringi".}
proc getTexParameterIiv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTexParameterIiv".}
proc getTexParameterIuiv*(target: GLenum, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetTexParameterIuiv".}
proc getTransformFeedbackVarying*(program: uint32, index: uint32, bufSize: int32, length: ptr int32, size: ptr int32, tipe: ptr GLenum, name: ptr char): void {.glew_lib, importc: "glGetTransformFeedbackVarying".}
proc getUniformuiv*(program: uint32, location: int32, params: ptr uint32): void {.glew_lib, importc: "glGetUniformuiv".}
proc getVertexAttribIiv*(index: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetVertexAttribIiv".}
proc getVertexAttribIuiv*(index: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetVertexAttribIuiv".}
proc isEnabledi*(cap: GLenum, index: uint32): bool {.glew_lib, importc: "glIsEnabledi".}
proc texParameterIiv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glTexParameterIiv".}
proc texParameterIuiv*(target: GLenum, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glTexParameterIuiv".}
proc transformFeedbackVaryings*(program: uint32, count: int32, varyings: ptr cstring, bufferMode: GLenum): void {.glew_lib, importc: "glTransformFeedbackVaryings".}
proc uniform1ui*(location: int32, v0: uint32): void {.glew_lib, importc: "glUniform1ui".}
proc uniform1uiv*(location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glUniform1uiv".}
proc uniform2ui*(location: int32, v0: uint32, v1: uint32): void {.glew_lib, importc: "glUniform2ui".}
proc uniform2uiv*(location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glUniform2uiv".}
proc uniform3ui*(location: int32, v0: uint32, v1: uint32, v2: uint32): void {.glew_lib, importc: "glUniform3ui".}
proc uniform3uiv*(location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glUniform3uiv".}
proc uniform4ui*(location: int32, v0: uint32, v1: uint32, v2: uint32, v3: uint32): void {.glew_lib, importc: "glUniform4ui".}
proc uniform4uiv*(location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glUniform4uiv".}
proc vertexAttribI1i*(index: uint32, v0: int32): void {.glew_lib, importc: "glVertexAttribI1i".}
proc vertexAttribI1iv*(index: uint32, v0: ptr int32): void {.glew_lib, importc: "glVertexAttribI1iv".}
proc vertexAttribI1ui*(index: uint32, v0: uint32): void {.glew_lib, importc: "glVertexAttribI1ui".}
proc vertexAttribI1uiv*(index: uint32, v0: ptr uint32): void {.glew_lib, importc: "glVertexAttribI1uiv".}
proc vertexAttribI2i*(index: uint32, v0: int32, v1: int32): void {.glew_lib, importc: "glVertexAttribI2i".}
proc vertexAttribI2iv*(index: uint32, v0: ptr int32): void {.glew_lib, importc: "glVertexAttribI2iv".}
proc vertexAttribI2ui*(index: uint32, v0: uint32, v1: uint32): void {.glew_lib, importc: "glVertexAttribI2ui".}
proc vertexAttribI2uiv*(index: uint32, v0: ptr uint32): void {.glew_lib, importc: "glVertexAttribI2uiv".}
proc vertexAttribI3i*(index: uint32, v0: int32, v1: int32, v2: int32): void {.glew_lib, importc: "glVertexAttribI3i".}
proc vertexAttribI3iv*(index: uint32, v0: ptr int32): void {.glew_lib, importc: "glVertexAttribI3iv".}
proc vertexAttribI3ui*(index: uint32, v0: uint32, v1: uint32, v2: uint32): void {.glew_lib, importc: "glVertexAttribI3ui".}
proc vertexAttribI3uiv*(index: uint32, v0: ptr uint32): void {.glew_lib, importc: "glVertexAttribI3uiv".}
proc vertexAttribI4bv*(index: uint32, v0: ptr int8): void {.glew_lib, importc: "glVertexAttribI4bv".}
proc vertexAttribI4i*(index: uint32, v0: int32, v1: int32, v2: int32, v3: int32): void {.glew_lib, importc: "glVertexAttribI4i".}
proc vertexAttribI4iv*(index: uint32, v0: ptr int32): void {.glew_lib, importc: "glVertexAttribI4iv".}
proc vertexAttribI4sv*(index: uint32, v0: ptr int16): void {.glew_lib, importc: "glVertexAttribI4sv".}
proc vertexAttribI4ubv*(index: uint32, v0: ptr uint8): void {.glew_lib, importc: "glVertexAttribI4ubv".}
proc vertexAttribI4ui*(index: uint32, v0: uint32, v1: uint32, v2: uint32, v3: uint32): void {.glew_lib, importc: "glVertexAttribI4ui".}
proc vertexAttribI4uiv*(index: uint32, v0: ptr uint32): void {.glew_lib, importc: "glVertexAttribI4uiv".}
proc vertexAttribI4usv*(index: uint32, v0: ptr uint16): void {.glew_lib, importc: "glVertexAttribI4usv".}
proc vertexAttribIPointer*(index: uint32, size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glVertexAttribIPointer".}
proc drawArraysInstanced*(mode: GLenum, first: int32, count: int32, primcount: int32): void {.glew_lib, importc: "glDrawArraysInstanced".}
proc drawElementsInstanced*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, primcount: int32): void {.glew_lib, importc: "glDrawElementsInstanced".}
proc primitiveRestartIndex*(buffer: uint32): void {.glew_lib, importc: "glPrimitiveRestartIndex".}
proc texBuffer*(target: GLenum, internalFormat: GLenum, buffer: uint32): void {.glew_lib, importc: "glTexBuffer".}
proc framebufferTexture*(target: GLenum, attachment: GLenum, texture: uint32, level: int32): void {.glew_lib, importc: "glFramebufferTexture".}
proc getBufferParameteri64v*(target: GLenum, value: GLenum, data: ptr int64): void {.glew_lib, importc: "glGetBufferParameteri64v".}
proc getInteger64i_v*(pname: GLenum, index: uint32, data: ptr int64): void {.glew_lib, importc: "glGetInteger64i_v".}
proc vertexAttribDivisor*(index: uint32, divisor: uint32): void {.glew_lib, importc: "glVertexAttribDivisor".}
proc blendEquationSeparatei*(buf: uint32, modeRGB: GLenum, modeAlpha: GLenum): void {.glew_lib, importc: "glBlendEquationSeparatei".}
proc blendEquationi*(buf: uint32, mode: GLenum): void {.glew_lib, importc: "glBlendEquationi".}
proc blendFuncSeparatei*(buf: uint32, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.glew_lib, importc: "glBlendFuncSeparatei".}
proc blendFunci*(buf: uint32, src: GLenum, dst: GLenum): void {.glew_lib, importc: "glBlendFunci".}
proc minSampleShading*(value: float32): void {.glew_lib, importc: "glMinSampleShading".}
proc getGraphicsResetStatus*(): GLenum {.glew_lib, importc: "glGetGraphicsResetStatus".}
proc getnCompressedTexImage*(target: GLenum, lod: int32, bufSize: int32, pixels: ptr pointer): void {.glew_lib, importc: "glGetnCompressedTexImage".}
proc getnTexImage*(tex: GLenum, level: int32, format: GLenum, tipe: GLenum, bufSize: int32, pixels: ptr pointer): void {.glew_lib, importc: "glGetnTexImage".}
proc getnUniformdv*(program: uint32, location: int32, bufSize: int32, params: ptr float64): void {.glew_lib, importc: "glGetnUniformdv".}
proc multiDrawArraysIndirectCount*(mode: GLenum, indirect: ptr pointer, drawcount: int32, maxdrawcount: int32, stride: int32): void {.glew_lib, importc: "glMultiDrawArraysIndirectCount".}
proc multiDrawElementsIndirectCount*(mode: GLenum, tipe: GLenum, indirect: ptr pointer, drawcount: int32, maxdrawcount: int32, stride: int32): void {.glew_lib, importc: "glMultiDrawElementsIndirectCount".}
proc specializeShader*(shader: uint32, pEntryPoint: cstring, numSpecializationConstants: uint32, pConstantIndex: ptr uint32, pConstantValue: ptr uint32): void {.glew_lib, importc: "glSpecializeShader".}
proc tbufferMask3DFX*(mask: uint32): void {.glew_lib, importc: "glTbufferMask3DFX".}
proc debugMessageEnableAMD*(category: GLenum, severity: GLenum, count: int32, ids: ptr uint32, enabled: bool): void {.glew_lib, importc: "glDebugMessageEnableAMD".}
proc debugMessageInsertAMD*(category: GLenum, severity: GLenum, id: uint32, length: int32, buf: cstring): void {.glew_lib, importc: "glDebugMessageInsertAMD".}
proc getDebugMessageLogAMD*(count: uint32, bufsize: int32, categories: ptr GLenum, severities: ptr uint32, ids: ptr uint32, lengths: ptr int32, message: ptr char): uint32 {.glew_lib, importc: "glGetDebugMessageLogAMD".}
proc blendEquationIndexedAMD*(buf: uint32, mode: GLenum): void {.glew_lib, importc: "glBlendEquationIndexedAMD".}
proc blendEquationSeparateIndexedAMD*(buf: uint32, modeRGB: GLenum, modeAlpha: GLenum): void {.glew_lib, importc: "glBlendEquationSeparateIndexedAMD".}
proc blendFuncIndexedAMD*(buf: uint32, src: GLenum, dst: GLenum): void {.glew_lib, importc: "glBlendFuncIndexedAMD".}
proc blendFuncSeparateIndexedAMD*(buf: uint32, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.glew_lib, importc: "glBlendFuncSeparateIndexedAMD".}
proc framebufferSamplePositionsfvAMD*(target: GLenum, numsamples: uint32, pixelindex: uint32, values: ptr float32): void {.glew_lib, importc: "glFramebufferSamplePositionsfvAMD".}
proc getFramebufferParameterfvAMD*(target: GLenum, pname: GLenum, numsamples: uint32, pixelindex: uint32, size: int32, values: ptr float32): void {.glew_lib, importc: "glGetFramebufferParameterfvAMD".}
proc getNamedFramebufferParameterfvAMD*(framebuffer: uint32, pname: GLenum, numsamples: uint32, pixelindex: uint32, size: int32, values: ptr float32): void {.glew_lib, importc: "glGetNamedFramebufferParameterfvAMD".}
proc namedFramebufferSamplePositionsfvAMD*(framebuffer: uint32, numsamples: uint32, pixelindex: uint32, values: ptr float32): void {.glew_lib, importc: "glNamedFramebufferSamplePositionsfvAMD".}
proc vertexAttribParameteriAMD*(index: uint32, pname: GLenum, param: int32): void {.glew_lib, importc: "glVertexAttribParameteriAMD".}
proc multiDrawArraysIndirectAMD*(mode: GLenum, indirect: pointer, primcount: int32, stride: int32): void {.glew_lib, importc: "glMultiDrawArraysIndirectAMD".}
proc multiDrawElementsIndirectAMD*(mode: GLenum, tipe: GLenum, indirect: pointer, primcount: int32, stride: int32): void {.glew_lib, importc: "glMultiDrawElementsIndirectAMD".}
proc deleteNamesAMD*(identifier: GLenum, num: uint32, names: ptr uint32): void {.glew_lib, importc: "glDeleteNamesAMD".}
proc genNamesAMD*(identifier: GLenum, num: uint32, names: ptr uint32): void {.glew_lib, importc: "glGenNamesAMD".}
proc isNameAMD*(identifier: GLenum, name: uint32): bool {.glew_lib, importc: "glIsNameAMD".}
proc queryObjectParameteruiAMD*(target: GLenum, id: uint32, pname: GLenum, param: uint32): void {.glew_lib, importc: "glQueryObjectParameteruiAMD".}
proc beginPerfMonitorAMD*(monitor: uint32): void {.glew_lib, importc: "glBeginPerfMonitorAMD".}
proc deletePerfMonitorsAMD*(n: int32, monitors: ptr uint32): void {.glew_lib, importc: "glDeletePerfMonitorsAMD".}
proc endPerfMonitorAMD*(monitor: uint32): void {.glew_lib, importc: "glEndPerfMonitorAMD".}
proc genPerfMonitorsAMD*(n: int32, monitors: ptr uint32): void {.glew_lib, importc: "glGenPerfMonitorsAMD".}
proc getPerfMonitorCounterDataAMD*(monitor: uint32, pname: GLenum, dataSize: int32, data: ptr uint32, bytesWritten: ptr int32): void {.glew_lib, importc: "glGetPerfMonitorCounterDataAMD".}
proc getPerfMonitorCounterInfoAMD*(group: uint32, counter: uint32, pname: GLenum, data: pointer): void {.glew_lib, importc: "glGetPerfMonitorCounterInfoAMD".}
proc getPerfMonitorCounterStringAMD*(group: uint32, counter: uint32, bufSize: int32, length: ptr int32, counterString: ptr char): void {.glew_lib, importc: "glGetPerfMonitorCounterStringAMD".}
proc getPerfMonitorCountersAMD*(group: uint32, numCounters: ptr int32, maxActiveCounters: ptr int32, countersSize: int32, counters: ptr uint32): void {.glew_lib, importc: "glGetPerfMonitorCountersAMD".}
proc getPerfMonitorGroupStringAMD*(group: uint32, bufSize: int32, length: ptr int32, groupString: ptr char): void {.glew_lib, importc: "glGetPerfMonitorGroupStringAMD".}
proc getPerfMonitorGroupsAMD*(numGroups: ptr int32, groupsSize: int32, groups: ptr uint32): void {.glew_lib, importc: "glGetPerfMonitorGroupsAMD".}
proc selectPerfMonitorCountersAMD*(monitor: uint32, enable: bool, group: uint32, numCounters: int32, counterList: ptr uint32): void {.glew_lib, importc: "glSelectPerfMonitorCountersAMD".}
proc setMultisamplefvAMD*(pname: GLenum, index: uint32, val: ptr float32): void {.glew_lib, importc: "glSetMultisamplefvAMD".}
proc texStorageSparseAMD*(target: GLenum, internalFormat: GLenum, width: int32, height: int32, depth: int32, layers: int32, flags: uint32): void {.glew_lib, importc: "glTexStorageSparseAMD".}
proc textureStorageSparseAMD*(texture: uint32, target: GLenum, internalFormat: GLenum, width: int32, height: int32, depth: int32, layers: int32, flags: uint32): void {.glew_lib, importc: "glTextureStorageSparseAMD".}
proc stencilOpValueAMD*(face: GLenum, value: uint32): void {.glew_lib, importc: "glStencilOpValueAMD".}
proc tessellationFactorAMD*(factor: float32): void {.glew_lib, importc: "glTessellationFactorAMD".}
proc tessellationModeAMD*(mode: GLenum): void {.glew_lib, importc: "glTessellationModeAMD".}
proc blitFramebufferANGLE*(srcX0: int32, srcY0: int32, srcX1: int32, srcY1: int32, dstX0: int32, dstY0: int32, dstX1: int32, dstY1: int32, mask: uint32, filter: GLenum): void {.glew_lib, importc: "glBlitFramebufferANGLE".}
proc renderbufferStorageMultisampleANGLE*(target: GLenum, samples: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glRenderbufferStorageMultisampleANGLE".}
proc drawArraysInstancedANGLE*(mode: GLenum, first: int32, count: int32, primcount: int32): void {.glew_lib, importc: "glDrawArraysInstancedANGLE".}
proc drawElementsInstancedANGLE*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, primcount: int32): void {.glew_lib, importc: "glDrawElementsInstancedANGLE".}
proc vertexAttribDivisorANGLE*(index: uint32, divisor: uint32): void {.glew_lib, importc: "glVertexAttribDivisorANGLE".}
proc beginQueryANGLE*(target: GLenum, id: uint32): void {.glew_lib, importc: "glBeginQueryANGLE".}
proc deleteQueriesANGLE*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glDeleteQueriesANGLE".}
proc endQueryANGLE*(target: GLenum): void {.glew_lib, importc: "glEndQueryANGLE".}
proc genQueriesANGLE*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glGenQueriesANGLE".}
proc getQueryObjecti64vANGLE*(id: uint32, pname: GLenum, params: ptr int64): void {.glew_lib, importc: "glGetQueryObjecti64vANGLE".}
proc getQueryObjectivANGLE*(id: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetQueryObjectivANGLE".}
proc getQueryObjectui64vANGLE*(id: uint32, pname: GLenum, params: ptr uint64): void {.glew_lib, importc: "glGetQueryObjectui64vANGLE".}
proc getQueryObjectuivANGLE*(id: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetQueryObjectuivANGLE".}
proc getQueryivANGLE*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetQueryivANGLE".}
proc isQueryANGLE*(id: uint32): bool {.glew_lib, importc: "glIsQueryANGLE".}
proc queryCounterANGLE*(id: uint32, target: GLenum): void {.glew_lib, importc: "glQueryCounterANGLE".}
proc getTranslatedShaderSourceANGLE*(shader: uint32, bufsize: int32, length: ptr int32, source: ptr char): void {.glew_lib, importc: "glGetTranslatedShaderSourceANGLE".}
proc copyTextureLevelsAPPLE*(destinationTexture: uint32, sourceTexture: uint32, sourceBaseLevel: int32, sourceLevelCount: int32): void {.glew_lib, importc: "glCopyTextureLevelsAPPLE".}
proc drawElementArrayAPPLE*(mode: GLenum, first: int32, count: int32): void {.glew_lib, importc: "glDrawElementArrayAPPLE".}
proc drawRangeElementArrayAPPLE*(mode: GLenum, start: uint32, glEnd: uint32, first: int32, count: int32): void {.glew_lib, importc: "glDrawRangeElementArrayAPPLE".}
proc elementPointerAPPLE*(tipe: GLenum, poynter: pointer): void {.glew_lib, importc: "glElementPointerAPPLE".}
proc multiDrawElementArrayAPPLE*(mode: GLenum, first: ptr int32, count: ptr int32, primcount: int32): void {.glew_lib, importc: "glMultiDrawElementArrayAPPLE".}
proc multiDrawRangeElementArrayAPPLE*(mode: GLenum, start: uint32, glEnd: uint32, first: ptr int32, count: ptr int32, primcount: int32): void {.glew_lib, importc: "glMultiDrawRangeElementArrayAPPLE".}
proc deleteFencesAPPLE*(n: int32, fences: ptr uint32): void {.glew_lib, importc: "glDeleteFencesAPPLE".}
proc finishFenceAPPLE*(fence: uint32): void {.glew_lib, importc: "glFinishFenceAPPLE".}
proc finishObjectAPPLE*(obj: GLenum, name: int32): void {.glew_lib, importc: "glFinishObjectAPPLE".}
proc genFencesAPPLE*(n: int32, fences: ptr uint32): void {.glew_lib, importc: "glGenFencesAPPLE".}
proc isFenceAPPLE*(fence: uint32): bool {.glew_lib, importc: "glIsFenceAPPLE".}
proc setFenceAPPLE*(fence: uint32): void {.glew_lib, importc: "glSetFenceAPPLE".}
proc testFenceAPPLE*(fence: uint32): bool {.glew_lib, importc: "glTestFenceAPPLE".}
proc testObjectAPPLE*(obj: GLenum, name: uint32): bool {.glew_lib, importc: "glTestObjectAPPLE".}
proc bufferParameteriAPPLE*(target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glBufferParameteriAPPLE".}
proc flushMappedBufferRangeAPPLE*(target: GLenum, offset: int32, size: int32): void {.glew_lib, importc: "glFlushMappedBufferRangeAPPLE".}
proc renderbufferStorageMultisampleAPPLE*(target: GLenum, samples: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glRenderbufferStorageMultisampleAPPLE".}
proc resolveMultisampleFramebufferAPPLE*(): void {.glew_lib, importc: "glResolveMultisampleFramebufferAPPLE".}
proc getObjectParameterivAPPLE*(objectType: GLenum, name: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetObjectParameterivAPPLE".}
proc objectPurgeableAPPLE*(objectType: GLenum, name: uint32, option: GLenum): GLenum {.glew_lib, importc: "glObjectPurgeableAPPLE".}
proc objectUnpurgeableAPPLE*(objectType: GLenum, name: uint32, option: GLenum): GLenum {.glew_lib, importc: "glObjectUnpurgeableAPPLE".}
proc clientWaitSyncAPPLE*(GLsync: distinct pointer, flags: uint32, timeout: uint64): GLenum {.glew_lib, importc: "glClientWaitSyncAPPLE".}
proc deleteSyncAPPLE*(GLsync: distinct pointer): void {.glew_lib, importc: "glDeleteSyncAPPLE".}
proc fenceSyncAPPLE*(condition: GLenum, flags: uint32): distinct pointer {.glew_lib, importc: "glFenceSyncAPPLE".}
proc getInteger64vAPPLE*(pname: GLenum, params: ptr int64): void {.glew_lib, importc: "glGetInteger64vAPPLE".}
proc getSyncivAPPLE*(GLsync: distinct pointer, pname: GLenum, bufSize: int32, length: ptr int32, values: ptr int32): void {.glew_lib, importc: "glGetSyncivAPPLE".}
proc isSyncAPPLE*(GLsync: distinct pointer): bool {.glew_lib, importc: "glIsSyncAPPLE".}
proc waitSyncAPPLE*(GLsync: distinct pointer, flags: uint32, timeout: uint64): void {.glew_lib, importc: "glWaitSyncAPPLE".}
proc getTexParameterPointervAPPLE*(target: GLenum, pname: GLenum, params: ptr void ): void {.glew_lib, importc: "glGetTexParameterPointervAPPLE".}
proc textureRangeAPPLE*(target: GLenum, length: int32, poynter: pointer): void {.glew_lib, importc: "glTextureRangeAPPLE".}
proc bindVertexArrayAPPLE*(arrai: uint32): void {.glew_lib, importc: "glBindVertexArrayAPPLE".}
proc deleteVertexArraysAPPLE*(n: int32, arrays: ptr uint32): void {.glew_lib, importc: "glDeleteVertexArraysAPPLE".}
proc genVertexArraysAPPLE*(n: int32, arrays: ptr uint32): void {.glew_lib, importc: "glGenVertexArraysAPPLE".}
proc isVertexArrayAPPLE*(arrai: uint32): bool {.glew_lib, importc: "glIsVertexArrayAPPLE".}
proc flushVertexArrayRangeAPPLE*(length: int32, poynter: pointer): void {.glew_lib, importc: "glFlushVertexArrayRangeAPPLE".}
proc vertexArrayParameteriAPPLE*(pname: GLenum, param: int32): void {.glew_lib, importc: "glVertexArrayParameteriAPPLE".}
proc vertexArrayRangeAPPLE*(length: int32, poynter: pointer): void {.glew_lib, importc: "glVertexArrayRangeAPPLE".}
proc disableVertexAttribAPPLE*(index: uint32, pname: GLenum): void {.glew_lib, importc: "glDisableVertexAttribAPPLE".}
proc enableVertexAttribAPPLE*(index: uint32, pname: GLenum): void {.glew_lib, importc: "glEnableVertexAttribAPPLE".}
proc isVertexAttribEnabledAPPLE*(index: uint32, pname: GLenum): bool {.glew_lib, importc: "glIsVertexAttribEnabledAPPLE".}
proc mapVertexAttrib1dAPPLE*(index: uint32, size: uint32, u1: float64, u2: float64, stride: int32, order: int32, points: ptr float64): void {.glew_lib, importc: "glMapVertexAttrib1dAPPLE".}
proc mapVertexAttrib1fAPPLE*(index: uint32, size: uint32, u1: float32, u2: float32, stride: int32, order: int32, points: ptr float32): void {.glew_lib, importc: "glMapVertexAttrib1fAPPLE".}
proc mapVertexAttrib2dAPPLE*(index: uint32, size: uint32, u1: float64, u2: float64, ustride: int32, uorder: int32, v1: float64, v2: float64, vstride: int32, vorder: int32, points: ptr float64): void {.glew_lib, importc: "glMapVertexAttrib2dAPPLE".}
proc mapVertexAttrib2fAPPLE*(index: uint32, size: uint32, u1: float32, u2: float32, ustride: int32, uorder: int32, v1: float32, v2: float32, vstride: int32, vorder: int32, points: ptr float32): void {.glew_lib, importc: "glMapVertexAttrib2fAPPLE".}
proc clearDepthf*(d: float32): void {.glew_lib, importc: "glClearDepthf".}
proc depthRangef*(n: float32, f: float32): void {.glew_lib, importc: "glDepthRangef".}
proc getShaderPrecisionFormat*(shadertype: GLenum, precisiontype: GLenum, rangee: ptr int32, precision: ptr int32): void {.glew_lib, importc: "glGetShaderPrecisionFormat".}
proc releaseShaderCompiler*(): void {.glew_lib, importc: "glReleaseShaderCompiler".}
proc shaderBinary*(count: int32, shaders: ptr uint32, binaryformat: GLenum, binary: pointer, length: int32): void {.glew_lib, importc: "glShaderBinary".}
proc memoryBarrierByRegion*(barriers: uint32): void {.glew_lib, importc: "glMemoryBarrierByRegion".}
proc primitiveBoundingBoxARB*(minX: float32, minY: float32, minZ: float32, minW: float32, maxX: float32, maxY: float32, maxZ: float32, maxW: float32): void {.glew_lib, importc: "glPrimitiveBoundingBoxARB".}
proc drawArraysInstancedBaseInstance*(mode: GLenum, first: int32, count: int32, primcount: int32, baseinstance: uint32): void {.glew_lib, importc: "glDrawArraysInstancedBaseInstance".}
proc drawElementsInstancedBaseInstance*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, primcount: int32, baseinstance: uint32): void {.glew_lib, importc: "glDrawElementsInstancedBaseInstance".}
proc drawElementsInstancedBaseVertexBaseInstance*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, primcount: int32, basevertex: int32, baseinstance: uint32): void {.glew_lib, importc: "glDrawElementsInstancedBaseVertexBaseInstance".}
proc getImageHandleARB*(texture: uint32, level: int32, layered: bool, layer: int32, format: GLenum): uint64 {.glew_lib, importc: "glGetImageHandleARB".}
proc getTextureHandleARB*(texture: uint32): uint64 {.glew_lib, importc: "glGetTextureHandleARB".}
proc getTextureSamplerHandleARB*(texture: uint32, sampler: uint32): uint64 {.glew_lib, importc: "glGetTextureSamplerHandleARB".}
proc getVertexAttribLui64vARB*(index: uint32, pname: GLenum, params: ptr uint64): void {.glew_lib, importc: "glGetVertexAttribLui64vARB".}
proc isImageHandleResidentARB*(handle: uint64): bool {.glew_lib, importc: "glIsImageHandleResidentARB".}
proc isTextureHandleResidentARB*(handle: uint64): bool {.glew_lib, importc: "glIsTextureHandleResidentARB".}
proc makeImageHandleNonResidentARB*(handle: uint64): void {.glew_lib, importc: "glMakeImageHandleNonResidentARB".}
proc makeImageHandleResidentARB*(handle: uint64, access: GLenum): void {.glew_lib, importc: "glMakeImageHandleResidentARB".}
proc makeTextureHandleNonResidentARB*(handle: uint64): void {.glew_lib, importc: "glMakeTextureHandleNonResidentARB".}
proc makeTextureHandleResidentARB*(handle: uint64): void {.glew_lib, importc: "glMakeTextureHandleResidentARB".}
proc programUniformHandleui64ARB*(program: uint32, location: int32, value: uint64): void {.glew_lib, importc: "glProgramUniformHandleui64ARB".}
proc programUniformHandleui64vARB*(program: uint32, location: int32, count: int32, values: ptr uint64): void {.glew_lib, importc: "glProgramUniformHandleui64vARB".}
proc uniformHandleui64ARB*(location: int32, value: uint64): void {.glew_lib, importc: "glUniformHandleui64ARB".}
proc uniformHandleui64vARB*(location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glUniformHandleui64vARB".}
proc vertexAttribL1ui64ARB*(index: uint32, x: uint64): void {.glew_lib, importc: "glVertexAttribL1ui64ARB".}
proc vertexAttribL1ui64vARB*(index: uint32, v: ptr uint64): void {.glew_lib, importc: "glVertexAttribL1ui64vARB".}
proc bindFragDataLocationIndexed*(program: uint32, colorNumber: uint32, index: uint32, name: cstring): void {.glew_lib, importc: "glBindFragDataLocationIndexed".}
proc getFragDataIndex*(program: uint32, name: cstring): int32 {.glew_lib, importc: "glGetFragDataIndex".}
proc bufferStorage*(target: GLenum, size: int32, data: pointer, flags: uint32): void {.glew_lib, importc: "glBufferStorage".}
proc clearBufferData*(target: GLenum, internalformat: GLenum, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glClearBufferData".}
proc clearBufferSubData*(target: GLenum, internalformat: GLenum, offset: int32, size: int32, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glClearBufferSubData".}
proc clearNamedBufferDataEXT*(buffer: uint32, internalformat: GLenum, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glClearNamedBufferDataEXT".}
proc clearNamedBufferSubDataEXT*(buffer: uint32, internalformat: GLenum, offset: int32, size: int32, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glClearNamedBufferSubDataEXT".}
proc clearTexImage*(texture: uint32, level: int32, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glClearTexImage".}
proc clearTexSubImage*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glClearTexSubImage".}
proc clipControl*(origin: GLenum, depth: GLenum): void {.glew_lib, importc: "glClipControl".}
proc clampColorARB*(target: GLenum, clamp: GLenum): void {.glew_lib, importc: "glClampColorARB".}
proc dispatchCompute*(num_groups_x: uint32, num_groups_y: uint32, num_groups_z: uint32): void {.glew_lib, importc: "glDispatchCompute".}
proc dispatchComputeIndirect*(indirect: int32): void {.glew_lib, importc: "glDispatchComputeIndirect".}
proc dispatchComputeGroupSizeARB*(num_groups_x: uint32, num_groups_y: uint32, num_groups_z: uint32, group_size_x: uint32, group_size_y: uint32, group_size_z: uint32): void {.glew_lib, importc: "glDispatchComputeGroupSizeARB".}
proc copyBufferSubData*(readtarget: GLenum, writetarget: GLenum, readoffset: int32, writeoffset: int32, size: int32): void {.glew_lib, importc: "glCopyBufferSubData".}
proc copyImageSubData*(srcName: uint32, srcTarget: GLenum, srcLevel: int32, srcX: int32, srcY: int32, srcZ: int32, dstName: uint32, dstTarget: GLenum, dstLevel: int32, dstX: int32, dstY: int32, dstZ: int32, srcWidth: int32, srcHeight: int32, srcDepth: int32): void {.glew_lib, importc: "glCopyImageSubData".}
proc debugMessageControlARB*(source: GLenum, tipe: GLenum, severity: GLenum, count: int32, ids: ptr uint32, enabled: bool): void {.glew_lib, importc: "glDebugMessageControlARB".}
proc debugMessageInsertARB*(source: GLenum, tipe: GLenum, id: uint32, severity: GLenum, length: int32, buf: cstring): void {.glew_lib, importc: "glDebugMessageInsertARB".}
proc getDebugMessageLogARB*(count: uint32, bufSize: int32, sources: ptr GLenum, types: ptr GLenum, ids: ptr uint32, severities: ptr GLenum, lengths: ptr int32, messageLog: ptr char): uint32 {.glew_lib, importc: "glGetDebugMessageLogARB".}
proc bindTextureUnit*(unit: uint32, texture: uint32): void {.glew_lib, importc: "glBindTextureUnit".}
proc blitNamedFramebuffer*(readFramebuffer: uint32, drawFramebuffer: uint32, srcX0: int32, srcY0: int32, srcX1: int32, srcY1: int32, dstX0: int32, dstY0: int32, dstX1: int32, dstY1: int32, mask: uint32, filter: GLenum): void {.glew_lib, importc: "glBlitNamedFramebuffer".}
proc checkNamedFramebufferStatus*(framebuffer: uint32, target: GLenum): GLenum {.glew_lib, importc: "glCheckNamedFramebufferStatus".}
proc clearNamedBufferData*(buffer: uint32, internalformat: GLenum, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glClearNamedBufferData".}
proc clearNamedBufferSubData*(buffer: uint32, internalformat: GLenum, offset: int32, size: int32, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glClearNamedBufferSubData".}
proc clearNamedFramebufferfi*(framebuffer: uint32, buffer: GLenum, drawbuffer: int32, depth: float32, stencil: int32): void {.glew_lib, importc: "glClearNamedFramebufferfi".}
proc clearNamedFramebufferfv*(framebuffer: uint32, buffer: GLenum, drawbuffer: int32, value: ptr float32): void {.glew_lib, importc: "glClearNamedFramebufferfv".}
proc clearNamedFramebufferiv*(framebuffer: uint32, buffer: GLenum, drawbuffer: int32, value: ptr int32): void {.glew_lib, importc: "glClearNamedFramebufferiv".}
proc clearNamedFramebufferuiv*(framebuffer: uint32, buffer: GLenum, drawbuffer: int32, value: ptr uint32): void {.glew_lib, importc: "glClearNamedFramebufferuiv".}
proc compressedTextureSubImage1D*(texture: uint32, level: int32, xoffset: int32, width: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTextureSubImage1D".}
proc compressedTextureSubImage2D*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, width: int32, height: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTextureSubImage2D".}
proc compressedTextureSubImage3D*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTextureSubImage3D".}
proc copyNamedBufferSubData*(readBuffer: uint32, writeBuffer: uint32, readOffset: int32, writeOffset: int32, size: int32): void {.glew_lib, importc: "glCopyNamedBufferSubData".}
proc copyTextureSubImage1D*(texture: uint32, level: int32, xoffset: int32, x: int32, y: int32, width: int32): void {.glew_lib, importc: "glCopyTextureSubImage1D".}
proc copyTextureSubImage2D*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyTextureSubImage2D".}
proc copyTextureSubImage3D*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyTextureSubImage3D".}
proc createBuffers*(n: int32, buffers: ptr uint32): void {.glew_lib, importc: "glCreateBuffers".}
proc createFramebuffers*(n: int32, framebuffers: ptr uint32): void {.glew_lib, importc: "glCreateFramebuffers".}
proc createProgramPipelines*(n: int32, pipelines: ptr uint32): void {.glew_lib, importc: "glCreateProgramPipelines".}
proc createQueries*(target: GLenum, n: int32, ids: ptr uint32): void {.glew_lib, importc: "glCreateQueries".}
proc createRenderbuffers*(n: int32, renderbuffers: ptr uint32): void {.glew_lib, importc: "glCreateRenderbuffers".}
proc createSamplers*(n: int32, samplers: ptr uint32): void {.glew_lib, importc: "glCreateSamplers".}
proc createTextures*(target: GLenum, n: int32, textures: ptr uint32): void {.glew_lib, importc: "glCreateTextures".}
proc createTransformFeedbacks*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glCreateTransformFeedbacks".}
proc createVertexArrays*(n: int32, arrays: ptr uint32): void {.glew_lib, importc: "glCreateVertexArrays".}
proc disableVertexArrayAttrib*(vaobj: uint32, index: uint32): void {.glew_lib, importc: "glDisableVertexArrayAttrib".}
proc enableVertexArrayAttrib*(vaobj: uint32, index: uint32): void {.glew_lib, importc: "glEnableVertexArrayAttrib".}
proc flushMappedNamedBufferRange*(buffer: uint32, offset: int32, length: int32): void {.glew_lib, importc: "glFlushMappedNamedBufferRange".}
proc generateTextureMipmap*(texture: uint32): void {.glew_lib, importc: "glGenerateTextureMipmap".}
proc getCompressedTextureImage*(texture: uint32, level: int32, bufSize: int32, pixels: pointer): void {.glew_lib, importc: "glGetCompressedTextureImage".}
proc getNamedBufferParameteri64v*(buffer: uint32, pname: GLenum, params: ptr int64): void {.glew_lib, importc: "glGetNamedBufferParameteri64v".}
proc getNamedBufferParameteriv*(buffer: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetNamedBufferParameteriv".}
proc getNamedBufferPointerv*(buffer: uint32, pname: GLenum, params: ptr void): void {.glew_lib, importc: "glGetNamedBufferPointerv".}
proc getNamedBufferSubData*(buffer: uint32, offset: int32, size: int32, data: pointer): void {.glew_lib, importc: "glGetNamedBufferSubData".}
proc getNamedFramebufferAttachmentParameteriv*(framebuffer: uint32, attachment: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetNamedFramebufferAttachmentParameteriv".}
proc getNamedFramebufferParameteriv*(framebuffer: uint32, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glGetNamedFramebufferParameteriv".}
proc getNamedRenderbufferParameteriv*(renderbuffer: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetNamedRenderbufferParameteriv".}
proc getQueryBufferObjecti64v*(id: uint32, buffer: uint32, pname: GLenum, offset: int32): void {.glew_lib, importc: "glGetQueryBufferObjecti64v".}
proc getQueryBufferObjectiv*(id: uint32, buffer: uint32, pname: GLenum, offset: int32): void {.glew_lib, importc: "glGetQueryBufferObjectiv".}
proc getQueryBufferObjectui64v*(id: uint32, buffer: uint32, pname: GLenum, offset: int32): void {.glew_lib, importc: "glGetQueryBufferObjectui64v".}
proc getQueryBufferObjectuiv*(id: uint32, buffer: uint32, pname: GLenum, offset: int32): void {.glew_lib, importc: "glGetQueryBufferObjectuiv".}
proc getTextureImage*(texture: uint32, level: int32, format: GLenum, tipe: GLenum, bufSize: int32, pixels: pointer): void {.glew_lib, importc: "glGetTextureImage".}
proc getTextureLevelParameterfv*(texture: uint32, level: int32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetTextureLevelParameterfv".}
proc getTextureLevelParameteriv*(texture: uint32, level: int32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTextureLevelParameteriv".}
proc getTextureParameterIiv*(texture: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTextureParameterIiv".}
proc getTextureParameterIuiv*(texture: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetTextureParameterIuiv".}
proc getTextureParameterfv*(texture: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetTextureParameterfv".}
proc getTextureParameteriv*(texture: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTextureParameteriv".}
proc getTransformFeedbacki64_v*(xfb: uint32, pname: GLenum, index: uint32, param: ptr int64): void {.glew_lib, importc: "glGetTransformFeedbacki64_v".}
proc getTransformFeedbacki_v*(xfb: uint32, pname: GLenum, index: uint32, param: ptr int32): void {.glew_lib, importc: "glGetTransformFeedbacki_v".}
proc getTransformFeedbackiv*(xfb: uint32, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glGetTransformFeedbackiv".}
proc getVertexArrayIndexed64iv*(vaobj: uint32, index: uint32, pname: GLenum, param: ptr int64): void {.glew_lib, importc: "glGetVertexArrayIndexed64iv".}
proc getVertexArrayIndexediv*(vaobj: uint32, index: uint32, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glGetVertexArrayIndexediv".}
proc getVertexArrayiv*(vaobj: uint32, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glGetVertexArrayiv".}
proc invalidateNamedFramebufferData*(framebuffer: uint32, numAttachments: int32, attachments: ptr GLenum): void {.glew_lib, importc: "glInvalidateNamedFramebufferData".}
proc invalidateNamedFramebufferSubData*(framebuffer: uint32, numAttachments: int32, attachments: ptr GLenum, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glInvalidateNamedFramebufferSubData".}
proc mapNamedBuffer*(buffer: uint32, access: GLenum): void {.glew_lib, importc: "glMapNamedBuffer".}
proc mapNamedBufferRange*(buffer: uint32, offset: int32, length: int32, access: uint32): void {.glew_lib, importc: "glMapNamedBufferRange".}
proc namedBufferData*(buffer: uint32, size: int32, data: pointer, usage: GLenum): void {.glew_lib, importc: "glNamedBufferData".}
proc namedBufferStorage*(buffer: uint32, size: int32, data: pointer, flags: uint32): void {.glew_lib, importc: "glNamedBufferStorage".}
proc namedBufferSubData*(buffer: uint32, offset: int32, size: int32, data: pointer): void {.glew_lib, importc: "glNamedBufferSubData".}
proc namedFramebufferDrawBuffer*(framebuffer: uint32, mode: GLenum): void {.glew_lib, importc: "glNamedFramebufferDrawBuffer".}
proc namedFramebufferDrawBuffers*(framebuffer: uint32, n: int32, bufs: ptr GLenum): void {.glew_lib, importc: "glNamedFramebufferDrawBuffers".}
proc namedFramebufferParameteri*(framebuffer: uint32, pname: GLenum, param: int32): void {.glew_lib, importc: "glNamedFramebufferParameteri".}
proc namedFramebufferReadBuffer*(framebuffer: uint32, mode: GLenum): void {.glew_lib, importc: "glNamedFramebufferReadBuffer".}
proc namedFramebufferRenderbuffer*(framebuffer: uint32, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: uint32): void {.glew_lib, importc: "glNamedFramebufferRenderbuffer".}
proc namedFramebufferTexture*(framebuffer: uint32, attachment: GLenum, texture: uint32, level: int32): void {.glew_lib, importc: "glNamedFramebufferTexture".}
proc namedFramebufferTextureLayer*(framebuffer: uint32, attachment: GLenum, texture: uint32, level: int32, layer: int32): void {.glew_lib, importc: "glNamedFramebufferTextureLayer".}
proc namedRenderbufferStorage*(renderbuffer: uint32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glNamedRenderbufferStorage".}
proc namedRenderbufferStorageMultisample*(renderbuffer: uint32, samples: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glNamedRenderbufferStorageMultisample".}
proc textureBuffer*(texture: uint32, internalformat: GLenum, buffer: uint32): void {.glew_lib, importc: "glTextureBuffer".}
proc textureBufferRange*(texture: uint32, internalformat: GLenum, buffer: uint32, offset: int32, size: int32): void {.glew_lib, importc: "glTextureBufferRange".}
proc textureParameterIiv*(texture: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glTextureParameterIiv".}
proc textureParameterIuiv*(texture: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glTextureParameterIuiv".}
proc textureParameterf*(texture: uint32, pname: GLenum, param: float32): void {.glew_lib, importc: "glTextureParameterf".}
proc textureParameterfv*(texture: uint32, pname: GLenum, param: ptr float32): void {.glew_lib, importc: "glTextureParameterfv".}
proc textureParameteri*(texture: uint32, pname: GLenum, param: int32): void {.glew_lib, importc: "glTextureParameteri".}
proc textureParameteriv*(texture: uint32, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glTextureParameteriv".}
proc textureStorage1D*(texture: uint32, levels: int32, internalformat: GLenum, width: int32): void {.glew_lib, importc: "glTextureStorage1D".}
proc textureStorage2D*(texture: uint32, levels: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glTextureStorage2D".}
proc textureStorage2DMultisample*(texture: uint32, samples: int32, internalformat: GLenum, width: int32, height: int32, fixedsamplelocations: bool): void {.glew_lib, importc: "glTextureStorage2DMultisample".}
proc textureStorage3D*(texture: uint32, levels: int32, internalformat: GLenum, width: int32, height: int32, depth: int32): void {.glew_lib, importc: "glTextureStorage3D".}
proc textureStorage3DMultisample*(texture: uint32, samples: int32, internalformat: GLenum, width: int32, height: int32, depth: int32, fixedsamplelocations: bool): void {.glew_lib, importc: "glTextureStorage3DMultisample".}
proc textureSubImage1D*(texture: uint32, level: int32, xoffset: int32, width: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTextureSubImage1D".}
proc textureSubImage2D*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, width: int32, height: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTextureSubImage2D".}
proc textureSubImage3D*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTextureSubImage3D".}
proc transformFeedbackBufferBase*(xfb: uint32, index: uint32, buffer: uint32): void {.glew_lib, importc: "glTransformFeedbackBufferBase".}
proc transformFeedbackBufferRange*(xfb: uint32, index: uint32, buffer: uint32, offset: int32, size: int32): void {.glew_lib, importc: "glTransformFeedbackBufferRange".}
proc unmapNamedBuffer*(buffer: uint32): bool {.glew_lib, importc: "glUnmapNamedBuffer".}
proc vertexArrayAttribBinding*(vaobj: uint32, attribindex: uint32, bindingindex: uint32): void {.glew_lib, importc: "glVertexArrayAttribBinding".}
proc vertexArrayAttribFormat*(vaobj: uint32, attribindex: uint32, size: int32, tipe: GLenum, normalized: bool, relativeoffset: uint32): void {.glew_lib, importc: "glVertexArrayAttribFormat".}
proc vertexArrayAttribIFormat*(vaobj: uint32, attribindex: uint32, size: int32, tipe: GLenum, relativeoffset: uint32): void {.glew_lib, importc: "glVertexArrayAttribIFormat".}
proc vertexArrayAttribLFormat*(vaobj: uint32, attribindex: uint32, size: int32, tipe: GLenum, relativeoffset: uint32): void {.glew_lib, importc: "glVertexArrayAttribLFormat".}
proc vertexArrayBindingDivisor*(vaobj: uint32, bindingindex: uint32, divisor: uint32): void {.glew_lib, importc: "glVertexArrayBindingDivisor".}
proc vertexArrayElementBuffer*(vaobj: uint32, buffer: uint32): void {.glew_lib, importc: "glVertexArrayElementBuffer".}
proc vertexArrayVertexBuffer*(vaobj: uint32, bindingindex: uint32, buffer: uint32, offset: int32, stride: int32): void {.glew_lib, importc: "glVertexArrayVertexBuffer".}
proc vertexArrayVertexBuffers*(vaobj: uint32, first: uint32, count: int32, buffers: ptr uint32, offsets: ptr int32, strides: ptr int32): void {.glew_lib, importc: "glVertexArrayVertexBuffers".}
proc drawBuffersARB*(n: int32, bufs: ptr GLenum): void {.glew_lib, importc: "glDrawBuffersARB".}
proc blendEquationSeparateiARB*(buf: uint32, modeRGB: GLenum, modeAlpha: GLenum): void {.glew_lib, importc: "glBlendEquationSeparateiARB".}
proc blendEquationiARB*(buf: uint32, mode: GLenum): void {.glew_lib, importc: "glBlendEquationiARB".}
proc blendFuncSeparateiARB*(buf: uint32, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.glew_lib, importc: "glBlendFuncSeparateiARB".}
proc blendFunciARB*(buf: uint32, src: GLenum, dst: GLenum): void {.glew_lib, importc: "glBlendFunciARB".}
proc drawElementsBaseVertex*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, basevertex: int32): void {.glew_lib, importc: "glDrawElementsBaseVertex".}
proc drawElementsInstancedBaseVertex*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, primcount: int32, basevertex: int32): void {.glew_lib, importc: "glDrawElementsInstancedBaseVertex".}
proc drawRangeElementsBaseVertex*(mode: GLenum, start: uint32, glEnd: uint32, count: int32, tipe: GLenum, indices: pointer, basevertex: int32): void {.glew_lib, importc: "glDrawRangeElementsBaseVertex".}
proc multiDrawElementsBaseVertex*(mode: GLenum, count: ptr int32, tipe: GLenum, indices: ptr void, primcount: int32, basevertex: ptr int32): void {.glew_lib, importc: "glMultiDrawElementsBaseVertex".}
proc drawArraysIndirect*(mode: GLenum, indirect: pointer): void {.glew_lib, importc: "glDrawArraysIndirect".}
proc drawElementsIndirect*(mode: GLenum, tipe: GLenum, indirect: pointer): void {.glew_lib, importc: "glDrawElementsIndirect".}
proc framebufferParameteri*(target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glFramebufferParameteri".}
proc getFramebufferParameteriv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetFramebufferParameteriv".}
proc getNamedFramebufferParameterivEXT*(framebuffer: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetNamedFramebufferParameterivEXT".}
proc namedFramebufferParameteriEXT*(framebuffer: uint32, pname: GLenum, param: int32): void {.glew_lib, importc: "glNamedFramebufferParameteriEXT".}
proc bindFramebuffer*(target: GLenum, framebuffer: uint32): void {.glew_lib, importc: "glBindFramebuffer".}
proc bindRenderbuffer*(target: GLenum, renderbuffer: uint32): void {.glew_lib, importc: "glBindRenderbuffer".}
proc blitFramebuffer*(srcX0: int32, srcY0: int32, srcX1: int32, srcY1: int32, dstX0: int32, dstY0: int32, dstX1: int32, dstY1: int32, mask: uint32, filter: GLenum): void {.glew_lib, importc: "glBlitFramebuffer".}
proc checkFramebufferStatus*(target: GLenum): GLenum {.glew_lib, importc: "glCheckFramebufferStatus".}
proc deleteFramebuffers*(n: int32, framebuffers: ptr uint32): void {.glew_lib, importc: "glDeleteFramebuffers".}
proc deleteRenderbuffers*(n: int32, renderbuffers: ptr uint32): void {.glew_lib, importc: "glDeleteRenderbuffers".}
proc framebufferRenderbuffer*(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: uint32): void {.glew_lib, importc: "glFramebufferRenderbuffer".}
proc framebufferTexture1D*(target: GLenum, attachment: GLenum, textarget: GLenum, texture: uint32, level: int32): void {.glew_lib, importc: "glFramebufferTexture1D".}
proc framebufferTexture2D*(target: GLenum, attachment: GLenum, textarget: GLenum, texture: uint32, level: int32): void {.glew_lib, importc: "glFramebufferTexture2D".}
proc framebufferTexture3D*(target: GLenum, attachment: GLenum, textarget: GLenum, texture: uint32, level: int32, layer: int32): void {.glew_lib, importc: "glFramebufferTexture3D".}
proc framebufferTextureLayer*(target: GLenum, attachment: GLenum, texture: uint32, level: int32, layer: int32): void {.glew_lib, importc: "glFramebufferTextureLayer".}
proc genFramebuffers*(n: int32, framebuffers: ptr uint32): void {.glew_lib, importc: "glGenFramebuffers".}
proc genRenderbuffers*(n: int32, renderbuffers: ptr uint32): void {.glew_lib, importc: "glGenRenderbuffers".}
proc generateMipmap*(target: GLenum): void {.glew_lib, importc: "glGenerateMipmap".}
proc getFramebufferAttachmentParameteriv*(target: GLenum, attachment: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetFramebufferAttachmentParameteriv".}
proc getRenderbufferParameteriv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetRenderbufferParameteriv".}
proc isFramebuffer*(framebuffer: uint32): bool {.glew_lib, importc: "glIsFramebuffer".}
proc isRenderbuffer*(renderbuffer: uint32): bool {.glew_lib, importc: "glIsRenderbuffer".}
proc renderbufferStorage*(target: GLenum, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glRenderbufferStorage".}
proc renderbufferStorageMultisample*(target: GLenum, samples: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glRenderbufferStorageMultisample".}
proc framebufferTextureARB*(target: GLenum, attachment: GLenum, texture: uint32, level: int32): void {.glew_lib, importc: "glFramebufferTextureARB".}
proc framebufferTextureFaceARB*(target: GLenum, attachment: GLenum, texture: uint32, level: int32, face: GLenum): void {.glew_lib, importc: "glFramebufferTextureFaceARB".}
proc framebufferTextureLayerARB*(target: GLenum, attachment: GLenum, texture: uint32, level: int32, layer: int32): void {.glew_lib, importc: "glFramebufferTextureLayerARB".}
proc programParameteriARB*(program: uint32, pname: GLenum, value: int32): void {.glew_lib, importc: "glProgramParameteriARB".}
proc getProgramBinary*(program: uint32, bufSize: int32, length: ptr int32, binaryFormat: ptr GLenum, binary: pointer): void {.glew_lib, importc: "glGetProgramBinary".}
proc programBinary*(program: uint32, binaryFormat: GLenum, binary: pointer, length: int32): void {.glew_lib, importc: "glProgramBinary".}
proc programParameteri*(program: uint32, pname: GLenum, value: int32): void {.glew_lib, importc: "glProgramParameteri".}
proc getCompressedTextureSubImage*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, bufSize: int32, pixels: pointer): void {.glew_lib, importc: "glGetCompressedTextureSubImage".}
proc getTextureSubImage*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, tipe: GLenum, bufSize: int32, pixels: pointer): void {.glew_lib, importc: "glGetTextureSubImage".}
proc specializeShaderARB*(shader: uint32, pEntryPoint: cstring, numSpecializationConstants: uint32, pConstantIndex: ptr uint32, pConstantValue: ptr uint32): void {.glew_lib, importc: "glSpecializeShaderARB".}
proc getUniformdv*(program: uint32, location: int32, params: ptr float64): void {.glew_lib, importc: "glGetUniformdv".}
proc uniform1d*(location: int32, x: float64): void {.glew_lib, importc: "glUniform1d".}
proc uniform1dv*(location: int32, count: int32, value: ptr float64): void {.glew_lib, importc: "glUniform1dv".}
proc uniform2d*(location: int32, x: float64, y: float64): void {.glew_lib, importc: "glUniform2d".}
proc uniform2dv*(location: int32, count: int32, value: ptr float64): void {.glew_lib, importc: "glUniform2dv".}
proc uniform3d*(location: int32, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glUniform3d".}
proc uniform3dv*(location: int32, count: int32, value: ptr float64): void {.glew_lib, importc: "glUniform3dv".}
proc uniform4d*(location: int32, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glUniform4d".}
proc uniform4dv*(location: int32, count: int32, value: ptr float64): void {.glew_lib, importc: "glUniform4dv".}
proc uniformMatrix2dv*(location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glUniformMatrix2dv".}
proc uniformMatrix2x3dv*(location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glUniformMatrix2x3dv".}
proc uniformMatrix2x4dv*(location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glUniformMatrix2x4dv".}
proc uniformMatrix3dv*(location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glUniformMatrix3dv".}
proc uniformMatrix3x2dv*(location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glUniformMatrix3x2dv".}
proc uniformMatrix3x4dv*(location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glUniformMatrix3x4dv".}
proc uniformMatrix4dv*(location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glUniformMatrix4dv".}
proc uniformMatrix4x2dv*(location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glUniformMatrix4x2dv".}
proc uniformMatrix4x3dv*(location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glUniformMatrix4x3dv".}
proc getUniformi64vARB*(program: uint32, location: int32, params: ptr int64): void {.glew_lib, importc: "glGetUniformi64vARB".}
proc getUniformui64vARB*(program: uint32, location: int32, params: ptr uint64): void {.glew_lib, importc: "glGetUniformui64vARB".}
proc getnUniformi64vARB*(program: uint32, location: int32, bufSize: int32, params: ptr int64): void {.glew_lib, importc: "glGetnUniformi64vARB".}
proc getnUniformui64vARB*(program: uint32, location: int32, bufSize: int32, params: ptr uint64): void {.glew_lib, importc: "glGetnUniformui64vARB".}
proc programUniform1i64ARB*(program: uint32, location: int32, x: int64): void {.glew_lib, importc: "glProgramUniform1i64ARB".}
proc programUniform1i64vARB*(program: uint32, location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glProgramUniform1i64vARB".}
proc programUniform1ui64ARB*(program: uint32, location: int32, x: uint64): void {.glew_lib, importc: "glProgramUniform1ui64ARB".}
proc programUniform1ui64vARB*(program: uint32, location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glProgramUniform1ui64vARB".}
proc programUniform2i64ARB*(program: uint32, location: int32, x: int64, y: int64): void {.glew_lib, importc: "glProgramUniform2i64ARB".}
proc programUniform2i64vARB*(program: uint32, location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glProgramUniform2i64vARB".}
proc programUniform2ui64ARB*(program: uint32, location: int32, x: uint64, y: uint64): void {.glew_lib, importc: "glProgramUniform2ui64ARB".}
proc programUniform2ui64vARB*(program: uint32, location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glProgramUniform2ui64vARB".}
proc programUniform3i64ARB*(program: uint32, location: int32, x: int64, y: int64, z: int64): void {.glew_lib, importc: "glProgramUniform3i64ARB".}
proc programUniform3i64vARB*(program: uint32, location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glProgramUniform3i64vARB".}
proc programUniform3ui64ARB*(program: uint32, location: int32, x: uint64, y: uint64, z: uint64): void {.glew_lib, importc: "glProgramUniform3ui64ARB".}
proc programUniform3ui64vARB*(program: uint32, location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glProgramUniform3ui64vARB".}
proc programUniform4i64ARB*(program: uint32, location: int32, x: int64, y: int64, z: int64, w: int64): void {.glew_lib, importc: "glProgramUniform4i64ARB".}
proc programUniform4i64vARB*(program: uint32, location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glProgramUniform4i64vARB".}
proc programUniform4ui64ARB*(program: uint32, location: int32, x: uint64, y: uint64, z: uint64, w: uint64): void {.glew_lib, importc: "glProgramUniform4ui64ARB".}
proc programUniform4ui64vARB*(program: uint32, location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glProgramUniform4ui64vARB".}
proc uniform1i64ARB*(location: int32, x: int64): void {.glew_lib, importc: "glUniform1i64ARB".}
proc uniform1i64vARB*(location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glUniform1i64vARB".}
proc uniform1ui64ARB*(location: int32, x: uint64): void {.glew_lib, importc: "glUniform1ui64ARB".}
proc uniform1ui64vARB*(location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glUniform1ui64vARB".}
proc uniform2i64ARB*(location: int32, x: int64, y: int64): void {.glew_lib, importc: "glUniform2i64ARB".}
proc uniform2i64vARB*(location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glUniform2i64vARB".}
proc uniform2ui64ARB*(location: int32, x: uint64, y: uint64): void {.glew_lib, importc: "glUniform2ui64ARB".}
proc uniform2ui64vARB*(location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glUniform2ui64vARB".}
proc uniform3i64ARB*(location: int32, x: int64, y: int64, z: int64): void {.glew_lib, importc: "glUniform3i64ARB".}
proc uniform3i64vARB*(location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glUniform3i64vARB".}
proc uniform3ui64ARB*(location: int32, x: uint64, y: uint64, z: uint64): void {.glew_lib, importc: "glUniform3ui64ARB".}
proc uniform3ui64vARB*(location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glUniform3ui64vARB".}
proc uniform4i64ARB*(location: int32, x: int64, y: int64, z: int64, w: int64): void {.glew_lib, importc: "glUniform4i64ARB".}
proc uniform4i64vARB*(location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glUniform4i64vARB".}
proc uniform4ui64ARB*(location: int32, x: uint64, y: uint64, z: uint64, w: uint64): void {.glew_lib, importc: "glUniform4ui64ARB".}
proc uniform4ui64vARB*(location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glUniform4ui64vARB".}
proc colorSubTable*(target: GLenum, start: int32, count: int32, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glColorSubTable".}
proc colorTable*(target: GLenum, internalformat: GLenum, width: int32, format: GLenum, tipe: GLenum, table: pointer): void {.glew_lib, importc: "glColorTable".}
proc colorTableParameterfv*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glColorTableParameterfv".}
proc colorTableParameteriv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glColorTableParameteriv".}
proc convolutionFilter1D*(target: GLenum, internalformat: GLenum, width: int32, format: GLenum, tipe: GLenum, image: pointer): void {.glew_lib, importc: "glConvolutionFilter1D".}
proc convolutionFilter2D*(target: GLenum, internalformat: GLenum, width: int32, height: int32, format: GLenum, tipe: GLenum, image: pointer): void {.glew_lib, importc: "glConvolutionFilter2D".}
proc convolutionParameterf*(target: GLenum, pname: GLenum, params: float32): void {.glew_lib, importc: "glConvolutionParameterf".}
proc convolutionParameterfv*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glConvolutionParameterfv".}
proc convolutionParameteri*(target: GLenum, pname: GLenum, params: int32): void {.glew_lib, importc: "glConvolutionParameteri".}
proc convolutionParameteriv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glConvolutionParameteriv".}
proc copyColorSubTable*(target: GLenum, start: int32, x: int32, y: int32, width: int32): void {.glew_lib, importc: "glCopyColorSubTable".}
proc copyColorTable*(target: GLenum, internalformat: GLenum, x: int32, y: int32, width: int32): void {.glew_lib, importc: "glCopyColorTable".}
proc copyConvolutionFilter1D*(target: GLenum, internalformat: GLenum, x: int32, y: int32, width: int32): void {.glew_lib, importc: "glCopyConvolutionFilter1D".}
proc copyConvolutionFilter2D*(target: GLenum, internalformat: GLenum, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyConvolutionFilter2D".}
proc getColorTable*(target: GLenum, format: GLenum, tipe: GLenum, table: pointer): void {.glew_lib, importc: "glGetColorTable".}
proc getColorTableParameterfv*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetColorTableParameterfv".}
proc getColorTableParameteriv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetColorTableParameteriv".}
proc getConvolutionFilter*(target: GLenum, format: GLenum, tipe: GLenum, image: pointer): void {.glew_lib, importc: "glGetConvolutionFilter".}
proc getConvolutionParameterfv*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetConvolutionParameterfv".}
proc getConvolutionParameteriv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetConvolutionParameteriv".}
proc getHistogram*(target: GLenum, reset: bool, format: GLenum, tipe: GLenum, values: pointer): void {.glew_lib, importc: "glGetHistogram".}
proc getHistogramParameterfv*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetHistogramParameterfv".}
proc getHistogramParameteriv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetHistogramParameteriv".}
proc getMinmax*(target: GLenum, reset: bool, format: GLenum, types: GLenum, values: pointer): void {.glew_lib, importc: "glGetMinmax".}
proc getMinmaxParameterfv*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetMinmaxParameterfv".}
proc getMinmaxParameteriv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMinmaxParameteriv".}
proc getSeparableFilter*(target: GLenum, format: GLenum, tipe: GLenum, row: pointer, column: pointer, span: pointer): void {.glew_lib, importc: "glGetSeparableFilter".}
proc histogram*(target: GLenum, width: int32, internalformat: GLenum, sink: bool): void {.glew_lib, importc: "glHistogram".}
proc minmax*(target: GLenum, internalformat: GLenum, sink: bool): void {.glew_lib, importc: "glMinmax".}
proc resetHistogram*(target: GLenum): void {.glew_lib, importc: "glResetHistogram".}
proc resetMinmax*(target: GLenum): void {.glew_lib, importc: "glResetMinmax".}
proc separableFilter2D*(target: GLenum, internalformat: GLenum, width: int32, height: int32, format: GLenum, tipe: GLenum, row: pointer, column: pointer): void {.glew_lib, importc: "glSeparableFilter2D".}
proc multiDrawArraysIndirectCountARB*(mode: GLenum, indirect: pointer, drawcount: int32, maxdrawcount: int32, stride: int32): void {.glew_lib, importc: "glMultiDrawArraysIndirectCountARB".}
proc multiDrawElementsIndirectCountARB*(mode: GLenum, tipe: GLenum, indirect: pointer, drawcount: int32, maxdrawcount: int32, stride: int32): void {.glew_lib, importc: "glMultiDrawElementsIndirectCountARB".}
proc drawArraysInstancedARB*(mode: GLenum, first: int32, count: int32, primcount: int32): void {.glew_lib, importc: "glDrawArraysInstancedARB".}
proc drawElementsInstancedARB*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, primcount: int32): void {.glew_lib, importc: "glDrawElementsInstancedARB".}
proc vertexAttribDivisorARB*(index: uint32, divisor: uint32): void {.glew_lib, importc: "glVertexAttribDivisorARB".}
proc getInternalformativ*(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: int32, params: ptr int32): void {.glew_lib, importc: "glGetInternalformativ".}
proc getInternalformati64v*(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: int32, params: ptr int64): void {.glew_lib, importc: "glGetInternalformati64v".}
proc invalidateBufferData*(buffer: uint32): void {.glew_lib, importc: "glInvalidateBufferData".}
proc invalidateBufferSubData*(buffer: uint32, offset: int32, length: int32): void {.glew_lib, importc: "glInvalidateBufferSubData".}
proc invalidateFramebuffer*(target: GLenum, numAttachments: int32, attachments: ptr GLenum): void {.glew_lib, importc: "glInvalidateFramebuffer".}
proc invalidateSubFramebuffer*(target: GLenum, numAttachments: int32, attachments: ptr GLenum, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glInvalidateSubFramebuffer".}
proc invalidateTexImage*(texture: uint32, level: int32): void {.glew_lib, importc: "glInvalidateTexImage".}
proc invalidateTexSubImage*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32): void {.glew_lib, importc: "glInvalidateTexSubImage".}
proc flushMappedBufferRange*(target: GLenum, offset: int32, length: int32): void {.glew_lib, importc: "glFlushMappedBufferRange".}
proc mapBufferRange*(target: GLenum, offset: int32, length: int32, access: uint32): void {.glew_lib, importc: "glMapBufferRange".}
proc currentPaletteMatrixARB*(index: int32): void {.glew_lib, importc: "glCurrentPaletteMatrixARB".}
proc matrixIndexPointerARB*(size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glMatrixIndexPointerARB".}
proc matrixIndexubvARB*(size: int32, indices: ptr uint8): void {.glew_lib, importc: "glMatrixIndexubvARB".}
proc matrixIndexuivARB*(size: int32, indices: ptr uint32): void {.glew_lib, importc: "glMatrixIndexuivARB".}
proc matrixIndexusvARB*(size: int32, indices: ptr uint16): void {.glew_lib, importc: "glMatrixIndexusvARB".}
proc bindBuffersBase*(target: GLenum, first: uint32, count: int32, buffers: ptr uint32): void {.glew_lib, importc: "glBindBuffersBase".}
proc bindBuffersRange*(target: GLenum, first: uint32, count: int32, buffers: ptr uint32, offsets: ptr int32, sizes: ptr int32): void {.glew_lib, importc: "glBindBuffersRange".}
proc bindImageTextures*(first: uint32, count: int32, textures: ptr uint32): void {.glew_lib, importc: "glBindImageTextures".}
proc bindSamplers*(first: uint32, count: int32, samplers: ptr uint32): void {.glew_lib, importc: "glBindSamplers".}
proc bindTextures*(first: uint32, count: int32, textures: ptr uint32): void {.glew_lib, importc: "glBindTextures".}
proc bindVertexBuffers*(first: uint32, count: int32, buffers: ptr uint32, offsets: ptr int32, strides: ptr int32): void {.glew_lib, importc: "glBindVertexBuffers".}
proc multiDrawArraysIndirect*(mode: GLenum, indirect: pointer, primcount: int32, stride: int32): void {.glew_lib, importc: "glMultiDrawArraysIndirect".}
proc multiDrawElementsIndirect*(mode: GLenum, tipe: GLenum, indirect: pointer, primcount: int32, stride: int32): void {.glew_lib, importc: "glMultiDrawElementsIndirect".}
proc sampleCoverageARB*(value: float32, invert: bool): void {.glew_lib, importc: "glSampleCoverageARB".}
proc activeTextureARB*(texture: GLenum): void {.glew_lib, importc: "glActiveTextureARB".}
proc clientActiveTextureARB*(texture: GLenum): void {.glew_lib, importc: "glClientActiveTextureARB".}
proc multiTexCoord1dARB*(target: GLenum, s: float64): void {.glew_lib, importc: "glMultiTexCoord1dARB".}
proc multiTexCoord1dvARB*(target: GLenum, v: ptr float64): void {.glew_lib, importc: "glMultiTexCoord1dvARB".}
proc multiTexCoord1fARB*(target: GLenum, s: float32): void {.glew_lib, importc: "glMultiTexCoord1fARB".}
proc multiTexCoord1fvARB*(target: GLenum, v: ptr float32): void {.glew_lib, importc: "glMultiTexCoord1fvARB".}
proc multiTexCoord1iARB*(target: GLenum, s: int32): void {.glew_lib, importc: "glMultiTexCoord1iARB".}
proc multiTexCoord1ivARB*(target: GLenum, v: ptr int32): void {.glew_lib, importc: "glMultiTexCoord1ivARB".}
proc multiTexCoord1sARB*(target: GLenum, s: int16): void {.glew_lib, importc: "glMultiTexCoord1sARB".}
proc multiTexCoord1svARB*(target: GLenum, v: ptr int16): void {.glew_lib, importc: "glMultiTexCoord1svARB".}
proc multiTexCoord2dARB*(target: GLenum, s: float64, t: float64): void {.glew_lib, importc: "glMultiTexCoord2dARB".}
proc multiTexCoord2dvARB*(target: GLenum, v: ptr float64): void {.glew_lib, importc: "glMultiTexCoord2dvARB".}
proc multiTexCoord2fARB*(target: GLenum, s: float32, t: float32): void {.glew_lib, importc: "glMultiTexCoord2fARB".}
proc multiTexCoord2fvARB*(target: GLenum, v: ptr float32): void {.glew_lib, importc: "glMultiTexCoord2fvARB".}
proc multiTexCoord2iARB*(target: GLenum, s: int32, t: int32): void {.glew_lib, importc: "glMultiTexCoord2iARB".}
proc multiTexCoord2ivARB*(target: GLenum, v: ptr int32): void {.glew_lib, importc: "glMultiTexCoord2ivARB".}
proc multiTexCoord2sARB*(target: GLenum, s: int16, t: int16): void {.glew_lib, importc: "glMultiTexCoord2sARB".}
proc multiTexCoord2svARB*(target: GLenum, v: ptr int16): void {.glew_lib, importc: "glMultiTexCoord2svARB".}
proc multiTexCoord3dARB*(target: GLenum, s: float64, t: float64, r: float64): void {.glew_lib, importc: "glMultiTexCoord3dARB".}
proc multiTexCoord3dvARB*(target: GLenum, v: ptr float64): void {.glew_lib, importc: "glMultiTexCoord3dvARB".}
proc multiTexCoord3fARB*(target: GLenum, s: float32, t: float32, r: float32): void {.glew_lib, importc: "glMultiTexCoord3fARB".}
proc multiTexCoord3fvARB*(target: GLenum, v: ptr float32): void {.glew_lib, importc: "glMultiTexCoord3fvARB".}
proc multiTexCoord3iARB*(target: GLenum, s: int32, t: int32, r: int32): void {.glew_lib, importc: "glMultiTexCoord3iARB".}
proc multiTexCoord3ivARB*(target: GLenum, v: ptr int32): void {.glew_lib, importc: "glMultiTexCoord3ivARB".}
proc multiTexCoord3sARB*(target: GLenum, s: int16, t: int16, r: int16): void {.glew_lib, importc: "glMultiTexCoord3sARB".}
proc multiTexCoord3svARB*(target: GLenum, v: ptr int16): void {.glew_lib, importc: "glMultiTexCoord3svARB".}
proc multiTexCoord4dARB*(target: GLenum, s: float64, t: float64, r: float64, q: float64): void {.glew_lib, importc: "glMultiTexCoord4dARB".}
proc multiTexCoord4dvARB*(target: GLenum, v: ptr float64): void {.glew_lib, importc: "glMultiTexCoord4dvARB".}
proc multiTexCoord4fARB*(target: GLenum, s: float32, t: float32, r: float32, q: float32): void {.glew_lib, importc: "glMultiTexCoord4fARB".}
proc multiTexCoord4fvARB*(target: GLenum, v: ptr float32): void {.glew_lib, importc: "glMultiTexCoord4fvARB".}
proc multiTexCoord4iARB*(target: GLenum, s: int32, t: int32, r: int32, q: int32): void {.glew_lib, importc: "glMultiTexCoord4iARB".}
proc multiTexCoord4ivARB*(target: GLenum, v: ptr int32): void {.glew_lib, importc: "glMultiTexCoord4ivARB".}
proc multiTexCoord4sARB*(target: GLenum, s: int16, t: int16, r: int16, q: int16): void {.glew_lib, importc: "glMultiTexCoord4sARB".}
proc multiTexCoord4svARB*(target: GLenum, v: ptr int16): void {.glew_lib, importc: "glMultiTexCoord4svARB".}
proc beginQueryARB*(target: GLenum, id: uint32): void {.glew_lib, importc: "glBeginQueryARB".}
proc deleteQueriesARB*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glDeleteQueriesARB".}
proc endQueryARB*(target: GLenum): void {.glew_lib, importc: "glEndQueryARB".}
proc genQueriesARB*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glGenQueriesARB".}
proc getQueryObjectivARB*(id: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetQueryObjectivARB".}
proc getQueryObjectuivARB*(id: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetQueryObjectuivARB".}
proc getQueryivARB*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetQueryivARB".}
proc isQueryARB*(id: uint32): bool {.glew_lib, importc: "glIsQueryARB".}
proc maxShaderCompilerThreadsARB*(count: uint32): void {.glew_lib, importc: "glMaxShaderCompilerThreadsARB".}
proc pointParameterfARB*(pname: GLenum, param: float32): void {.glew_lib, importc: "glPointParameterfARB".}
proc pointParameterfvARB*(pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glPointParameterfvARB".}
proc polygonOffsetClamp*(factor: float32, units: float32, clamp: float32): void {.glew_lib, importc: "glPolygonOffsetClamp".}
proc getProgramInterfaceiv*(program: uint32, programInterface: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetProgramInterfaceiv".}
proc getProgramResourceIndex*(program: uint32, programInterface: GLenum, name: cstring): uint32 {.glew_lib, importc: "glGetProgramResourceIndex".}
proc getProgramResourceLocation*(program: uint32, programInterface: GLenum, name: cstring): int32 {.glew_lib, importc: "glGetProgramResourceLocation".}
proc getProgramResourceLocationIndex*(program: uint32, programInterface: GLenum, name: cstring): int32 {.glew_lib, importc: "glGetProgramResourceLocationIndex".}
proc getProgramResourceName*(program: uint32, programInterface: GLenum, index: uint32, bufSize: int32, length: ptr int32, name: ptr char): void {.glew_lib, importc: "glGetProgramResourceName".}
proc getProgramResourceiv*(program: uint32, programInterface: GLenum, index: uint32, propCount: int32, props: ptr GLenum, bufSize: int32, length: ptr int32, params: ptr int32): void {.glew_lib, importc: "glGetProgramResourceiv".}
proc provokingVertex*(mode: GLenum): void {.glew_lib, importc: "glProvokingVertex".}
proc getGraphicsResetStatusARB*(): GLenum {.glew_lib, importc: "glGetGraphicsResetStatusARB".}
proc getnColorTableARB*(target: GLenum, format: GLenum, tipe: GLenum, bufSize: int32, table: pointer): void {.glew_lib, importc: "glGetnColorTableARB".}
proc getnCompressedTexImageARB*(target: GLenum, lod: int32, bufSize: int32, img: pointer): void {.glew_lib, importc: "glGetnCompressedTexImageARB".}
proc getnConvolutionFilterARB*(target: GLenum, format: GLenum, tipe: GLenum, bufSize: int32, image: pointer): void {.glew_lib, importc: "glGetnConvolutionFilterARB".}
proc getnHistogramARB*(target: GLenum, reset: bool, format: GLenum, tipe: GLenum, bufSize: int32, values: pointer): void {.glew_lib, importc: "glGetnHistogramARB".}
proc getnMapdvARB*(target: GLenum, query: GLenum, bufSize: int32, v: ptr float64): void {.glew_lib, importc: "glGetnMapdvARB".}
proc getnMapfvARB*(target: GLenum, query: GLenum, bufSize: int32, v: ptr float32): void {.glew_lib, importc: "glGetnMapfvARB".}
proc getnMapivARB*(target: GLenum, query: GLenum, bufSize: int32, v: ptr int32): void {.glew_lib, importc: "glGetnMapivARB".}
proc getnMinmaxARB*(target: GLenum, reset: bool, format: GLenum, tipe: GLenum, bufSize: int32, values: pointer): void {.glew_lib, importc: "glGetnMinmaxARB".}
proc getnPixelMapfvARB*(map: GLenum, bufSize: int32, values: ptr float32): void {.glew_lib, importc: "glGetnPixelMapfvARB".}
proc getnPixelMapuivARB*(map: GLenum, bufSize: int32, values: ptr uint32): void {.glew_lib, importc: "glGetnPixelMapuivARB".}
proc getnPixelMapusvARB*(map: GLenum, bufSize: int32, values: ptr uint16): void {.glew_lib, importc: "glGetnPixelMapusvARB".}
proc getnPolygonStippleARB*(bufSize: int32, pattern: ptr uint8): void {.glew_lib, importc: "glGetnPolygonStippleARB".}
proc getnSeparableFilterARB*(target: GLenum, format: GLenum, tipe: GLenum, rowBufSize: int32, row: pointer, columnBufSize: int32, column: pointer, span: pointer): void {.glew_lib, importc: "glGetnSeparableFilterARB".}
proc getnTexImageARB*(target: GLenum, level: int32, format: GLenum, tipe: GLenum, bufSize: int32, img: pointer): void {.glew_lib, importc: "glGetnTexImageARB".}
proc getnUniformdvARB*(program: uint32, location: int32, bufSize: int32, params: ptr float64): void {.glew_lib, importc: "glGetnUniformdvARB".}
proc getnUniformfvARB*(program: uint32, location: int32, bufSize: int32, params: ptr float32): void {.glew_lib, importc: "glGetnUniformfvARB".}
proc getnUniformivARB*(program: uint32, location: int32, bufSize: int32, params: ptr int32): void {.glew_lib, importc: "glGetnUniformivARB".}
proc getnUniformuivARB*(program: uint32, location: int32, bufSize: int32, params: ptr uint32): void {.glew_lib, importc: "glGetnUniformuivARB".}
proc readnPixelsARB*(x: int32, y: int32, width: int32, height: int32, format: GLenum, tipe: GLenum, bufSize: int32, data: pointer): void {.glew_lib, importc: "glReadnPixelsARB".}
proc framebufferSampleLocationsfvARB*(target: GLenum, start: uint32, count: int32, v: ptr float32): void {.glew_lib, importc: "glFramebufferSampleLocationsfvARB".}
proc namedFramebufferSampleLocationsfvARB*(framebuffer: uint32, start: uint32, count: int32, v: ptr float32): void {.glew_lib, importc: "glNamedFramebufferSampleLocationsfvARB".}
proc minSampleShadingARB*(value: float32): void {.glew_lib, importc: "glMinSampleShadingARB".}
proc bindSampler*(unit: uint32, sampler: uint32): void {.glew_lib, importc: "glBindSampler".}
proc deleteSamplers*(count: int32, samplers: ptr uint32): void {.glew_lib, importc: "glDeleteSamplers".}
proc genSamplers*(count: int32, samplers: ptr uint32): void {.glew_lib, importc: "glGenSamplers".}
proc getSamplerParameterIiv*(sampler: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetSamplerParameterIiv".}
proc getSamplerParameterIuiv*(sampler: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetSamplerParameterIuiv".}
proc getSamplerParameterfv*(sampler: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetSamplerParameterfv".}
proc getSamplerParameteriv*(sampler: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetSamplerParameteriv".}
proc isSampler*(sampler: uint32): bool {.glew_lib, importc: "glIsSampler".}
proc samplerParameterIiv*(sampler: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glSamplerParameterIiv".}
proc samplerParameterIuiv*(sampler: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glSamplerParameterIuiv".}
proc samplerParameterf*(sampler: uint32, pname: GLenum, param: float32): void {.glew_lib, importc: "glSamplerParameterf".}
proc samplerParameterfv*(sampler: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glSamplerParameterfv".}
proc samplerParameteri*(sampler: uint32, pname: GLenum, param: int32): void {.glew_lib, importc: "glSamplerParameteri".}
proc samplerParameteriv*(sampler: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glSamplerParameteriv".}
proc activeShaderProgram*(pipeline: uint32, program: uint32): void {.glew_lib, importc: "glActiveShaderProgram".}
proc bindProgramPipeline*(pipeline: uint32): void {.glew_lib, importc: "glBindProgramPipeline".}
proc createShaderProgramv*(tipe: GLenum, count: int32, strings: ptr cstring): uint32 {.glew_lib, importc: "glCreateShaderProgramv".}
proc deleteProgramPipelines*(n: int32, pipelines: ptr uint32): void {.glew_lib, importc: "glDeleteProgramPipelines".}
proc genProgramPipelines*(n: int32, pipelines: ptr uint32): void {.glew_lib, importc: "glGenProgramPipelines".}
proc getProgramPipelineInfoLog*(pipeline: uint32, bufSize: int32, length: ptr int32, infoLog: ptr char): void {.glew_lib, importc: "glGetProgramPipelineInfoLog".}
proc getProgramPipelineiv*(pipeline: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetProgramPipelineiv".}
proc isProgramPipeline*(pipeline: uint32): bool {.glew_lib, importc: "glIsProgramPipeline".}
proc programUniform1d*(program: uint32, location: int32, x: float64): void {.glew_lib, importc: "glProgramUniform1d".}
proc programUniform1dv*(program: uint32, location: int32, count: int32, value: ptr float64): void {.glew_lib, importc: "glProgramUniform1dv".}
proc programUniform1f*(program: uint32, location: int32, x: float32): void {.glew_lib, importc: "glProgramUniform1f".}
proc programUniform1fv*(program: uint32, location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glProgramUniform1fv".}
proc programUniform1i*(program: uint32, location: int32, x: int32): void {.glew_lib, importc: "glProgramUniform1i".}
proc programUniform1iv*(program: uint32, location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glProgramUniform1iv".}
proc programUniform1ui*(program: uint32, location: int32, x: uint32): void {.glew_lib, importc: "glProgramUniform1ui".}
proc programUniform1uiv*(program: uint32, location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glProgramUniform1uiv".}
proc programUniform2d*(program: uint32, location: int32, x: float64, y: float64): void {.glew_lib, importc: "glProgramUniform2d".}
proc programUniform2dv*(program: uint32, location: int32, count: int32, value: ptr float64): void {.glew_lib, importc: "glProgramUniform2dv".}
proc programUniform2f*(program: uint32, location: int32, x: float32, y: float32): void {.glew_lib, importc: "glProgramUniform2f".}
proc programUniform2fv*(program: uint32, location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glProgramUniform2fv".}
proc programUniform2i*(program: uint32, location: int32, x: int32, y: int32): void {.glew_lib, importc: "glProgramUniform2i".}
proc programUniform2iv*(program: uint32, location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glProgramUniform2iv".}
proc programUniform2ui*(program: uint32, location: int32, x: uint32, y: uint32): void {.glew_lib, importc: "glProgramUniform2ui".}
proc programUniform2uiv*(program: uint32, location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glProgramUniform2uiv".}
proc programUniform3d*(program: uint32, location: int32, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glProgramUniform3d".}
proc programUniform3dv*(program: uint32, location: int32, count: int32, value: ptr float64): void {.glew_lib, importc: "glProgramUniform3dv".}
proc programUniform3f*(program: uint32, location: int32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glProgramUniform3f".}
proc programUniform3fv*(program: uint32, location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glProgramUniform3fv".}
proc programUniform3i*(program: uint32, location: int32, x: int32, y: int32, z: int32): void {.glew_lib, importc: "glProgramUniform3i".}
proc programUniform3iv*(program: uint32, location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glProgramUniform3iv".}
proc programUniform3ui*(program: uint32, location: int32, x: uint32, y: uint32, z: uint32): void {.glew_lib, importc: "glProgramUniform3ui".}
proc programUniform3uiv*(program: uint32, location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glProgramUniform3uiv".}
proc programUniform4d*(program: uint32, location: int32, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glProgramUniform4d".}
proc programUniform4dv*(program: uint32, location: int32, count: int32, value: ptr float64): void {.glew_lib, importc: "glProgramUniform4dv".}
proc programUniform4f*(program: uint32, location: int32, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glProgramUniform4f".}
proc programUniform4fv*(program: uint32, location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glProgramUniform4fv".}
proc programUniform4i*(program: uint32, location: int32, x: int32, y: int32, z: int32, w: int32): void {.glew_lib, importc: "glProgramUniform4i".}
proc programUniform4iv*(program: uint32, location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glProgramUniform4iv".}
proc programUniform4ui*(program: uint32, location: int32, x: uint32, y: uint32, z: uint32, w: uint32): void {.glew_lib, importc: "glProgramUniform4ui".}
proc programUniform4uiv*(program: uint32, location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glProgramUniform4uiv".}
proc programUniformMatrix2dv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glProgramUniformMatrix2dv".}
proc programUniformMatrix2fv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix2fv".}
proc programUniformMatrix2x3dv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glProgramUniformMatrix2x3dv".}
proc programUniformMatrix2x3fv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix2x3fv".}
proc programUniformMatrix2x4dv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glProgramUniformMatrix2x4dv".}
proc programUniformMatrix2x4fv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix2x4fv".}
proc programUniformMatrix3dv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glProgramUniformMatrix3dv".}
proc programUniformMatrix3fv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix3fv".}
proc programUniformMatrix3x2dv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glProgramUniformMatrix3x2dv".}
proc programUniformMatrix3x2fv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix3x2fv".}
proc programUniformMatrix3x4dv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glProgramUniformMatrix3x4dv".}
proc programUniformMatrix3x4fv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix3x4fv".}
proc programUniformMatrix4dv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glProgramUniformMatrix4dv".}
proc programUniformMatrix4fv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix4fv".}
proc programUniformMatrix4x2dv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glProgramUniformMatrix4x2dv".}
proc programUniformMatrix4x2fv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix4x2fv".}
proc programUniformMatrix4x3dv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float64): void {.glew_lib, importc: "glProgramUniformMatrix4x3dv".}
proc programUniformMatrix4x3fv*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix4x3fv".}
proc useProgramStages*(pipeline: uint32, stages: uint32, program: uint32): void {.glew_lib, importc: "glUseProgramStages".}
proc validateProgramPipeline*(pipeline: uint32): void {.glew_lib, importc: "glValidateProgramPipeline".}
proc getActiveAtomicCounterBufferiv*(program: uint32, bufferIndex: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetActiveAtomicCounterBufferiv".}
proc bindImageTexture*(unit: uint32, texture: uint32, level: int32, layered: bool, layer: int32, access: GLenum, format: GLenum): void {.glew_lib, importc: "glBindImageTexture".}
proc memoryBarrier*(barriers: uint32): void {.glew_lib, importc: "glMemoryBarrier".}
proc attachObjectARB*(containerObj: uint32, obj: uint32): void {.glew_lib, importc: "glAttachObjectARB".}
proc compileShaderARB*(shaderObj: uint32): void {.glew_lib, importc: "glCompileShaderARB".}
proc createProgramObjectARB*(): uint32 {.glew_lib, importc: "glCreateProgramObjectARB".}
proc createShaderObjectARB*(shaderType: GLenum): uint32 {.glew_lib, importc: "glCreateShaderObjectARB".}
proc deleteObjectARB*(obj: uint32): void {.glew_lib, importc: "glDeleteObjectARB".}
proc detachObjectARB*(containerObj: uint32, attachedObj: uint32): void {.glew_lib, importc: "glDetachObjectARB".}
proc getActiveUniformARB*(programObj: uint32, index: uint32, maxLength: int32, length: ptr int32, size: ptr int32, tipe: ptr GLenum, name: ptr byte): void {.glew_lib, importc: "glGetActiveUniformARB".}
proc getAttachedObjectsARB*(containerObj: uint32, maxCount: int32, count: ptr int32, obj: ptr uint32): void {.glew_lib, importc: "glGetAttachedObjectsARB".}
proc getHandleARB*(pname: GLenum): uint32 {.glew_lib, importc: "glGetHandleARB".}
proc getInfoLogARB*(obj: uint32, maxLength: int32, length: ptr int32, infoLog: ptr byte): void {.glew_lib, importc: "glGetInfoLogARB".}
proc getObjectParameterfvARB*(obj: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetObjectParameterfvARB".}
proc getObjectParameterivARB*(obj: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetObjectParameterivARB".}
proc getShaderSourceARB*(obj: uint32, maxLength: int32, length: ptr int32, source: ptr byte): void {.glew_lib, importc: "glGetShaderSourceARB".}
proc getUniformLocationARB*(programObj: uint32, name: ptr byte): int32 {.glew_lib, importc: "glGetUniformLocationARB".}
proc getUniformfvARB*(programObj: uint32, location: int32, params: ptr float32): void {.glew_lib, importc: "glGetUniformfvARB".}
proc getUniformivARB*(programObj: uint32, location: int32, params: ptr int32): void {.glew_lib, importc: "glGetUniformivARB".}
proc linkProgramARB*(programObj: uint32): void {.glew_lib, importc: "glLinkProgramARB".}
proc shaderSourceARB*(shaderObj: uint32, count: int32, stryng: ptr byte, length: ptr int32): void {.glew_lib, importc: "glShaderSourceARB".}
proc uniform1fARB*(location: int32, v0: float32): void {.glew_lib, importc: "glUniform1fARB".}
proc uniform1fvARB*(location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glUniform1fvARB".}
proc uniform1iARB*(location: int32, v0: int32): void {.glew_lib, importc: "glUniform1iARB".}
proc uniform1ivARB*(location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glUniform1ivARB".}
proc uniform2fARB*(location: int32, v0: float32, v1: float32): void {.glew_lib, importc: "glUniform2fARB".}
proc uniform2fvARB*(location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glUniform2fvARB".}
proc uniform2iARB*(location: int32, v0: int32, v1: int32): void {.glew_lib, importc: "glUniform2iARB".}
proc uniform2ivARB*(location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glUniform2ivARB".}
proc uniform3fARB*(location: int32, v0: float32, v1: float32, v2: float32): void {.glew_lib, importc: "glUniform3fARB".}
proc uniform3fvARB*(location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glUniform3fvARB".}
proc uniform3iARB*(location: int32, v0: int32, v1: int32, v2: int32): void {.glew_lib, importc: "glUniform3iARB".}
proc uniform3ivARB*(location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glUniform3ivARB".}
proc uniform4fARB*(location: int32, v0: float32, v1: float32, v2: float32, v3: float32): void {.glew_lib, importc: "glUniform4fARB".}
proc uniform4fvARB*(location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glUniform4fvARB".}
proc uniform4iARB*(location: int32, v0: int32, v1: int32, v2: int32, v3: int32): void {.glew_lib, importc: "glUniform4iARB".}
proc uniform4ivARB*(location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glUniform4ivARB".}
proc uniformMatrix2fvARB*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix2fvARB".}
proc uniformMatrix3fvARB*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix3fvARB".}
proc uniformMatrix4fvARB*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix4fvARB".}
proc useProgramObjectARB*(programObj: uint32): void {.glew_lib, importc: "glUseProgramObjectARB".}
proc validateProgramARB*(programObj: uint32): void {.glew_lib, importc: "glValidateProgramARB".}
proc shaderStorageBlockBinding*(program: uint32, storageBlockIndex: uint32, storageBlockBinding: uint32): void {.glew_lib, importc: "glShaderStorageBlockBinding".}
proc getActiveSubroutineName*(program: uint32, shadertype: GLenum, index: uint32, bufsize: int32, length: ptr int32, name: ptr char): void {.glew_lib, importc: "glGetActiveSubroutineName".}
proc getActiveSubroutineUniformName*(program: uint32, shadertype: GLenum, index: uint32, bufsize: int32, length: ptr int32, name: ptr char): void {.glew_lib, importc: "glGetActiveSubroutineUniformName".}
proc getActiveSubroutineUniformiv*(program: uint32, shadertype: GLenum, index: uint32, pname: GLenum, values: ptr int32): void {.glew_lib, importc: "glGetActiveSubroutineUniformiv".}
proc getProgramStageiv*(program: uint32, shadertype: GLenum, pname: GLenum, values: ptr int32): void {.glew_lib, importc: "glGetProgramStageiv".}
proc getSubroutineIndex*(program: uint32, shadertype: GLenum, name: cstring): uint32 {.glew_lib, importc: "glGetSubroutineIndex".}
proc getSubroutineUniformLocation*(program: uint32, shadertype: GLenum, name: cstring): int32 {.glew_lib, importc: "glGetSubroutineUniformLocation".}
proc getUniformSubroutineuiv*(shadertype: GLenum, location: int32, params: ptr uint32): void {.glew_lib, importc: "glGetUniformSubroutineuiv".}
proc uniformSubroutinesuiv*(shadertype: GLenum, count: int32, indices: ptr uint32): void {.glew_lib, importc: "glUniformSubroutinesuiv".}
proc compileShaderIncludeARB*(shader: uint32, count: int32, path: ptr cstring, length: ptr int32): void {.glew_lib, importc: "glCompileShaderIncludeARB".}
proc deleteNamedStringARB*(namelen: int32, name: cstring): void {.glew_lib, importc: "glDeleteNamedStringARB".}
proc getNamedStringARB*(namelen: int32, name: cstring, bufSize: int32, stringlen: ptr int32, stryng: cstring): void {.glew_lib, importc: "glGetNamedStringARB".}
proc getNamedStringivARB*(namelen: int32, name: cstring, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetNamedStringivARB".}
proc isNamedStringARB*(namelen: int32, name: cstring): bool {.glew_lib, importc: "glIsNamedStringARB".}
proc namedStringARB*(tipe: GLenum, namelen: int32, name: cstring, stringlen: int32, stryng: cstring): void {.glew_lib, importc: "glNamedStringARB".}
proc bufferPageCommitmentARB*(target: GLenum, offset: int32, size: int32, commit: bool): void {.glew_lib, importc: "glBufferPageCommitmentARB".}
proc texPageCommitmentARB*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, commit: bool): void {.glew_lib, importc: "glTexPageCommitmentARB".}
proc clientWaitSync*(GLsync: distinct pointer, flags: uint32, timeout: uint64): GLenum {.glew_lib, importc: "glClientWaitSync".}
proc deleteSync*(GLsync: distinct pointer): void {.glew_lib, importc: "glDeleteSync".}
proc fenceSync*(condition: GLenum, flags: uint32): distinct pointer {.glew_lib, importc: "glFenceSync".}
proc getInteger64v*(pname: GLenum, params: ptr int64): void {.glew_lib, importc: "glGetInteger64v".}
proc getSynciv*(GLsync: distinct pointer, pname: GLenum, bufSize: int32, length: ptr int32, values: ptr int32): void {.glew_lib, importc: "glGetSynciv".}
proc isSync*(GLsync: distinct pointer): bool {.glew_lib, importc: "glIsSync".}
proc waitSync*(GLsync: distinct pointer, flags: uint32, timeout: uint64): void {.glew_lib, importc: "glWaitSync".}
proc patchParameterfv*(pname: GLenum, values: ptr float32): void {.glew_lib, importc: "glPatchParameterfv".}
proc patchParameteri*(pname: GLenum, value: int32): void {.glew_lib, importc: "glPatchParameteri".}
proc textureBarrier*(): void {.glew_lib, importc: "glTextureBarrier".}
proc texBufferARB*(target: GLenum, internalformat: GLenum, buffer: uint32): void {.glew_lib, importc: "glTexBufferARB".}
proc texBufferRange*(target: GLenum, internalformat: GLenum, buffer: uint32, offset: int32, size: int32): void {.glew_lib, importc: "glTexBufferRange".}
proc textureBufferRangeEXT*(texture: uint32, target: GLenum, internalformat: GLenum, buffer: uint32, offset: int32, size: int32): void {.glew_lib, importc: "glTextureBufferRangeEXT".}
proc compressedTexImage1DARB*(target: GLenum, level: int32, internalformat: GLenum, width: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexImage1DARB".}
proc compressedTexImage2DARB*(target: GLenum, level: int32, internalformat: GLenum, width: int32, height: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexImage2DARB".}
proc compressedTexImage3DARB*(target: GLenum, level: int32, internalformat: GLenum, width: int32, height: int32, depth: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexImage3DARB".}
proc compressedTexSubImage1DARB*(target: GLenum, level: int32, xoffset: int32, width: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexSubImage1DARB".}
proc compressedTexSubImage2DARB*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, width: int32, height: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexSubImage2DARB".}
proc compressedTexSubImage3DARB*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexSubImage3DARB".}
proc getCompressedTexImageARB*(target: GLenum, lod: int32, img: pointer): void {.glew_lib, importc: "glGetCompressedTexImageARB".}
proc getMultisamplefv*(pname: GLenum, index: uint32, val: ptr float32): void {.glew_lib, importc: "glGetMultisamplefv".}
proc sampleMaski*(index: uint32, mask: uint32): void {.glew_lib, importc: "glSampleMaski".}
proc texImage2DMultisample*(target: GLenum, samples: int32, internalformat: GLenum, width: int32, height: int32, fixedsamplelocations: bool): void {.glew_lib, importc: "glTexImage2DMultisample".}
proc texImage3DMultisample*(target: GLenum, samples: int32, internalformat: GLenum, width: int32, height: int32, depth: int32, fixedsamplelocations: bool): void {.glew_lib, importc: "glTexImage3DMultisample".}
proc texStorage1D*(target: GLenum, levels: int32, internalformat: GLenum, width: int32): void {.glew_lib, importc: "glTexStorage1D".}
proc texStorage2D*(target: GLenum, levels: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glTexStorage2D".}
proc texStorage3D*(target: GLenum, levels: int32, internalformat: GLenum, width: int32, height: int32, depth: int32): void {.glew_lib, importc: "glTexStorage3D".}
proc texStorage2DMultisample*(target: GLenum, samples: int32, internalformat: GLenum, width: int32, height: int32, fixedsamplelocations: bool): void {.glew_lib, importc: "glTexStorage2DMultisample".}
proc texStorage3DMultisample*(target: GLenum, samples: int32, internalformat: GLenum, width: int32, height: int32, depth: int32, fixedsamplelocations: bool): void {.glew_lib, importc: "glTexStorage3DMultisample".}
proc textureStorage2DMultisampleEXT*(texture: uint32, target: GLenum, samples: int32, internalformat: GLenum, width: int32, height: int32, fixedsamplelocations: bool): void {.glew_lib, importc: "glTextureStorage2DMultisampleEXT".}
proc textureStorage3DMultisampleEXT*(texture: uint32, target: GLenum, samples: int32, internalformat: GLenum, width: int32, height: int32, depth: int32, fixedsamplelocations: bool): void {.glew_lib, importc: "glTextureStorage3DMultisampleEXT".}
proc textureView*(texture: uint32, target: GLenum, origtexture: uint32, internalformat: GLenum, minlevel: uint32, numlevels: uint32, minlayer: uint32, numlayers: uint32): void {.glew_lib, importc: "glTextureView".}
proc getQueryObjecti64v*(id: uint32, pname: GLenum, params: ptr int64): void {.glew_lib, importc: "glGetQueryObjecti64v".}
proc getQueryObjectui64v*(id: uint32, pname: GLenum, params: ptr uint64): void {.glew_lib, importc: "glGetQueryObjectui64v".}
proc queryCounter*(id: uint32, target: GLenum): void {.glew_lib, importc: "glQueryCounter".}
proc bindTransformFeedback*(target: GLenum, id: uint32): void {.glew_lib, importc: "glBindTransformFeedback".}
proc deleteTransformFeedbacks*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glDeleteTransformFeedbacks".}
proc drawTransformFeedback*(mode: GLenum, id: uint32): void {.glew_lib, importc: "glDrawTransformFeedback".}
proc genTransformFeedbacks*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glGenTransformFeedbacks".}
proc isTransformFeedback*(id: uint32): bool {.glew_lib, importc: "glIsTransformFeedback".}
proc pauseTransformFeedback*(): void {.glew_lib, importc: "glPauseTransformFeedback".}
proc resumeTransformFeedback*(): void {.glew_lib, importc: "glResumeTransformFeedback".}
proc beginQueryIndexed*(target: GLenum, index: uint32, id: uint32): void {.glew_lib, importc: "glBeginQueryIndexed".}
proc drawTransformFeedbackStream*(mode: GLenum, id: uint32, stream: uint32): void {.glew_lib, importc: "glDrawTransformFeedbackStream".}
proc endQueryIndexed*(target: GLenum, index: uint32): void {.glew_lib, importc: "glEndQueryIndexed".}
proc getQueryIndexediv*(target: GLenum, index: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetQueryIndexediv".}
proc drawTransformFeedbackInstanced*(mode: GLenum, id: uint32, primcount: int32): void {.glew_lib, importc: "glDrawTransformFeedbackInstanced".}
proc drawTransformFeedbackStreamInstanced*(mode: GLenum, id: uint32, stream: uint32, primcount: int32): void {.glew_lib, importc: "glDrawTransformFeedbackStreamInstanced".}
proc loadTransposeMatrixdARB*(m: ptr float64): void {.glew_lib, importc: "glLoadTransposeMatrixdARB".}
proc loadTransposeMatrixfARB*(m: ptr float32): void {.glew_lib, importc: "glLoadTransposeMatrixfARB".}
proc multTransposeMatrixdARB*(m: ptr float64): void {.glew_lib, importc: "glMultTransposeMatrixdARB".}
proc multTransposeMatrixfARB*(m: ptr float32): void {.glew_lib, importc: "glMultTransposeMatrixfARB".}
proc bindBufferBase*(target: GLenum, index: uint32, buffer: uint32): void {.glew_lib, importc: "glBindBufferBase".}
proc bindBufferRange*(target: GLenum, index: uint32, buffer: uint32, offset: int32, size: int32): void {.glew_lib, importc: "glBindBufferRange".}
proc getActiveUniformBlockName*(program: uint32, uniformBlockIndex: uint32, bufSize: int32, length: ptr int32, uniformBlockName: ptr char): void {.glew_lib, importc: "glGetActiveUniformBlockName".}
proc getActiveUniformBlockiv*(program: uint32, uniformBlockIndex: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetActiveUniformBlockiv".}
proc getActiveUniformName*(program: uint32, uniformIndex: uint32, bufSize: int32, length: ptr int32, uniformName: ptr char): void {.glew_lib, importc: "glGetActiveUniformName".}
proc getActiveUniformsiv*(program: uint32, uniformCount: int32, uniformIndices: ptr uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetActiveUniformsiv".}
proc getIntegeri_v*(target: GLenum, index: uint32, data: ptr int32): void {.glew_lib, importc: "glGetIntegeri_v".}
proc getUniformBlockIndex*(program: uint32, uniformBlockName: cstring): uint32 {.glew_lib, importc: "glGetUniformBlockIndex".}
proc getUniformIndices*(program: uint32, uniformCount: int32, uniformNames: ptr cstring, uniformIndices: ptr uint32): void {.glew_lib, importc: "glGetUniformIndices".}
proc uniformBlockBinding*(program: uint32, uniformBlockIndex: uint32, uniformBlockBinding: uint32): void {.glew_lib, importc: "glUniformBlockBinding".}
proc bindVertexArray*(arrai: uint32): void {.glew_lib, importc: "glBindVertexArray".}
proc deleteVertexArrays*(n: int32, arrays: ptr uint32): void {.glew_lib, importc: "glDeleteVertexArrays".}
proc genVertexArrays*(n: int32, arrays: ptr uint32): void {.glew_lib, importc: "glGenVertexArrays".}
proc isVertexArray*(arrai: uint32): bool {.glew_lib, importc: "glIsVertexArray".}
proc getVertexAttribLdv*(index: uint32, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glGetVertexAttribLdv".}
proc vertexAttribL1d*(index: uint32, x: float64): void {.glew_lib, importc: "glVertexAttribL1d".}
proc vertexAttribL1dv*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribL1dv".}
proc vertexAttribL2d*(index: uint32, x: float64, y: float64): void {.glew_lib, importc: "glVertexAttribL2d".}
proc vertexAttribL2dv*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribL2dv".}
proc vertexAttribL3d*(index: uint32, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glVertexAttribL3d".}
proc vertexAttribL3dv*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribL3dv".}
proc vertexAttribL4d*(index: uint32, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glVertexAttribL4d".}
proc vertexAttribL4dv*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribL4dv".}
proc vertexAttribLPointer*(index: uint32, size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glVertexAttribLPointer".}
proc bindVertexBuffer*(bindingindex: uint32, buffer: uint32, offset: int32, stride: int32): void {.glew_lib, importc: "glBindVertexBuffer".}
proc vertexArrayBindVertexBufferEXT*(vaobj: uint32, bindingindex: uint32, buffer: uint32, offset: int32, stride: int32): void {.glew_lib, importc: "glVertexArrayBindVertexBufferEXT".}
proc vertexArrayVertexAttribBindingEXT*(vaobj: uint32, attribindex: uint32, bindingindex: uint32): void {.glew_lib, importc: "glVertexArrayVertexAttribBindingEXT".}
proc vertexArrayVertexAttribFormatEXT*(vaobj: uint32, attribindex: uint32, size: int32, tipe: GLenum, normalized: bool, relativeoffset: uint32): void {.glew_lib, importc: "glVertexArrayVertexAttribFormatEXT".}
proc vertexArrayVertexAttribIFormatEXT*(vaobj: uint32, attribindex: uint32, size: int32, tipe: GLenum, relativeoffset: uint32): void {.glew_lib, importc: "glVertexArrayVertexAttribIFormatEXT".}
proc vertexArrayVertexAttribLFormatEXT*(vaobj: uint32, attribindex: uint32, size: int32, tipe: GLenum, relativeoffset: uint32): void {.glew_lib, importc: "glVertexArrayVertexAttribLFormatEXT".}
proc vertexArrayVertexBindingDivisorEXT*(vaobj: uint32, bindingindex: uint32, divisor: uint32): void {.glew_lib, importc: "glVertexArrayVertexBindingDivisorEXT".}
proc vertexAttribBinding*(attribindex: uint32, bindingindex: uint32): void {.glew_lib, importc: "glVertexAttribBinding".}
proc vertexAttribFormat*(attribindex: uint32, size: int32, tipe: GLenum, normalized: bool, relativeoffset: uint32): void {.glew_lib, importc: "glVertexAttribFormat".}
proc vertexAttribIFormat*(attribindex: uint32, size: int32, tipe: GLenum, relativeoffset: uint32): void {.glew_lib, importc: "glVertexAttribIFormat".}
proc vertexAttribLFormat*(attribindex: uint32, size: int32, tipe: GLenum, relativeoffset: uint32): void {.glew_lib, importc: "glVertexAttribLFormat".}
proc vertexBindingDivisor*(bindingindex: uint32, divisor: uint32): void {.glew_lib, importc: "glVertexBindingDivisor".}
proc vertexBlendARB*(count: int32): void {.glew_lib, importc: "glVertexBlendARB".}
proc weightPointerARB*(size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glWeightPointerARB".}
proc weightbvARB*(size: int32, weights: ptr int8): void {.glew_lib, importc: "glWeightbvARB".}
proc weightdvARB*(size: int32, weights: ptr float64): void {.glew_lib, importc: "glWeightdvARB".}
proc weightfvARB*(size: int32, weights: ptr float32): void {.glew_lib, importc: "glWeightfvARB".}
proc weightivARB*(size: int32, weights: ptr int32): void {.glew_lib, importc: "glWeightivARB".}
proc weightsvARB*(size: int32, weights: ptr int16): void {.glew_lib, importc: "glWeightsvARB".}
proc weightubvARB*(size: int32, weights: ptr uint8): void {.glew_lib, importc: "glWeightubvARB".}
proc weightuivARB*(size: int32, weights: ptr uint32): void {.glew_lib, importc: "glWeightuivARB".}
proc weightusvARB*(size: int32, weights: ptr uint16): void {.glew_lib, importc: "glWeightusvARB".}
proc bindBufferARB*(target: GLenum, buffer: uint32): void {.glew_lib, importc: "glBindBufferARB".}
proc bufferDataARB*(target: GLenum, size: int32, data: pointer, usage: GLenum): void {.glew_lib, importc: "glBufferDataARB".}
proc bufferSubDataARB*(target: GLenum, offset: int32, size: int32, data: pointer): void {.glew_lib, importc: "glBufferSubDataARB".}
proc deleteBuffersARB*(n: int32, buffers: ptr uint32): void {.glew_lib, importc: "glDeleteBuffersARB".}
proc genBuffersARB*(n: int32, buffers: ptr uint32): void {.glew_lib, importc: "glGenBuffersARB".}
proc getBufferParameterivARB*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetBufferParameterivARB".}
proc getBufferPointervARB*(target: GLenum, pname: GLenum, params: ptr void): void {.glew_lib, importc: "glGetBufferPointervARB".}
proc getBufferSubDataARB*(target: GLenum, offset: int32, size: int32, data: pointer): void {.glew_lib, importc: "glGetBufferSubDataARB".}
proc isBufferARB*(buffer: uint32): bool {.glew_lib, importc: "glIsBufferARB".}
proc mapBufferARB*(target: GLenum, access: GLenum): void {.glew_lib, importc: "glMapBufferARB".}
proc unmapBufferARB*(target: GLenum): bool {.glew_lib, importc: "glUnmapBufferARB".}
proc bindProgramARB*(target: GLenum, program: uint32): void {.glew_lib, importc: "glBindProgramARB".}
proc deleteProgramsARB*(n: int32, programs: ptr uint32): void {.glew_lib, importc: "glDeleteProgramsARB".}
proc disableVertexAttribArrayARB*(index: uint32): void {.glew_lib, importc: "glDisableVertexAttribArrayARB".}
proc enableVertexAttribArrayARB*(index: uint32): void {.glew_lib, importc: "glEnableVertexAttribArrayARB".}
proc genProgramsARB*(n: int32, programs: ptr uint32): void {.glew_lib, importc: "glGenProgramsARB".}
proc getProgramEnvParameterdvARB*(target: GLenum, index: uint32, params: ptr float64): void {.glew_lib, importc: "glGetProgramEnvParameterdvARB".}
proc getProgramEnvParameterfvARB*(target: GLenum, index: uint32, params: ptr float32): void {.glew_lib, importc: "glGetProgramEnvParameterfvARB".}
proc getProgramLocalParameterdvARB*(target: GLenum, index: uint32, params: ptr float64): void {.glew_lib, importc: "glGetProgramLocalParameterdvARB".}
proc getProgramLocalParameterfvARB*(target: GLenum, index: uint32, params: ptr float32): void {.glew_lib, importc: "glGetProgramLocalParameterfvARB".}
proc getProgramStringARB*(target: GLenum, pname: GLenum, stryng: pointer): void {.glew_lib, importc: "glGetProgramStringARB".}
proc getProgramivARB*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetProgramivARB".}
proc getVertexAttribPointervARB*(index: uint32, pname: GLenum, poynter: ptr void): void {.glew_lib, importc: "glGetVertexAttribPointervARB".}
proc getVertexAttribdvARB*(index: uint32, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glGetVertexAttribdvARB".}
proc getVertexAttribfvARB*(index: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetVertexAttribfvARB".}
proc getVertexAttribivARB*(index: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetVertexAttribivARB".}
proc isProgramARB*(program: uint32): bool {.glew_lib, importc: "glIsProgramARB".}
proc programEnvParameter4dARB*(target: GLenum, index: uint32, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glProgramEnvParameter4dARB".}
proc programEnvParameter4dvARB*(target: GLenum, index: uint32, params: ptr float64): void {.glew_lib, importc: "glProgramEnvParameter4dvARB".}
proc programEnvParameter4fARB*(target: GLenum, index: uint32, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glProgramEnvParameter4fARB".}
proc programEnvParameter4fvARB*(target: GLenum, index: uint32, params: ptr float32): void {.glew_lib, importc: "glProgramEnvParameter4fvARB".}
proc programLocalParameter4dARB*(target: GLenum, index: uint32, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glProgramLocalParameter4dARB".}
proc programLocalParameter4dvARB*(target: GLenum, index: uint32, params: ptr float64): void {.glew_lib, importc: "glProgramLocalParameter4dvARB".}
proc programLocalParameter4fARB*(target: GLenum, index: uint32, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glProgramLocalParameter4fARB".}
proc programLocalParameter4fvARB*(target: GLenum, index: uint32, params: ptr float32): void {.glew_lib, importc: "glProgramLocalParameter4fvARB".}
proc programStringARB*(target: GLenum, format: GLenum, len: int32, stryng: pointer): void {.glew_lib, importc: "glProgramStringARB".}
proc vertexAttrib1dARB*(index: uint32, x: float64): void {.glew_lib, importc: "glVertexAttrib1dARB".}
proc vertexAttrib1dvARB*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib1dvARB".}
proc vertexAttrib1fARB*(index: uint32, x: float32): void {.glew_lib, importc: "glVertexAttrib1fARB".}
proc vertexAttrib1fvARB*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib1fvARB".}
proc vertexAttrib1sARB*(index: uint32, x: int16): void {.glew_lib, importc: "glVertexAttrib1sARB".}
proc vertexAttrib1svARB*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib1svARB".}
proc vertexAttrib2dARB*(index: uint32, x: float64, y: float64): void {.glew_lib, importc: "glVertexAttrib2dARB".}
proc vertexAttrib2dvARB*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib2dvARB".}
proc vertexAttrib2fARB*(index: uint32, x: float32, y: float32): void {.glew_lib, importc: "glVertexAttrib2fARB".}
proc vertexAttrib2fvARB*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib2fvARB".}
proc vertexAttrib2sARB*(index: uint32, x: int16, y: int16): void {.glew_lib, importc: "glVertexAttrib2sARB".}
proc vertexAttrib2svARB*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib2svARB".}
proc vertexAttrib3dARB*(index: uint32, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glVertexAttrib3dARB".}
proc vertexAttrib3dvARB*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib3dvARB".}
proc vertexAttrib3fARB*(index: uint32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glVertexAttrib3fARB".}
proc vertexAttrib3fvARB*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib3fvARB".}
proc vertexAttrib3sARB*(index: uint32, x: int16, y: int16, z: int16): void {.glew_lib, importc: "glVertexAttrib3sARB".}
proc vertexAttrib3svARB*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib3svARB".}
proc vertexAttrib4NbvARB*(index: uint32, v: ptr int8): void {.glew_lib, importc: "glVertexAttrib4NbvARB".}
proc vertexAttrib4NivARB*(index: uint32, v: ptr int32): void {.glew_lib, importc: "glVertexAttrib4NivARB".}
proc vertexAttrib4NsvARB*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib4NsvARB".}
proc vertexAttrib4NubARB*(index: uint32, x: uint8, y: uint8, z: uint8, w: uint8): void {.glew_lib, importc: "glVertexAttrib4NubARB".}
proc vertexAttrib4NubvARB*(index: uint32, v: ptr uint8): void {.glew_lib, importc: "glVertexAttrib4NubvARB".}
proc vertexAttrib4NuivARB*(index: uint32, v: ptr uint32): void {.glew_lib, importc: "glVertexAttrib4NuivARB".}
proc vertexAttrib4NusvARB*(index: uint32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttrib4NusvARB".}
proc vertexAttrib4bvARB*(index: uint32, v: ptr int8): void {.glew_lib, importc: "glVertexAttrib4bvARB".}
proc vertexAttrib4dARB*(index: uint32, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glVertexAttrib4dARB".}
proc vertexAttrib4dvARB*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib4dvARB".}
proc vertexAttrib4fARB*(index: uint32, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glVertexAttrib4fARB".}
proc vertexAttrib4fvARB*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib4fvARB".}
proc vertexAttrib4ivARB*(index: uint32, v: ptr int32): void {.glew_lib, importc: "glVertexAttrib4ivARB".}
proc vertexAttrib4sARB*(index: uint32, x: int16, y: int16, z: int16, w: int16): void {.glew_lib, importc: "glVertexAttrib4sARB".}
proc vertexAttrib4svARB*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib4svARB".}
proc vertexAttrib4ubvARB*(index: uint32, v: ptr uint8): void {.glew_lib, importc: "glVertexAttrib4ubvARB".}
proc vertexAttrib4uivARB*(index: uint32, v: ptr uint32): void {.glew_lib, importc: "glVertexAttrib4uivARB".}
proc vertexAttrib4usvARB*(index: uint32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttrib4usvARB".}
proc vertexAttribPointerARB*(index: uint32, size: int32, tipe: GLenum, normalized: bool, stride: int32, poynter: pointer): void {.glew_lib, importc: "glVertexAttribPointerARB".}
proc bindAttribLocationARB*(programObj: uint32, index: uint32, name: ptr byte): void {.glew_lib, importc: "glBindAttribLocationARB".}
proc getActiveAttribARB*(programObj: uint32, index: uint32, maxLength: int32, length: ptr int32, size: ptr int32, tipe: ptr GLenum, name: ptr byte): void {.glew_lib, importc: "glGetActiveAttribARB".}
proc getAttribLocationARB*(programObj: uint32, name: ptr byte): int32 {.glew_lib, importc: "glGetAttribLocationARB".}
proc colorP3ui*(tipe: GLenum, color: uint32): void {.glew_lib, importc: "glColorP3ui".}
proc colorP3uiv*(tipe: GLenum, color: ptr uint32): void {.glew_lib, importc: "glColorP3uiv".}
proc colorP4ui*(tipe: GLenum, color: uint32): void {.glew_lib, importc: "glColorP4ui".}
proc colorP4uiv*(tipe: GLenum, color: ptr uint32): void {.glew_lib, importc: "glColorP4uiv".}
proc multiTexCoordP1ui*(texture: GLenum, tipe: GLenum, coords: uint32): void {.glew_lib, importc: "glMultiTexCoordP1ui".}
proc multiTexCoordP1uiv*(texture: GLenum, tipe: GLenum, coords: ptr uint32): void {.glew_lib, importc: "glMultiTexCoordP1uiv".}
proc multiTexCoordP2ui*(texture: GLenum, tipe: GLenum, coords: uint32): void {.glew_lib, importc: "glMultiTexCoordP2ui".}
proc multiTexCoordP2uiv*(texture: GLenum, tipe: GLenum, coords: ptr uint32): void {.glew_lib, importc: "glMultiTexCoordP2uiv".}
proc multiTexCoordP3ui*(texture: GLenum, tipe: GLenum, coords: uint32): void {.glew_lib, importc: "glMultiTexCoordP3ui".}
proc multiTexCoordP3uiv*(texture: GLenum, tipe: GLenum, coords: ptr uint32): void {.glew_lib, importc: "glMultiTexCoordP3uiv".}
proc multiTexCoordP4ui*(texture: GLenum, tipe: GLenum, coords: uint32): void {.glew_lib, importc: "glMultiTexCoordP4ui".}
proc multiTexCoordP4uiv*(texture: GLenum, tipe: GLenum, coords: ptr uint32): void {.glew_lib, importc: "glMultiTexCoordP4uiv".}
proc normalP3ui*(tipe: GLenum, coords: uint32): void {.glew_lib, importc: "glNormalP3ui".}
proc normalP3uiv*(tipe: GLenum, coords: ptr uint32): void {.glew_lib, importc: "glNormalP3uiv".}
proc secondaryColorP3ui*(tipe: GLenum, color: uint32): void {.glew_lib, importc: "glSecondaryColorP3ui".}
proc secondaryColorP3uiv*(tipe: GLenum, color: ptr uint32): void {.glew_lib, importc: "glSecondaryColorP3uiv".}
proc texCoordP1ui*(tipe: GLenum, coords: uint32): void {.glew_lib, importc: "glTexCoordP1ui".}
proc texCoordP1uiv*(tipe: GLenum, coords: ptr uint32): void {.glew_lib, importc: "glTexCoordP1uiv".}
proc texCoordP2ui*(tipe: GLenum, coords: uint32): void {.glew_lib, importc: "glTexCoordP2ui".}
proc texCoordP2uiv*(tipe: GLenum, coords: ptr uint32): void {.glew_lib, importc: "glTexCoordP2uiv".}
proc texCoordP3ui*(tipe: GLenum, coords: uint32): void {.glew_lib, importc: "glTexCoordP3ui".}
proc texCoordP3uiv*(tipe: GLenum, coords: ptr uint32): void {.glew_lib, importc: "glTexCoordP3uiv".}
proc texCoordP4ui*(tipe: GLenum, coords: uint32): void {.glew_lib, importc: "glTexCoordP4ui".}
proc texCoordP4uiv*(tipe: GLenum, coords: ptr uint32): void {.glew_lib, importc: "glTexCoordP4uiv".}
proc vertexAttribP1ui*(index: uint32, tipe: GLenum, normalized: bool, value: uint32): void {.glew_lib, importc: "glVertexAttribP1ui".}
proc vertexAttribP1uiv*(index: uint32, tipe: GLenum, normalized: bool, value: ptr uint32): void {.glew_lib, importc: "glVertexAttribP1uiv".}
proc vertexAttribP2ui*(index: uint32, tipe: GLenum, normalized: bool, value: uint32): void {.glew_lib, importc: "glVertexAttribP2ui".}
proc vertexAttribP2uiv*(index: uint32, tipe: GLenum, normalized: bool, value: ptr uint32): void {.glew_lib, importc: "glVertexAttribP2uiv".}
proc vertexAttribP3ui*(index: uint32, tipe: GLenum, normalized: bool, value: uint32): void {.glew_lib, importc: "glVertexAttribP3ui".}
proc vertexAttribP3uiv*(index: uint32, tipe: GLenum, normalized: bool, value: ptr uint32): void {.glew_lib, importc: "glVertexAttribP3uiv".}
proc vertexAttribP4ui*(index: uint32, tipe: GLenum, normalized: bool, value: uint32): void {.glew_lib, importc: "glVertexAttribP4ui".}
proc vertexAttribP4uiv*(index: uint32, tipe: GLenum, normalized: bool, value: ptr uint32): void {.glew_lib, importc: "glVertexAttribP4uiv".}
proc vertexP2ui*(tipe: GLenum, value: uint32): void {.glew_lib, importc: "glVertexP2ui".}
proc vertexP2uiv*(tipe: GLenum, value: ptr uint32): void {.glew_lib, importc: "glVertexP2uiv".}
proc vertexP3ui*(tipe: GLenum, value: uint32): void {.glew_lib, importc: "glVertexP3ui".}
proc vertexP3uiv*(tipe: GLenum, value: ptr uint32): void {.glew_lib, importc: "glVertexP3uiv".}
proc vertexP4ui*(tipe: GLenum, value: uint32): void {.glew_lib, importc: "glVertexP4ui".}
proc vertexP4uiv*(tipe: GLenum, value: ptr uint32): void {.glew_lib, importc: "glVertexP4uiv".}
proc depthRangeArrayv*(first: uint32, count: int32, v: ptr float64): void {.glew_lib, importc: "glDepthRangeArrayv".}
proc depthRangeIndexed*(index: uint32, n: float64, f: float64): void {.glew_lib, importc: "glDepthRangeIndexed".}
proc getDoublei_v*(target: GLenum, index: uint32, data: ptr float64): void {.glew_lib, importc: "glGetDoublei_v".}
proc getFloati_v*(target: GLenum, index: uint32, data: ptr float32): void {.glew_lib, importc: "glGetFloati_v".}
proc scissorArrayv*(first: uint32, count: int32, v: ptr int32): void {.glew_lib, importc: "glScissorArrayv".}
proc scissorIndexed*(index: uint32, left: int32, bottom: int32, width: int32, height: int32): void {.glew_lib, importc: "glScissorIndexed".}
proc scissorIndexedv*(index: uint32, v: ptr int32): void {.glew_lib, importc: "glScissorIndexedv".}
proc viewportArrayv*(first: uint32, count: int32, v: ptr float32): void {.glew_lib, importc: "glViewportArrayv".}
proc viewportIndexedf*(index: uint32, x: float32, y: float32, w: float32, h: float32): void {.glew_lib, importc: "glViewportIndexedf".}
proc viewportIndexedfv*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glViewportIndexedfv".}
proc windowPos2dARB*(x: float64, y: float64): void {.glew_lib, importc: "glWindowPos2dARB".}
proc windowPos2dvARB*(p: ptr float64): void {.glew_lib, importc: "glWindowPos2dvARB".}
proc windowPos2fARB*(x: float32, y: float32): void {.glew_lib, importc: "glWindowPos2fARB".}
proc windowPos2fvARB*(p: ptr float32): void {.glew_lib, importc: "glWindowPos2fvARB".}
proc windowPos2iARB*(x: int32, y: int32): void {.glew_lib, importc: "glWindowPos2iARB".}
proc windowPos2ivARB*(p: ptr int32): void {.glew_lib, importc: "glWindowPos2ivARB".}
proc windowPos2sARB*(x: int16, y: int16): void {.glew_lib, importc: "glWindowPos2sARB".}
proc windowPos2svARB*(p: ptr int16): void {.glew_lib, importc: "glWindowPos2svARB".}
proc windowPos3dARB*(x: float64, y: float64, z: float64): void {.glew_lib, importc: "glWindowPos3dARB".}
proc windowPos3dvARB*(p: ptr float64): void {.glew_lib, importc: "glWindowPos3dvARB".}
proc windowPos3fARB*(x: float32, y: float32, z: float32): void {.glew_lib, importc: "glWindowPos3fARB".}
proc windowPos3fvARB*(p: ptr float32): void {.glew_lib, importc: "glWindowPos3fvARB".}
proc windowPos3iARB*(x: int32, y: int32, z: int32): void {.glew_lib, importc: "glWindowPos3iARB".}
proc windowPos3ivARB*(p: ptr int32): void {.glew_lib, importc: "glWindowPos3ivARB".}
proc windowPos3sARB*(x: int16, y: int16, z: int16): void {.glew_lib, importc: "glWindowPos3sARB".}
proc windowPos3svARB*(p: ptr int16): void {.glew_lib, importc: "glWindowPos3svARB".}
proc drawBuffersATI*(n: int32, bufs: ptr GLenum): void {.glew_lib, importc: "glDrawBuffersATI".}
proc drawElementArrayATI*(mode: GLenum, count: int32): void {.glew_lib, importc: "glDrawElementArrayATI".}
proc drawRangeElementArrayATI*(mode: GLenum, start: uint32, glEnd: uint32, count: int32): void {.glew_lib, importc: "glDrawRangeElementArrayATI".}
proc elementPointerATI*(tipe: GLenum, poynter: pointer): void {.glew_lib, importc: "glElementPointerATI".}
proc getTexBumpParameterfvATI*(pname: GLenum, param: ptr float32): void {.glew_lib, importc: "glGetTexBumpParameterfvATI".}
proc getTexBumpParameterivATI*(pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glGetTexBumpParameterivATI".}
proc texBumpParameterfvATI*(pname: GLenum, param: ptr float32): void {.glew_lib, importc: "glTexBumpParameterfvATI".}
proc texBumpParameterivATI*(pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glTexBumpParameterivATI".}
proc alphaFragmentOp1ATI*(op: GLenum, dst: uint32, dstMod: uint32, arg1: uint32, arg1Rep: uint32, arg1Mod: uint32): void {.glew_lib, importc: "glAlphaFragmentOp1ATI".}
proc alphaFragmentOp2ATI*(op: GLenum, dst: uint32, dstMod: uint32, arg1: uint32, arg1Rep: uint32, arg1Mod: uint32, arg2: uint32, arg2Rep: uint32, arg2Mod: uint32): void {.glew_lib, importc: "glAlphaFragmentOp2ATI".}
proc alphaFragmentOp3ATI*(op: GLenum, dst: uint32, dstMod: uint32, arg1: uint32, arg1Rep: uint32, arg1Mod: uint32, arg2: uint32, arg2Rep: uint32, arg2Mod: uint32, arg3: uint32, arg3Rep: uint32, arg3Mod: uint32): void {.glew_lib, importc: "glAlphaFragmentOp3ATI".}
proc beginFragmentShaderATI*(): void {.glew_lib, importc: "glBeginFragmentShaderATI".}
proc bindFragmentShaderATI*(id: uint32): void {.glew_lib, importc: "glBindFragmentShaderATI".}
proc colorFragmentOp1ATI*(op: GLenum, dst: uint32, dstMask: uint32, dstMod: uint32, arg1: uint32, arg1Rep: uint32, arg1Mod: uint32): void {.glew_lib, importc: "glColorFragmentOp1ATI".}
proc colorFragmentOp2ATI*(op: GLenum, dst: uint32, dstMask: uint32, dstMod: uint32, arg1: uint32, arg1Rep: uint32, arg1Mod: uint32, arg2: uint32, arg2Rep: uint32, arg2Mod: uint32): void {.glew_lib, importc: "glColorFragmentOp2ATI".}
proc colorFragmentOp3ATI*(op: GLenum, dst: uint32, dstMask: uint32, dstMod: uint32, arg1: uint32, arg1Rep: uint32, arg1Mod: uint32, arg2: uint32, arg2Rep: uint32, arg2Mod: uint32, arg3: uint32, arg3Rep: uint32, arg3Mod: uint32): void {.glew_lib, importc: "glColorFragmentOp3ATI".}
proc deleteFragmentShaderATI*(id: uint32): void {.glew_lib, importc: "glDeleteFragmentShaderATI".}
proc endFragmentShaderATI*(): void {.glew_lib, importc: "glEndFragmentShaderATI".}
proc genFragmentShadersATI*(rangee: uint32): uint32 {.glew_lib, importc: "glGenFragmentShadersATI".}
proc passTexCoordATI*(dst: uint32, coord: uint32, swizzle: GLenum): void {.glew_lib, importc: "glPassTexCoordATI".}
proc sampleMapATI*(dst: uint32, interp: uint32, swizzle: GLenum): void {.glew_lib, importc: "glSampleMapATI".}
proc setFragmentShaderConstantATI*(dst: uint32, value: ptr float32): void {.glew_lib, importc: "glSetFragmentShaderConstantATI".}
proc mapObjectBufferATI*(buffer: uint32): void {.glew_lib, importc: "glMapObjectBufferATI".}
proc unmapObjectBufferATI*(buffer: uint32): void {.glew_lib, importc: "glUnmapObjectBufferATI".}
proc pNTrianglesfATI*(pname: GLenum, param: float32): void {.glew_lib, importc: "glPNTrianglesfATI".}
proc pNTrianglesiATI*(pname: GLenum, param: int32): void {.glew_lib, importc: "glPNTrianglesiATI".}
proc stencilFuncSeparateATI*(frontfunc: GLenum, backfunc: GLenum, reff: int32, mask: uint32): void {.glew_lib, importc: "glStencilFuncSeparateATI".}
proc stencilOpSeparateATI*(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum): void {.glew_lib, importc: "glStencilOpSeparateATI".}
proc arrayObjectATI*(arrai: GLenum, size: int32, tipe: GLenum, stride: int32, buffer: uint32, offset: uint32): void {.glew_lib, importc: "glArrayObjectATI".}
proc freeObjectBufferATI*(buffer: uint32): void {.glew_lib, importc: "glFreeObjectBufferATI".}
proc getArrayObjectfvATI*(arrai: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetArrayObjectfvATI".}
proc getArrayObjectivATI*(arrai: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetArrayObjectivATI".}
proc getObjectBufferfvATI*(buffer: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetObjectBufferfvATI".}
proc getObjectBufferivATI*(buffer: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetObjectBufferivATI".}
proc getVariantArrayObjectfvATI*(id: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetVariantArrayObjectfvATI".}
proc getVariantArrayObjectivATI*(id: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetVariantArrayObjectivATI".}
proc isObjectBufferATI*(buffer: uint32): bool {.glew_lib, importc: "glIsObjectBufferATI".}
proc newObjectBufferATI*(size: int32, poynter: pointer, usage: GLenum): uint32 {.glew_lib, importc: "glNewObjectBufferATI".}
proc updateObjectBufferATI*(buffer: uint32, offset: uint32, size: int32, poynter: pointer, preserve: GLenum): void {.glew_lib, importc: "glUpdateObjectBufferATI".}
proc variantArrayObjectATI*(id: uint32, tipe: GLenum, stride: int32, buffer: uint32, offset: uint32): void {.glew_lib, importc: "glVariantArrayObjectATI".}
proc getVertexAttribArrayObjectfvATI*(index: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetVertexAttribArrayObjectfvATI".}
proc getVertexAttribArrayObjectivATI*(index: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetVertexAttribArrayObjectivATI".}
proc vertexAttribArrayObjectATI*(index: uint32, size: int32, tipe: GLenum, normalized: bool, stride: int32, buffer: uint32, offset: uint32): void {.glew_lib, importc: "glVertexAttribArrayObjectATI".}
proc clientActiveVertexStreamATI*(stream: GLenum): void {.glew_lib, importc: "glClientActiveVertexStreamATI".}
proc normalStream3bATI*(stream: GLenum, x: int8, y: int8, z: int8): void {.glew_lib, importc: "glNormalStream3bATI".}
proc normalStream3bvATI*(stream: GLenum, coords: ptr int8): void {.glew_lib, importc: "glNormalStream3bvATI".}
proc normalStream3dATI*(stream: GLenum, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glNormalStream3dATI".}
proc normalStream3dvATI*(stream: GLenum, coords: ptr float64): void {.glew_lib, importc: "glNormalStream3dvATI".}
proc normalStream3fATI*(stream: GLenum, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glNormalStream3fATI".}
proc normalStream3fvATI*(stream: GLenum, coords: ptr float32): void {.glew_lib, importc: "glNormalStream3fvATI".}
proc normalStream3iATI*(stream: GLenum, x: int32, y: int32, z: int32): void {.glew_lib, importc: "glNormalStream3iATI".}
proc normalStream3ivATI*(stream: GLenum, coords: ptr int32): void {.glew_lib, importc: "glNormalStream3ivATI".}
proc normalStream3sATI*(stream: GLenum, x: int16, y: int16, z: int16): void {.glew_lib, importc: "glNormalStream3sATI".}
proc normalStream3svATI*(stream: GLenum, coords: ptr int16): void {.glew_lib, importc: "glNormalStream3svATI".}
proc vertexBlendEnvfATI*(pname: GLenum, param: float32): void {.glew_lib, importc: "glVertexBlendEnvfATI".}
proc vertexBlendEnviATI*(pname: GLenum, param: int32): void {.glew_lib, importc: "glVertexBlendEnviATI".}
proc vertexStream1dATI*(stream: GLenum, x: float64): void {.glew_lib, importc: "glVertexStream1dATI".}
proc vertexStream1dvATI*(stream: GLenum, coords: ptr float64): void {.glew_lib, importc: "glVertexStream1dvATI".}
proc vertexStream1fATI*(stream: GLenum, x: float32): void {.glew_lib, importc: "glVertexStream1fATI".}
proc vertexStream1fvATI*(stream: GLenum, coords: ptr float32): void {.glew_lib, importc: "glVertexStream1fvATI".}
proc vertexStream1iATI*(stream: GLenum, x: int32): void {.glew_lib, importc: "glVertexStream1iATI".}
proc vertexStream1ivATI*(stream: GLenum, coords: ptr int32): void {.glew_lib, importc: "glVertexStream1ivATI".}
proc vertexStream1sATI*(stream: GLenum, x: int16): void {.glew_lib, importc: "glVertexStream1sATI".}
proc vertexStream1svATI*(stream: GLenum, coords: ptr int16): void {.glew_lib, importc: "glVertexStream1svATI".}
proc vertexStream2dATI*(stream: GLenum, x: float64, y: float64): void {.glew_lib, importc: "glVertexStream2dATI".}
proc vertexStream2dvATI*(stream: GLenum, coords: ptr float64): void {.glew_lib, importc: "glVertexStream2dvATI".}
proc vertexStream2fATI*(stream: GLenum, x: float32, y: float32): void {.glew_lib, importc: "glVertexStream2fATI".}
proc vertexStream2fvATI*(stream: GLenum, coords: ptr float32): void {.glew_lib, importc: "glVertexStream2fvATI".}
proc vertexStream2iATI*(stream: GLenum, x: int32, y: int32): void {.glew_lib, importc: "glVertexStream2iATI".}
proc vertexStream2ivATI*(stream: GLenum, coords: ptr int32): void {.glew_lib, importc: "glVertexStream2ivATI".}
proc vertexStream2sATI*(stream: GLenum, x: int16, y: int16): void {.glew_lib, importc: "glVertexStream2sATI".}
proc vertexStream2svATI*(stream: GLenum, coords: ptr int16): void {.glew_lib, importc: "glVertexStream2svATI".}
proc vertexStream3dATI*(stream: GLenum, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glVertexStream3dATI".}
proc vertexStream3dvATI*(stream: GLenum, coords: ptr float64): void {.glew_lib, importc: "glVertexStream3dvATI".}
proc vertexStream3fATI*(stream: GLenum, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glVertexStream3fATI".}
proc vertexStream3fvATI*(stream: GLenum, coords: ptr float32): void {.glew_lib, importc: "glVertexStream3fvATI".}
proc vertexStream3iATI*(stream: GLenum, x: int32, y: int32, z: int32): void {.glew_lib, importc: "glVertexStream3iATI".}
proc vertexStream3ivATI*(stream: GLenum, coords: ptr int32): void {.glew_lib, importc: "glVertexStream3ivATI".}
proc vertexStream3sATI*(stream: GLenum, x: int16, y: int16, z: int16): void {.glew_lib, importc: "glVertexStream3sATI".}
proc vertexStream3svATI*(stream: GLenum, coords: ptr int16): void {.glew_lib, importc: "glVertexStream3svATI".}
proc vertexStream4dATI*(stream: GLenum, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glVertexStream4dATI".}
proc vertexStream4dvATI*(stream: GLenum, coords: ptr float64): void {.glew_lib, importc: "glVertexStream4dvATI".}
proc vertexStream4fATI*(stream: GLenum, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glVertexStream4fATI".}
proc vertexStream4fvATI*(stream: GLenum, coords: ptr float32): void {.glew_lib, importc: "glVertexStream4fvATI".}
proc vertexStream4iATI*(stream: GLenum, x: int32, y: int32, z: int32, w: int32): void {.glew_lib, importc: "glVertexStream4iATI".}
proc vertexStream4ivATI*(stream: GLenum, coords: ptr int32): void {.glew_lib, importc: "glVertexStream4ivATI".}
proc vertexStream4sATI*(stream: GLenum, x: int16, y: int16, z: int16, w: int16): void {.glew_lib, importc: "glVertexStream4sATI".}
proc vertexStream4svATI*(stream: GLenum, coords: ptr int16): void {.glew_lib, importc: "glVertexStream4svATI".}
proc drawArraysInstancedBaseInstanceEXT*(mode: GLenum, first: int32, count: int32, instancecount: int32, baseinstance: uint32): void {.glew_lib, importc: "glDrawArraysInstancedBaseInstanceEXT".}
proc drawElementsInstancedBaseInstanceEXT*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, instancecount: int32, baseinstance: uint32): void {.glew_lib, importc: "glDrawElementsInstancedBaseInstanceEXT".}
proc drawElementsInstancedBaseVertexBaseInstanceEXT*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, instancecount: int32, basevertex: int32, baseinstance: uint32): void {.glew_lib, importc: "glDrawElementsInstancedBaseVertexBaseInstanceEXT".}
proc getUniformBufferSizeEXT*(program: uint32, location: int32): int32 {.glew_lib, importc: "glGetUniformBufferSizeEXT".}
proc getUniformOffsetEXT*(program: uint32, location: int32): int32 {.glew_lib, importc: "glGetUniformOffsetEXT".}
proc uniformBufferEXT*(program: uint32, location: int32, buffer: uint32): void {.glew_lib, importc: "glUniformBufferEXT".}
proc blendColorEXT*(red: float32, green: float32, blue: float32, alpha: float32): void {.glew_lib, importc: "glBlendColorEXT".}
proc blendEquationSeparateEXT*(modeRGB: GLenum, modeAlpha: GLenum): void {.glew_lib, importc: "glBlendEquationSeparateEXT".}
proc bindFragDataLocationIndexedEXT*(program: uint32, colorNumber: uint32, index: uint32, name: cstring): void {.glew_lib, importc: "glBindFragDataLocationIndexedEXT".}
proc getFragDataIndexEXT*(program: uint32, name: cstring): int32 {.glew_lib, importc: "glGetFragDataIndexEXT".}
proc getProgramResourceLocationIndexEXT*(program: uint32, programInterface: GLenum, name: cstring): int32 {.glew_lib, importc: "glGetProgramResourceLocationIndexEXT".}
proc blendFuncSeparateEXT*(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum): void {.glew_lib, importc: "glBlendFuncSeparateEXT".}
proc blendEquationEXT*(mode: GLenum): void {.glew_lib, importc: "glBlendEquationEXT".}
proc bufferStorageEXT*(target: GLenum, size: int32, data: pointer, flags: uint32): void {.glew_lib, importc: "glBufferStorageEXT".}
proc namedBufferStorageEXT*(buffer: uint32, size: int32, data: pointer, flags: uint32): void {.glew_lib, importc: "glNamedBufferStorageEXT".}
proc clearTexImageEXT*(texture: uint32, level: int32, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glClearTexImageEXT".}
proc clearTexSubImageEXT*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glClearTexSubImageEXT".}
proc colorSubTableEXT*(target: GLenum, start: int32, count: int32, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glColorSubTableEXT".}
proc copyColorSubTableEXT*(target: GLenum, start: int32, x: int32, y: int32, width: int32): void {.glew_lib, importc: "glCopyColorSubTableEXT".}
proc lockArraysEXT*(first: int32, count: int32): void {.glew_lib, importc: "glLockArraysEXT".}
proc unlockArraysEXT*(): void {.glew_lib, importc: "glUnlockArraysEXT".}
proc convolutionFilter1DEXT*(target: GLenum, internalformat: GLenum, width: int32, format: GLenum, tipe: GLenum, image: pointer): void {.glew_lib, importc: "glConvolutionFilter1DEXT".}
proc convolutionFilter2DEXT*(target: GLenum, internalformat: GLenum, width: int32, height: int32, format: GLenum, tipe: GLenum, image: pointer): void {.glew_lib, importc: "glConvolutionFilter2DEXT".}
proc convolutionParameterfEXT*(target: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glConvolutionParameterfEXT".}
proc convolutionParameterfvEXT*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glConvolutionParameterfvEXT".}
proc convolutionParameteriEXT*(target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glConvolutionParameteriEXT".}
proc convolutionParameterivEXT*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glConvolutionParameterivEXT".}
proc copyConvolutionFilter1DEXT*(target: GLenum, internalformat: GLenum, x: int32, y: int32, width: int32): void {.glew_lib, importc: "glCopyConvolutionFilter1DEXT".}
proc copyConvolutionFilter2DEXT*(target: GLenum, internalformat: GLenum, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyConvolutionFilter2DEXT".}
proc getConvolutionFilterEXT*(target: GLenum, format: GLenum, tipe: GLenum, image: pointer): void {.glew_lib, importc: "glGetConvolutionFilterEXT".}
proc getConvolutionParameterfvEXT*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetConvolutionParameterfvEXT".}
proc getConvolutionParameterivEXT*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetConvolutionParameterivEXT".}
proc getSeparableFilterEXT*(target: GLenum, format: GLenum, tipe: GLenum, row: pointer, column: pointer, span: pointer): void {.glew_lib, importc: "glGetSeparableFilterEXT".}
proc separableFilter2DEXT*(target: GLenum, internalformat: GLenum, width: int32, height: int32, format: GLenum, tipe: GLenum, row: pointer, column: pointer): void {.glew_lib, importc: "glSeparableFilter2DEXT".}
proc binormalPointerEXT*(tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glBinormalPointerEXT".}
proc tangentPointerEXT*(tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glTangentPointerEXT".}
proc copyImageSubDataEXT*(srcName: uint32, srcTarget: GLenum, srcLevel: int32, srcX: int32, srcY: int32, srcZ: int32, dstName: uint32, dstTarget: GLenum, dstLevel: int32, dstX: int32, dstY: int32, dstZ: int32, srcWidth: int32, srcHeight: int32, srcDepth: int32): void {.glew_lib, importc: "glCopyImageSubDataEXT".}
proc copyTexImage1DEXT*(target: GLenum, level: int32, internalformat: GLenum, x: int32, y: int32, width: int32, border: int32): void {.glew_lib, importc: "glCopyTexImage1DEXT".}
proc copyTexImage2DEXT*(target: GLenum, level: int32, internalformat: GLenum, x: int32, y: int32, width: int32, height: int32, border: int32): void {.glew_lib, importc: "glCopyTexImage2DEXT".}
proc copyTexSubImage1DEXT*(target: GLenum, level: int32, xoffset: int32, x: int32, y: int32, width: int32): void {.glew_lib, importc: "glCopyTexSubImage1DEXT".}
proc copyTexSubImage2DEXT*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyTexSubImage2DEXT".}
proc copyTexSubImage3DEXT*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyTexSubImage3DEXT".}
proc cullParameterdvEXT*(pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glCullParameterdvEXT".}
proc cullParameterfvEXT*(pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glCullParameterfvEXT".}
proc getObjectLabelEXT*(tipe: GLenum, obj: uint32, bufSize: int32, length: ptr int32, label: ptr char): void {.glew_lib, importc: "glGetObjectLabelEXT".}
proc labelObjectEXT*(tipe: GLenum, obj: uint32, length: int32, label: cstring): void {.glew_lib, importc: "glLabelObjectEXT".}
proc insertEventMarkerEXT*(length: int32, marker: cstring): void {.glew_lib, importc: "glInsertEventMarkerEXT".}
proc popGroupMarkerEXT*(): void {.glew_lib, importc: "glPopGroupMarkerEXT".}
proc pushGroupMarkerEXT*(length: int32, marker: cstring): void {.glew_lib, importc: "glPushGroupMarkerEXT".}
proc depthBoundsEXT*(zmin: float64, zmax: float64): void {.glew_lib, importc: "glDepthBoundsEXT".}
proc bindMultiTextureEXT*(texunit: GLenum, target: GLenum, texture: uint32): void {.glew_lib, importc: "glBindMultiTextureEXT".}
proc checkNamedFramebufferStatusEXT*(framebuffer: uint32, target: GLenum): GLenum {.glew_lib, importc: "glCheckNamedFramebufferStatusEXT".}
proc clientAttribDefaultEXT*(mask: uint32): void {.glew_lib, importc: "glClientAttribDefaultEXT".}
proc compressedMultiTexImage1DEXT*(texunit: GLenum, target: GLenum, level: int32, internalformat: GLenum, width: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedMultiTexImage1DEXT".}
proc compressedMultiTexImage2DEXT*(texunit: GLenum, target: GLenum, level: int32, internalformat: GLenum, width: int32, height: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedMultiTexImage2DEXT".}
proc compressedMultiTexImage3DEXT*(texunit: GLenum, target: GLenum, level: int32, internalformat: GLenum, width: int32, height: int32, depth: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedMultiTexImage3DEXT".}
proc compressedMultiTexSubImage1DEXT*(texunit: GLenum, target: GLenum, level: int32, xoffset: int32, width: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedMultiTexSubImage1DEXT".}
proc compressedMultiTexSubImage2DEXT*(texunit: GLenum, target: GLenum, level: int32, xoffset: int32, yoffset: int32, width: int32, height: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedMultiTexSubImage2DEXT".}
proc compressedMultiTexSubImage3DEXT*(texunit: GLenum, target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedMultiTexSubImage3DEXT".}
proc compressedTextureImage1DEXT*(texture: uint32, target: GLenum, level: int32, internalformat: GLenum, width: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTextureImage1DEXT".}
proc compressedTextureImage2DEXT*(texture: uint32, target: GLenum, level: int32, internalformat: GLenum, width: int32, height: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTextureImage2DEXT".}
proc compressedTextureImage3DEXT*(texture: uint32, target: GLenum, level: int32, internalformat: GLenum, width: int32, height: int32, depth: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTextureImage3DEXT".}
proc compressedTextureSubImage1DEXT*(texture: uint32, target: GLenum, level: int32, xoffset: int32, width: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTextureSubImage1DEXT".}
proc compressedTextureSubImage2DEXT*(texture: uint32, target: GLenum, level: int32, xoffset: int32, yoffset: int32, width: int32, height: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTextureSubImage2DEXT".}
proc compressedTextureSubImage3DEXT*(texture: uint32, target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTextureSubImage3DEXT".}
proc copyMultiTexImage1DEXT*(texunit: GLenum, target: GLenum, level: int32, internalformat: GLenum, x: int32, y: int32, width: int32, border: int32): void {.glew_lib, importc: "glCopyMultiTexImage1DEXT".}
proc copyMultiTexImage2DEXT*(texunit: GLenum, target: GLenum, level: int32, internalformat: GLenum, x: int32, y: int32, width: int32, height: int32, border: int32): void {.glew_lib, importc: "glCopyMultiTexImage2DEXT".}
proc copyMultiTexSubImage1DEXT*(texunit: GLenum, target: GLenum, level: int32, xoffset: int32, x: int32, y: int32, width: int32): void {.glew_lib, importc: "glCopyMultiTexSubImage1DEXT".}
proc copyMultiTexSubImage2DEXT*(texunit: GLenum, target: GLenum, level: int32, xoffset: int32, yoffset: int32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyMultiTexSubImage2DEXT".}
proc copyMultiTexSubImage3DEXT*(texunit: GLenum, target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyMultiTexSubImage3DEXT".}
proc copyTextureImage1DEXT*(texture: uint32, target: GLenum, level: int32, internalformat: GLenum, x: int32, y: int32, width: int32, border: int32): void {.glew_lib, importc: "glCopyTextureImage1DEXT".}
proc copyTextureImage2DEXT*(texture: uint32, target: GLenum, level: int32, internalformat: GLenum, x: int32, y: int32, width: int32, height: int32, border: int32): void {.glew_lib, importc: "glCopyTextureImage2DEXT".}
proc copyTextureSubImage1DEXT*(texture: uint32, target: GLenum, level: int32, xoffset: int32, x: int32, y: int32, width: int32): void {.glew_lib, importc: "glCopyTextureSubImage1DEXT".}
proc copyTextureSubImage2DEXT*(texture: uint32, target: GLenum, level: int32, xoffset: int32, yoffset: int32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyTextureSubImage2DEXT".}
proc copyTextureSubImage3DEXT*(texture: uint32, target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyTextureSubImage3DEXT".}
proc disableClientStateIndexedEXT*(arrai: GLenum, index: uint32): void {.glew_lib, importc: "glDisableClientStateIndexedEXT".}
proc disableClientStateiEXT*(arrai: GLenum, index: uint32): void {.glew_lib, importc: "glDisableClientStateiEXT".}
proc disableVertexArrayAttribEXT*(vaobj: uint32, index: uint32): void {.glew_lib, importc: "glDisableVertexArrayAttribEXT".}
proc disableVertexArrayEXT*(vaobj: uint32, arrai: GLenum): void {.glew_lib, importc: "glDisableVertexArrayEXT".}
proc enableClientStateIndexedEXT*(arrai: GLenum, index: uint32): void {.glew_lib, importc: "glEnableClientStateIndexedEXT".}
proc enableClientStateiEXT*(arrai: GLenum, index: uint32): void {.glew_lib, importc: "glEnableClientStateiEXT".}
proc enableVertexArrayAttribEXT*(vaobj: uint32, index: uint32): void {.glew_lib, importc: "glEnableVertexArrayAttribEXT".}
proc enableVertexArrayEXT*(vaobj: uint32, arrai: GLenum): void {.glew_lib, importc: "glEnableVertexArrayEXT".}
proc flushMappedNamedBufferRangeEXT*(buffer: uint32, offset: int32, length: int32): void {.glew_lib, importc: "glFlushMappedNamedBufferRangeEXT".}
proc framebufferDrawBufferEXT*(framebuffer: uint32, mode: GLenum): void {.glew_lib, importc: "glFramebufferDrawBufferEXT".}
proc framebufferDrawBuffersEXT*(framebuffer: uint32, n: int32, bufs: ptr GLenum): void {.glew_lib, importc: "glFramebufferDrawBuffersEXT".}
proc framebufferReadBufferEXT*(framebuffer: uint32, mode: GLenum): void {.glew_lib, importc: "glFramebufferReadBufferEXT".}
proc generateMultiTexMipmapEXT*(texunit: GLenum, target: GLenum): void {.glew_lib, importc: "glGenerateMultiTexMipmapEXT".}
proc generateTextureMipmapEXT*(texture: uint32, target: GLenum): void {.glew_lib, importc: "glGenerateTextureMipmapEXT".}
proc getCompressedMultiTexImageEXT*(texunit: GLenum, target: GLenum, level: int32, img: pointer): void {.glew_lib, importc: "glGetCompressedMultiTexImageEXT".}
proc getCompressedTextureImageEXT*(texture: uint32, target: GLenum, level: int32, img: pointer): void {.glew_lib, importc: "glGetCompressedTextureImageEXT".}
proc getDoubleIndexedvEXT*(target: GLenum, index: uint32, params: ptr float64): void {.glew_lib, importc: "glGetDoubleIndexedvEXT".}
proc getDoublei_vEXT*(pname: GLenum, index: uint32, params: ptr float64): void {.glew_lib, importc: "glGetDoublei_vEXT".}
proc getFloatIndexedvEXT*(target: GLenum, index: uint32, params: ptr float32): void {.glew_lib, importc: "glGetFloatIndexedvEXT".}
proc getFloati_vEXT*(pname: GLenum, index: uint32, params: ptr float32): void {.glew_lib, importc: "glGetFloati_vEXT".}
proc getFramebufferParameterivEXT*(framebuffer: uint32, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glGetFramebufferParameterivEXT".}
proc getMultiTexEnvfvEXT*(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetMultiTexEnvfvEXT".}
proc getMultiTexEnvivEXT*(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMultiTexEnvivEXT".}
proc getMultiTexGendvEXT*(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glGetMultiTexGendvEXT".}
proc getMultiTexGenfvEXT*(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetMultiTexGenfvEXT".}
proc getMultiTexGenivEXT*(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMultiTexGenivEXT".}
proc getMultiTexImageEXT*(texunit: GLenum, target: GLenum, level: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glGetMultiTexImageEXT".}
proc getMultiTexLevelParameterfvEXT*(texunit: GLenum, target: GLenum, level: int32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetMultiTexLevelParameterfvEXT".}
proc getMultiTexLevelParameterivEXT*(texunit: GLenum, target: GLenum, level: int32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMultiTexLevelParameterivEXT".}
proc getMultiTexParameterIivEXT*(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMultiTexParameterIivEXT".}
proc getMultiTexParameterIuivEXT*(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetMultiTexParameterIuivEXT".}
proc getMultiTexParameterfvEXT*(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetMultiTexParameterfvEXT".}
proc getMultiTexParameterivEXT*(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMultiTexParameterivEXT".}
proc getNamedBufferParameterivEXT*(buffer: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetNamedBufferParameterivEXT".}
proc getNamedBufferPointervEXT*(buffer: uint32, pname: GLenum, params: ptr void): void {.glew_lib, importc: "glGetNamedBufferPointervEXT".}
proc getNamedBufferSubDataEXT*(buffer: uint32, offset: int32, size: int32, data: pointer): void {.glew_lib, importc: "glGetNamedBufferSubDataEXT".}
proc getNamedFramebufferAttachmentParameterivEXT*(framebuffer: uint32, attachment: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetNamedFramebufferAttachmentParameterivEXT".}
proc getNamedProgramLocalParameterIivEXT*(program: uint32, target: GLenum, index: uint32, params: ptr int32): void {.glew_lib, importc: "glGetNamedProgramLocalParameterIivEXT".}
proc getNamedProgramLocalParameterIuivEXT*(program: uint32, target: GLenum, index: uint32, params: ptr uint32): void {.glew_lib, importc: "glGetNamedProgramLocalParameterIuivEXT".}
proc getNamedProgramLocalParameterdvEXT*(program: uint32, target: GLenum, index: uint32, params: ptr float64): void {.glew_lib, importc: "glGetNamedProgramLocalParameterdvEXT".}
proc getNamedProgramLocalParameterfvEXT*(program: uint32, target: GLenum, index: uint32, params: ptr float32): void {.glew_lib, importc: "glGetNamedProgramLocalParameterfvEXT".}
proc getNamedProgramStringEXT*(program: uint32, target: GLenum, pname: GLenum, stryng: pointer): void {.glew_lib, importc: "glGetNamedProgramStringEXT".}
proc getNamedProgramivEXT*(program: uint32, target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetNamedProgramivEXT".}
proc getNamedRenderbufferParameterivEXT*(renderbuffer: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetNamedRenderbufferParameterivEXT".}
proc getPointerIndexedvEXT*(target: GLenum, index: uint32, params: ptr void): void {.glew_lib, importc: "glGetPointerIndexedvEXT".}
proc getPointeri_vEXT*(pname: GLenum, index: uint32, params: ptr void): void {.glew_lib, importc: "glGetPointeri_vEXT".}
proc getTextureImageEXT*(texture: uint32, target: GLenum, level: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glGetTextureImageEXT".}
proc getTextureLevelParameterfvEXT*(texture: uint32, target: GLenum, level: int32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetTextureLevelParameterfvEXT".}
proc getTextureLevelParameterivEXT*(texture: uint32, target: GLenum, level: int32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTextureLevelParameterivEXT".}
proc getTextureParameterIivEXT*(texture: uint32, target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTextureParameterIivEXT".}
proc getTextureParameterIuivEXT*(texture: uint32, target: GLenum, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetTextureParameterIuivEXT".}
proc getTextureParameterfvEXT*(texture: uint32, target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetTextureParameterfvEXT".}
proc getTextureParameterivEXT*(texture: uint32, target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTextureParameterivEXT".}
proc getVertexArrayIntegeri_vEXT*(vaobj: uint32, index: uint32, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glGetVertexArrayIntegeri_vEXT".}
proc getVertexArrayIntegervEXT*(vaobj: uint32, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glGetVertexArrayIntegervEXT".}
proc getVertexArrayPointeri_vEXT*(vaobj: uint32, index: uint32, pname: GLenum, param: ptr void): void {.glew_lib, importc: "glGetVertexArrayPointeri_vEXT".}
proc getVertexArrayPointervEXT*(vaobj: uint32, pname: GLenum, param: ptr void): void {.glew_lib, importc: "glGetVertexArrayPointervEXT".}
proc mapNamedBufferEXT*(buffer: uint32, access: GLenum): void {.glew_lib, importc: "glMapNamedBufferEXT".}
proc mapNamedBufferRangeEXT*(buffer: uint32, offset: int32, length: int32, access: uint32): void {.glew_lib, importc: "glMapNamedBufferRangeEXT".}
proc matrixFrustumEXT*(matrixMode: GLenum, l: float64, r: float64, b: float64, t: float64, n: float64, f: float64): void {.glew_lib, importc: "glMatrixFrustumEXT".}
proc matrixLoadIdentityEXT*(matrixMode: GLenum): void {.glew_lib, importc: "glMatrixLoadIdentityEXT".}
proc matrixLoadTransposedEXT*(matrixMode: GLenum, m: ptr float64): void {.glew_lib, importc: "glMatrixLoadTransposedEXT".}
proc matrixLoadTransposefEXT*(matrixMode: GLenum, m: ptr float32): void {.glew_lib, importc: "glMatrixLoadTransposefEXT".}
proc matrixLoaddEXT*(matrixMode: GLenum, m: ptr float64): void {.glew_lib, importc: "glMatrixLoaddEXT".}
proc matrixLoadfEXT*(matrixMode: GLenum, m: ptr float32): void {.glew_lib, importc: "glMatrixLoadfEXT".}
proc matrixMultTransposedEXT*(matrixMode: GLenum, m: ptr float64): void {.glew_lib, importc: "glMatrixMultTransposedEXT".}
proc matrixMultTransposefEXT*(matrixMode: GLenum, m: ptr float32): void {.glew_lib, importc: "glMatrixMultTransposefEXT".}
proc matrixMultdEXT*(matrixMode: GLenum, m: ptr float64): void {.glew_lib, importc: "glMatrixMultdEXT".}
proc matrixMultfEXT*(matrixMode: GLenum, m: ptr float32): void {.glew_lib, importc: "glMatrixMultfEXT".}
proc matrixOrthoEXT*(matrixMode: GLenum, l: float64, r: float64, b: float64, t: float64, n: float64, f: float64): void {.glew_lib, importc: "glMatrixOrthoEXT".}
proc matrixPopEXT*(matrixMode: GLenum): void {.glew_lib, importc: "glMatrixPopEXT".}
proc matrixPushEXT*(matrixMode: GLenum): void {.glew_lib, importc: "glMatrixPushEXT".}
proc matrixRotatedEXT*(matrixMode: GLenum, angle: float64, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glMatrixRotatedEXT".}
proc matrixRotatefEXT*(matrixMode: GLenum, angle: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glMatrixRotatefEXT".}
proc matrixScaledEXT*(matrixMode: GLenum, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glMatrixScaledEXT".}
proc matrixScalefEXT*(matrixMode: GLenum, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glMatrixScalefEXT".}
proc matrixTranslatedEXT*(matrixMode: GLenum, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glMatrixTranslatedEXT".}
proc matrixTranslatefEXT*(matrixMode: GLenum, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glMatrixTranslatefEXT".}
proc multiTexBufferEXT*(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: uint32): void {.glew_lib, importc: "glMultiTexBufferEXT".}
proc multiTexCoordPointerEXT*(texunit: GLenum, size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glMultiTexCoordPointerEXT".}
proc multiTexEnvfEXT*(texunit: GLenum, target: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glMultiTexEnvfEXT".}
proc multiTexEnvfvEXT*(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glMultiTexEnvfvEXT".}
proc multiTexEnviEXT*(texunit: GLenum, target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glMultiTexEnviEXT".}
proc multiTexEnvivEXT*(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glMultiTexEnvivEXT".}
proc multiTexGendEXT*(texunit: GLenum, coord: GLenum, pname: GLenum, param: float64): void {.glew_lib, importc: "glMultiTexGendEXT".}
proc multiTexGendvEXT*(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glMultiTexGendvEXT".}
proc multiTexGenfEXT*(texunit: GLenum, coord: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glMultiTexGenfEXT".}
proc multiTexGenfvEXT*(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glMultiTexGenfvEXT".}
proc multiTexGeniEXT*(texunit: GLenum, coord: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glMultiTexGeniEXT".}
proc multiTexGenivEXT*(texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glMultiTexGenivEXT".}
proc multiTexImage1DEXT*(texunit: GLenum, target: GLenum, level: int32, internalformat: int32, width: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glMultiTexImage1DEXT".}
proc multiTexImage2DEXT*(texunit: GLenum, target: GLenum, level: int32, internalformat: int32, width: int32, height: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glMultiTexImage2DEXT".}
proc multiTexImage3DEXT*(texunit: GLenum, target: GLenum, level: int32, internalformat: int32, width: int32, height: int32, depth: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glMultiTexImage3DEXT".}
proc multiTexParameterIivEXT*(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glMultiTexParameterIivEXT".}
proc multiTexParameterIuivEXT*(texunit: GLenum, target: GLenum, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glMultiTexParameterIuivEXT".}
proc multiTexParameterfEXT*(texunit: GLenum, target: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glMultiTexParameterfEXT".}
proc multiTexParameterfvEXT*(texunit: GLenum, target: GLenum, pname: GLenum, param: ptr float32): void {.glew_lib, importc: "glMultiTexParameterfvEXT".}
proc multiTexParameteriEXT*(texunit: GLenum, target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glMultiTexParameteriEXT".}
proc multiTexParameterivEXT*(texunit: GLenum, target: GLenum, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glMultiTexParameterivEXT".}
proc multiTexRenderbufferEXT*(texunit: GLenum, target: GLenum, renderbuffer: uint32): void {.glew_lib, importc: "glMultiTexRenderbufferEXT".}
proc multiTexSubImage1DEXT*(texunit: GLenum, target: GLenum, level: int32, xoffset: int32, width: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glMultiTexSubImage1DEXT".}
proc multiTexSubImage2DEXT*(texunit: GLenum, target: GLenum, level: int32, xoffset: int32, yoffset: int32, width: int32, height: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glMultiTexSubImage2DEXT".}
proc multiTexSubImage3DEXT*(texunit: GLenum, target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glMultiTexSubImage3DEXT".}
proc namedBufferDataEXT*(buffer: uint32, size: int32, data: pointer, usage: GLenum): void {.glew_lib, importc: "glNamedBufferDataEXT".}
proc namedBufferSubDataEXT*(buffer: uint32, offset: int32, size: int32, data: pointer): void {.glew_lib, importc: "glNamedBufferSubDataEXT".}
proc namedCopyBufferSubDataEXT*(readBuffer: uint32, writeBuffer: uint32, readOffset: int32, writeOffset: int32, size: int32): void {.glew_lib, importc: "glNamedCopyBufferSubDataEXT".}
proc namedFramebufferRenderbufferEXT*(framebuffer: uint32, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: uint32): void {.glew_lib, importc: "glNamedFramebufferRenderbufferEXT".}
proc namedFramebufferTexture1DEXT*(framebuffer: uint32, attachment: GLenum, textarget: GLenum, texture: uint32, level: int32): void {.glew_lib, importc: "glNamedFramebufferTexture1DEXT".}
proc namedFramebufferTexture2DEXT*(framebuffer: uint32, attachment: GLenum, textarget: GLenum, texture: uint32, level: int32): void {.glew_lib, importc: "glNamedFramebufferTexture2DEXT".}
proc namedFramebufferTexture3DEXT*(framebuffer: uint32, attachment: GLenum, textarget: GLenum, texture: uint32, level: int32, zoffset: int32): void {.glew_lib, importc: "glNamedFramebufferTexture3DEXT".}
proc namedFramebufferTextureEXT*(framebuffer: uint32, attachment: GLenum, texture: uint32, level: int32): void {.glew_lib, importc: "glNamedFramebufferTextureEXT".}
proc namedFramebufferTextureFaceEXT*(framebuffer: uint32, attachment: GLenum, texture: uint32, level: int32, face: GLenum): void {.glew_lib, importc: "glNamedFramebufferTextureFaceEXT".}
proc namedFramebufferTextureLayerEXT*(framebuffer: uint32, attachment: GLenum, texture: uint32, level: int32, layer: int32): void {.glew_lib, importc: "glNamedFramebufferTextureLayerEXT".}
proc namedProgramLocalParameter4dEXT*(program: uint32, target: GLenum, index: uint32, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glNamedProgramLocalParameter4dEXT".}
proc namedProgramLocalParameter4dvEXT*(program: uint32, target: GLenum, index: uint32, params: ptr float64): void {.glew_lib, importc: "glNamedProgramLocalParameter4dvEXT".}
proc namedProgramLocalParameter4fEXT*(program: uint32, target: GLenum, index: uint32, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glNamedProgramLocalParameter4fEXT".}
proc namedProgramLocalParameter4fvEXT*(program: uint32, target: GLenum, index: uint32, params: ptr float32): void {.glew_lib, importc: "glNamedProgramLocalParameter4fvEXT".}
proc namedProgramLocalParameterI4iEXT*(program: uint32, target: GLenum, index: uint32, x: int32, y: int32, z: int32, w: int32): void {.glew_lib, importc: "glNamedProgramLocalParameterI4iEXT".}
proc namedProgramLocalParameterI4ivEXT*(program: uint32, target: GLenum, index: uint32, params: ptr int32): void {.glew_lib, importc: "glNamedProgramLocalParameterI4ivEXT".}
proc namedProgramLocalParameterI4uiEXT*(program: uint32, target: GLenum, index: uint32, x: uint32, y: uint32, z: uint32, w: uint32): void {.glew_lib, importc: "glNamedProgramLocalParameterI4uiEXT".}
proc namedProgramLocalParameterI4uivEXT*(program: uint32, target: GLenum, index: uint32, params: ptr uint32): void {.glew_lib, importc: "glNamedProgramLocalParameterI4uivEXT".}
proc namedProgramLocalParameters4fvEXT*(program: uint32, target: GLenum, index: uint32, count: int32, params: ptr float32): void {.glew_lib, importc: "glNamedProgramLocalParameters4fvEXT".}
proc namedProgramLocalParametersI4ivEXT*(program: uint32, target: GLenum, index: uint32, count: int32, params: ptr int32): void {.glew_lib, importc: "glNamedProgramLocalParametersI4ivEXT".}
proc namedProgramLocalParametersI4uivEXT*(program: uint32, target: GLenum, index: uint32, count: int32, params: ptr uint32): void {.glew_lib, importc: "glNamedProgramLocalParametersI4uivEXT".}
proc namedProgramStringEXT*(program: uint32, target: GLenum, format: GLenum, len: int32, stryng: pointer): void {.glew_lib, importc: "glNamedProgramStringEXT".}
proc namedRenderbufferStorageEXT*(renderbuffer: uint32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glNamedRenderbufferStorageEXT".}
proc namedRenderbufferStorageMultisampleCoverageEXT*(renderbuffer: uint32, coverageSamples: int32, colorSamples: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glNamedRenderbufferStorageMultisampleCoverageEXT".}
proc namedRenderbufferStorageMultisampleEXT*(renderbuffer: uint32, samples: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glNamedRenderbufferStorageMultisampleEXT".}
proc programUniform1fEXT*(program: uint32, location: int32, v0: float32): void {.glew_lib, importc: "glProgramUniform1fEXT".}
proc programUniform1fvEXT*(program: uint32, location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glProgramUniform1fvEXT".}
proc programUniform1iEXT*(program: uint32, location: int32, v0: int32): void {.glew_lib, importc: "glProgramUniform1iEXT".}
proc programUniform1ivEXT*(program: uint32, location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glProgramUniform1ivEXT".}
proc programUniform1uiEXT*(program: uint32, location: int32, v0: uint32): void {.glew_lib, importc: "glProgramUniform1uiEXT".}
proc programUniform1uivEXT*(program: uint32, location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glProgramUniform1uivEXT".}
proc programUniform2fEXT*(program: uint32, location: int32, v0: float32, v1: float32): void {.glew_lib, importc: "glProgramUniform2fEXT".}
proc programUniform2fvEXT*(program: uint32, location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glProgramUniform2fvEXT".}
proc programUniform2iEXT*(program: uint32, location: int32, v0: int32, v1: int32): void {.glew_lib, importc: "glProgramUniform2iEXT".}
proc programUniform2ivEXT*(program: uint32, location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glProgramUniform2ivEXT".}
proc programUniform2uiEXT*(program: uint32, location: int32, v0: uint32, v1: uint32): void {.glew_lib, importc: "glProgramUniform2uiEXT".}
proc programUniform2uivEXT*(program: uint32, location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glProgramUniform2uivEXT".}
proc programUniform3fEXT*(program: uint32, location: int32, v0: float32, v1: float32, v2: float32): void {.glew_lib, importc: "glProgramUniform3fEXT".}
proc programUniform3fvEXT*(program: uint32, location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glProgramUniform3fvEXT".}
proc programUniform3iEXT*(program: uint32, location: int32, v0: int32, v1: int32, v2: int32): void {.glew_lib, importc: "glProgramUniform3iEXT".}
proc programUniform3ivEXT*(program: uint32, location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glProgramUniform3ivEXT".}
proc programUniform3uiEXT*(program: uint32, location: int32, v0: uint32, v1: uint32, v2: uint32): void {.glew_lib, importc: "glProgramUniform3uiEXT".}
proc programUniform3uivEXT*(program: uint32, location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glProgramUniform3uivEXT".}
proc programUniform4fEXT*(program: uint32, location: int32, v0: float32, v1: float32, v2: float32, v3: float32): void {.glew_lib, importc: "glProgramUniform4fEXT".}
proc programUniform4fvEXT*(program: uint32, location: int32, count: int32, value: ptr float32): void {.glew_lib, importc: "glProgramUniform4fvEXT".}
proc programUniform4iEXT*(program: uint32, location: int32, v0: int32, v1: int32, v2: int32, v3: int32): void {.glew_lib, importc: "glProgramUniform4iEXT".}
proc programUniform4ivEXT*(program: uint32, location: int32, count: int32, value: ptr int32): void {.glew_lib, importc: "glProgramUniform4ivEXT".}
proc programUniform4uiEXT*(program: uint32, location: int32, v0: uint32, v1: uint32, v2: uint32, v3: uint32): void {.glew_lib, importc: "glProgramUniform4uiEXT".}
proc programUniform4uivEXT*(program: uint32, location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glProgramUniform4uivEXT".}
proc programUniformMatrix2fvEXT*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix2fvEXT".}
proc programUniformMatrix2x3fvEXT*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix2x3fvEXT".}
proc programUniformMatrix2x4fvEXT*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix2x4fvEXT".}
proc programUniformMatrix3fvEXT*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix3fvEXT".}
proc programUniformMatrix3x2fvEXT*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix3x2fvEXT".}
proc programUniformMatrix3x4fvEXT*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix3x4fvEXT".}
proc programUniformMatrix4fvEXT*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix4fvEXT".}
proc programUniformMatrix4x2fvEXT*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix4x2fvEXT".}
proc programUniformMatrix4x3fvEXT*(program: uint32, location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glProgramUniformMatrix4x3fvEXT".}
proc pushClientAttribDefaultEXT*(mask: uint32): void {.glew_lib, importc: "glPushClientAttribDefaultEXT".}
proc textureBufferEXT*(texture: uint32, target: GLenum, internalformat: GLenum, buffer: uint32): void {.glew_lib, importc: "glTextureBufferEXT".}
proc textureImage1DEXT*(texture: uint32, target: GLenum, level: int32, internalformat: int32, width: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTextureImage1DEXT".}
proc textureImage2DEXT*(texture: uint32, target: GLenum, level: int32, internalformat: int32, width: int32, height: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTextureImage2DEXT".}
proc textureImage3DEXT*(texture: uint32, target: GLenum, level: int32, internalformat: int32, width: int32, height: int32, depth: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTextureImage3DEXT".}
proc textureParameterIivEXT*(texture: uint32, target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glTextureParameterIivEXT".}
proc textureParameterIuivEXT*(texture: uint32, target: GLenum, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glTextureParameterIuivEXT".}
proc textureParameterfEXT*(texture: uint32, target: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glTextureParameterfEXT".}
proc textureParameterfvEXT*(texture: uint32, target: GLenum, pname: GLenum, param: ptr float32): void {.glew_lib, importc: "glTextureParameterfvEXT".}
proc textureParameteriEXT*(texture: uint32, target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glTextureParameteriEXT".}
proc textureParameterivEXT*(texture: uint32, target: GLenum, pname: GLenum, param: ptr int32): void {.glew_lib, importc: "glTextureParameterivEXT".}
proc textureRenderbufferEXT*(texture: uint32, target: GLenum, renderbuffer: uint32): void {.glew_lib, importc: "glTextureRenderbufferEXT".}
proc textureSubImage1DEXT*(texture: uint32, target: GLenum, level: int32, xoffset: int32, width: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTextureSubImage1DEXT".}
proc textureSubImage2DEXT*(texture: uint32, target: GLenum, level: int32, xoffset: int32, yoffset: int32, width: int32, height: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTextureSubImage2DEXT".}
proc textureSubImage3DEXT*(texture: uint32, target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTextureSubImage3DEXT".}
proc unmapNamedBufferEXT*(buffer: uint32): bool {.glew_lib, importc: "glUnmapNamedBufferEXT".}
proc vertexArrayColorOffsetEXT*(vaobj: uint32, buffer: uint32, size: int32, tipe: GLenum, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArrayColorOffsetEXT".}
proc vertexArrayEdgeFlagOffsetEXT*(vaobj: uint32, buffer: uint32, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArrayEdgeFlagOffsetEXT".}
proc vertexArrayFogCoordOffsetEXT*(vaobj: uint32, buffer: uint32, tipe: GLenum, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArrayFogCoordOffsetEXT".}
proc vertexArrayIndexOffsetEXT*(vaobj: uint32, buffer: uint32, tipe: GLenum, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArrayIndexOffsetEXT".}
proc vertexArrayMultiTexCoordOffsetEXT*(vaobj: uint32, buffer: uint32, texunit: GLenum, size: int32, tipe: GLenum, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArrayMultiTexCoordOffsetEXT".}
proc vertexArrayNormalOffsetEXT*(vaobj: uint32, buffer: uint32, tipe: GLenum, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArrayNormalOffsetEXT".}
proc vertexArraySecondaryColorOffsetEXT*(vaobj: uint32, buffer: uint32, size: int32, tipe: GLenum, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArraySecondaryColorOffsetEXT".}
proc vertexArrayTexCoordOffsetEXT*(vaobj: uint32, buffer: uint32, size: int32, tipe: GLenum, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArrayTexCoordOffsetEXT".}
proc vertexArrayVertexAttribDivisorEXT*(vaobj: uint32, index: uint32, divisor: uint32): void {.glew_lib, importc: "glVertexArrayVertexAttribDivisorEXT".}
proc vertexArrayVertexAttribIOffsetEXT*(vaobj: uint32, buffer: uint32, index: uint32, size: int32, tipe: GLenum, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArrayVertexAttribIOffsetEXT".}
proc vertexArrayVertexAttribOffsetEXT*(vaobj: uint32, buffer: uint32, index: uint32, size: int32, tipe: GLenum, normalized: bool, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArrayVertexAttribOffsetEXT".}
proc vertexArrayVertexOffsetEXT*(vaobj: uint32, buffer: uint32, size: int32, tipe: GLenum, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArrayVertexOffsetEXT".}
proc discardFramebufferEXT*(target: GLenum, numAttachments: int32, attachments: ptr GLenum): void {.glew_lib, importc: "glDiscardFramebufferEXT".}
proc drawBuffersEXT*(n: int32, bufs: ptr GLenum): void {.glew_lib, importc: "glDrawBuffersEXT".}
proc colorMaskIndexedEXT*(buf: uint32, r: bool, g: bool, b: bool, a: bool): void {.glew_lib, importc: "glColorMaskIndexedEXT".}
proc disableIndexedEXT*(target: GLenum, index: uint32): void {.glew_lib, importc: "glDisableIndexedEXT".}
proc enableIndexedEXT*(target: GLenum, index: uint32): void {.glew_lib, importc: "glEnableIndexedEXT".}
proc getBooleanIndexedvEXT*(value: GLenum, index: uint32, data: ptr bool): void {.glew_lib, importc: "glGetBooleanIndexedvEXT".}
proc getIntegerIndexedvEXT*(value: GLenum, index: uint32, data: ptr int32): void {.glew_lib, importc: "glGetIntegerIndexedvEXT".}
proc isEnabledIndexedEXT*(target: GLenum, index: uint32): bool {.glew_lib, importc: "glIsEnabledIndexedEXT".}
proc blendEquationSeparateiEXT*(buf: uint32, modeRGB: GLenum, modeAlpha: GLenum): void {.glew_lib, importc: "glBlendEquationSeparateiEXT".}
proc blendEquationiEXT*(buf: uint32, mode: GLenum): void {.glew_lib, importc: "glBlendEquationiEXT".}
proc blendFuncSeparateiEXT*(buf: uint32, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void {.glew_lib, importc: "glBlendFuncSeparateiEXT".}
proc blendFunciEXT*(buf: uint32, src: GLenum, dst: GLenum): void {.glew_lib, importc: "glBlendFunciEXT".}
proc colorMaskiEXT*(buf: uint32, r: bool, g: bool, b: bool, a: bool): void {.glew_lib, importc: "glColorMaskiEXT".}
proc disableiEXT*(target: GLenum, index: uint32): void {.glew_lib, importc: "glDisableiEXT".}
proc enableiEXT*(target: GLenum, index: uint32): void {.glew_lib, importc: "glEnableiEXT".}
proc isEnablediEXT*(target: GLenum, index: uint32): bool {.glew_lib, importc: "glIsEnablediEXT".}
proc drawElementsBaseVertexEXT*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, basevertex: int32): void {.glew_lib, importc: "glDrawElementsBaseVertexEXT".}
proc drawElementsInstancedBaseVertexEXT*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, instancecount: int32, basevertex: int32): void {.glew_lib, importc: "glDrawElementsInstancedBaseVertexEXT".}
proc drawRangeElementsBaseVertexEXT*(mode: GLenum, start: uint32, glEnd: uint32, count: int32, tipe: GLenum, indices: pointer, basevertex: int32): void {.glew_lib, importc: "glDrawRangeElementsBaseVertexEXT".}
proc multiDrawElementsBaseVertexEXT*(mode: GLenum, count: ptr int32, tipe: GLenum, indices: ptr void , primcount: int32, basevertex: ptr int32): void {.glew_lib, importc: "glMultiDrawElementsBaseVertexEXT".}
proc drawArraysInstancedEXT*(mode: GLenum, start: int32, count: int32, primcount: int32): void {.glew_lib, importc: "glDrawArraysInstancedEXT".}
proc drawElementsInstancedEXT*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, primcount: int32): void {.glew_lib, importc: "glDrawElementsInstancedEXT".}
proc drawRangeElementsEXT*(mode: GLenum, start: uint32, glEnd: uint32, count: int32, tipe: GLenum, indices: pointer): void {.glew_lib, importc: "glDrawRangeElementsEXT".}
proc fogCoordPointerEXT*(tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glFogCoordPointerEXT".}
proc fogCoorddEXT*(coord: float64): void {.glew_lib, importc: "glFogCoorddEXT".}
proc fogCoorddvEXT*(coord: ptr float64): void {.glew_lib, importc: "glFogCoorddvEXT".}
proc fogCoordfEXT*(coord: float32): void {.glew_lib, importc: "glFogCoordfEXT".}
proc fogCoordfvEXT*(coord: ptr float32): void {.glew_lib, importc: "glFogCoordfvEXT".}
proc fragmentColorMaterialEXT*(face: GLenum, mode: GLenum): void {.glew_lib, importc: "glFragmentColorMaterialEXT".}
proc fragmentLightModelfEXT*(pname: GLenum, param: float32): void {.glew_lib, importc: "glFragmentLightModelfEXT".}
proc fragmentLightModelfvEXT*(pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glFragmentLightModelfvEXT".}
proc fragmentLightModeliEXT*(pname: GLenum, param: int32): void {.glew_lib, importc: "glFragmentLightModeliEXT".}
proc fragmentLightModelivEXT*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glFragmentLightModelivEXT".}
proc fragmentLightfEXT*(light: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glFragmentLightfEXT".}
proc fragmentLightfvEXT*(light: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glFragmentLightfvEXT".}
proc fragmentLightiEXT*(light: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glFragmentLightiEXT".}
proc fragmentLightivEXT*(light: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glFragmentLightivEXT".}
proc fragmentMaterialfEXT*(face: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glFragmentMaterialfEXT".}
proc fragmentMaterialfvEXT*(face: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glFragmentMaterialfvEXT".}
proc fragmentMaterialiEXT*(face: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glFragmentMaterialiEXT".}
proc fragmentMaterialivEXT*(face: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glFragmentMaterialivEXT".}
proc getFragmentLightfvEXT*(light: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetFragmentLightfvEXT".}
proc getFragmentLightivEXT*(light: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetFragmentLightivEXT".}
proc getFragmentMaterialfvEXT*(face: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetFragmentMaterialfvEXT".}
proc getFragmentMaterialivEXT*(face: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetFragmentMaterialivEXT".}
proc lightEnviEXT*(pname: GLenum, param: int32): void {.glew_lib, importc: "glLightEnviEXT".}
proc blitFramebufferEXT*(srcX0: int32, srcY0: int32, srcX1: int32, srcY1: int32, dstX0: int32, dstY0: int32, dstX1: int32, dstY1: int32, mask: uint32, filter: GLenum): void {.glew_lib, importc: "glBlitFramebufferEXT".}
proc renderbufferStorageMultisampleEXT*(target: GLenum, samples: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glRenderbufferStorageMultisampleEXT".}
proc bindFramebufferEXT*(target: GLenum, framebuffer: uint32): void {.glew_lib, importc: "glBindFramebufferEXT".}
proc bindRenderbufferEXT*(target: GLenum, renderbuffer: uint32): void {.glew_lib, importc: "glBindRenderbufferEXT".}
proc checkFramebufferStatusEXT*(target: GLenum): GLenum {.glew_lib, importc: "glCheckFramebufferStatusEXT".}
proc deleteFramebuffersEXT*(n: int32, framebuffers: ptr uint32): void {.glew_lib, importc: "glDeleteFramebuffersEXT".}
proc deleteRenderbuffersEXT*(n: int32, renderbuffers: ptr uint32): void {.glew_lib, importc: "glDeleteRenderbuffersEXT".}
proc framebufferRenderbufferEXT*(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: uint32): void {.glew_lib, importc: "glFramebufferRenderbufferEXT".}
proc framebufferTexture1DEXT*(target: GLenum, attachment: GLenum, textarget: GLenum, texture: uint32, level: int32): void {.glew_lib, importc: "glFramebufferTexture1DEXT".}
proc framebufferTexture2DEXT*(target: GLenum, attachment: GLenum, textarget: GLenum, texture: uint32, level: int32): void {.glew_lib, importc: "glFramebufferTexture2DEXT".}
proc framebufferTexture3DEXT*(target: GLenum, attachment: GLenum, textarget: GLenum, texture: uint32, level: int32, zoffset: int32): void {.glew_lib, importc: "glFramebufferTexture3DEXT".}
proc genFramebuffersEXT*(n: int32, framebuffers: ptr uint32): void {.glew_lib, importc: "glGenFramebuffersEXT".}
proc genRenderbuffersEXT*(n: int32, renderbuffers: ptr uint32): void {.glew_lib, importc: "glGenRenderbuffersEXT".}
proc generateMipmapEXT*(target: GLenum): void {.glew_lib, importc: "glGenerateMipmapEXT".}
proc getFramebufferAttachmentParameterivEXT*(target: GLenum, attachment: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetFramebufferAttachmentParameterivEXT".}
proc getRenderbufferParameterivEXT*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetRenderbufferParameterivEXT".}
proc isFramebufferEXT*(framebuffer: uint32): bool {.glew_lib, importc: "glIsFramebufferEXT".}
proc isRenderbufferEXT*(renderbuffer: uint32): bool {.glew_lib, importc: "glIsRenderbufferEXT".}
proc renderbufferStorageEXT*(target: GLenum, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glRenderbufferStorageEXT".}
proc framebufferTextureEXT*(target: GLenum, attachment: GLenum, texture: uint32, level: int32): void {.glew_lib, importc: "glFramebufferTextureEXT".}
proc framebufferTextureFaceEXT*(target: GLenum, attachment: GLenum, texture: uint32, level: int32, face: GLenum): void {.glew_lib, importc: "glFramebufferTextureFaceEXT".}
proc programParameteriEXT*(program: uint32, pname: GLenum, value: int32): void {.glew_lib, importc: "glProgramParameteriEXT".}
proc programEnvParameters4fvEXT*(target: GLenum, index: uint32, count: int32, params: ptr float32): void {.glew_lib, importc: "glProgramEnvParameters4fvEXT".}
proc programLocalParameters4fvEXT*(target: GLenum, index: uint32, count: int32, params: ptr float32): void {.glew_lib, importc: "glProgramLocalParameters4fvEXT".}
proc bindFragDataLocationEXT*(program: uint32, color: uint32, name: cstring): void {.glew_lib, importc: "glBindFragDataLocationEXT".}
proc getFragDataLocationEXT*(program: uint32, name: cstring): int32 {.glew_lib, importc: "glGetFragDataLocationEXT".}
proc getUniformuivEXT*(program: uint32, location: int32, params: ptr uint32): void {.glew_lib, importc: "glGetUniformuivEXT".}
proc getVertexAttribIivEXT*(index: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetVertexAttribIivEXT".}
proc getVertexAttribIuivEXT*(index: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetVertexAttribIuivEXT".}
proc uniform1uiEXT*(location: int32, v0: uint32): void {.glew_lib, importc: "glUniform1uiEXT".}
proc uniform1uivEXT*(location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glUniform1uivEXT".}
proc uniform2uiEXT*(location: int32, v0: uint32, v1: uint32): void {.glew_lib, importc: "glUniform2uiEXT".}
proc uniform2uivEXT*(location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glUniform2uivEXT".}
proc uniform3uiEXT*(location: int32, v0: uint32, v1: uint32, v2: uint32): void {.glew_lib, importc: "glUniform3uiEXT".}
proc uniform3uivEXT*(location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glUniform3uivEXT".}
proc uniform4uiEXT*(location: int32, v0: uint32, v1: uint32, v2: uint32, v3: uint32): void {.glew_lib, importc: "glUniform4uiEXT".}
proc uniform4uivEXT*(location: int32, count: int32, value: ptr uint32): void {.glew_lib, importc: "glUniform4uivEXT".}
proc vertexAttribI1iEXT*(index: uint32, x: int32): void {.glew_lib, importc: "glVertexAttribI1iEXT".}
proc vertexAttribI1ivEXT*(index: uint32, v: ptr int32): void {.glew_lib, importc: "glVertexAttribI1ivEXT".}
proc vertexAttribI1uiEXT*(index: uint32, x: uint32): void {.glew_lib, importc: "glVertexAttribI1uiEXT".}
proc vertexAttribI1uivEXT*(index: uint32, v: ptr uint32): void {.glew_lib, importc: "glVertexAttribI1uivEXT".}
proc vertexAttribI2iEXT*(index: uint32, x: int32, y: int32): void {.glew_lib, importc: "glVertexAttribI2iEXT".}
proc vertexAttribI2ivEXT*(index: uint32, v: ptr int32): void {.glew_lib, importc: "glVertexAttribI2ivEXT".}
proc vertexAttribI2uiEXT*(index: uint32, x: uint32, y: uint32): void {.glew_lib, importc: "glVertexAttribI2uiEXT".}
proc vertexAttribI2uivEXT*(index: uint32, v: ptr uint32): void {.glew_lib, importc: "glVertexAttribI2uivEXT".}
proc vertexAttribI3iEXT*(index: uint32, x: int32, y: int32, z: int32): void {.glew_lib, importc: "glVertexAttribI3iEXT".}
proc vertexAttribI3ivEXT*(index: uint32, v: ptr int32): void {.glew_lib, importc: "glVertexAttribI3ivEXT".}
proc vertexAttribI3uiEXT*(index: uint32, x: uint32, y: uint32, z: uint32): void {.glew_lib, importc: "glVertexAttribI3uiEXT".}
proc vertexAttribI3uivEXT*(index: uint32, v: ptr uint32): void {.glew_lib, importc: "glVertexAttribI3uivEXT".}
proc vertexAttribI4bvEXT*(index: uint32, v: ptr int8): void {.glew_lib, importc: "glVertexAttribI4bvEXT".}
proc vertexAttribI4iEXT*(index: uint32, x: int32, y: int32, z: int32, w: int32): void {.glew_lib, importc: "glVertexAttribI4iEXT".}
proc vertexAttribI4ivEXT*(index: uint32, v: ptr int32): void {.glew_lib, importc: "glVertexAttribI4ivEXT".}
proc vertexAttribI4svEXT*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttribI4svEXT".}
proc vertexAttribI4ubvEXT*(index: uint32, v: ptr uint8): void {.glew_lib, importc: "glVertexAttribI4ubvEXT".}
proc vertexAttribI4uiEXT*(index: uint32, x: uint32, y: uint32, z: uint32, w: uint32): void {.glew_lib, importc: "glVertexAttribI4uiEXT".}
proc vertexAttribI4uivEXT*(index: uint32, v: ptr uint32): void {.glew_lib, importc: "glVertexAttribI4uivEXT".}
proc vertexAttribI4usvEXT*(index: uint32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttribI4usvEXT".}
proc vertexAttribIPointerEXT*(index: uint32, size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glVertexAttribIPointerEXT".}
proc getHistogramEXT*(target: GLenum, reset: bool, format: GLenum, tipe: GLenum, values: pointer): void {.glew_lib, importc: "glGetHistogramEXT".}
proc getHistogramParameterfvEXT*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetHistogramParameterfvEXT".}
proc getHistogramParameterivEXT*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetHistogramParameterivEXT".}
proc getMinmaxEXT*(target: GLenum, reset: bool, format: GLenum, tipe: GLenum, values: pointer): void {.glew_lib, importc: "glGetMinmaxEXT".}
proc getMinmaxParameterfvEXT*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetMinmaxParameterfvEXT".}
proc getMinmaxParameterivEXT*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMinmaxParameterivEXT".}
proc histogramEXT*(target: GLenum, width: int32, internalformat: GLenum, sink: bool): void {.glew_lib, importc: "glHistogramEXT".}
proc minmaxEXT*(target: GLenum, internalformat: GLenum, sink: bool): void {.glew_lib, importc: "glMinmaxEXT".}
proc resetHistogramEXT*(target: GLenum): void {.glew_lib, importc: "glResetHistogramEXT".}
proc resetMinmaxEXT*(target: GLenum): void {.glew_lib, importc: "glResetMinmaxEXT".}
proc indexFuncEXT*(fun: GLenum, reff: float32): void {.glew_lib, importc: "glIndexFuncEXT".}
proc indexMaterialEXT*(face: GLenum, mode: GLenum): void {.glew_lib, importc: "glIndexMaterialEXT".}
proc vertexAttribDivisorEXT*(index: uint32, divisor: uint32): void {.glew_lib, importc: "glVertexAttribDivisorEXT".}
proc applyTextureEXT*(mode: GLenum): void {.glew_lib, importc: "glApplyTextureEXT".}
proc textureLightEXT*(pname: GLenum): void {.glew_lib, importc: "glTextureLightEXT".}
proc textureMaterialEXT*(face: GLenum, mode: GLenum): void {.glew_lib, importc: "glTextureMaterialEXT".}
proc flushMappedBufferRangeEXT*(target: GLenum, offset: int32, length: int32): void {.glew_lib, importc: "glFlushMappedBufferRangeEXT".}
proc mapBufferRangeEXT*(target: GLenum, offset: int32, length: int32, access: uint32): void {.glew_lib, importc: "glMapBufferRangeEXT".}
proc bufferStorageMemEXT*(target: GLenum, size: int32, memory: uint32, offset: uint64): void {.glew_lib, importc: "glBufferStorageMemEXT".}
proc createMemoryObjectsEXT*(n: int32, memoryObjects: ptr uint32): void {.glew_lib, importc: "glCreateMemoryObjectsEXT".}
proc deleteMemoryObjectsEXT*(n: int32, memoryObjects: ptr uint32): void {.glew_lib, importc: "glDeleteMemoryObjectsEXT".}
proc getMemoryObjectParameterivEXT*(memoryObject: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMemoryObjectParameterivEXT".}
proc getUnsignedBytei_vEXT*(target: GLenum, index: uint32, data: ptr uint8): void {.glew_lib, importc: "glGetUnsignedBytei_vEXT".}
proc getUnsignedBytevEXT*(pname: GLenum, data: ptr uint8): void {.glew_lib, importc: "glGetUnsignedBytevEXT".}
proc isMemoryObjectEXT*(memoryObject: uint32): bool {.glew_lib, importc: "glIsMemoryObjectEXT".}
proc memoryObjectParameterivEXT*(memoryObject: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glMemoryObjectParameterivEXT".}
proc namedBufferStorageMemEXT*(buffer: uint32, size: int32, memory: uint32, offset: uint64): void {.glew_lib, importc: "glNamedBufferStorageMemEXT".}
proc texStorageMem1DEXT*(target: GLenum, levels: int32, internalFormat: GLenum, width: int32, memory: uint32, offset: uint64): void {.glew_lib, importc: "glTexStorageMem1DEXT".}
proc texStorageMem2DEXT*(target: GLenum, levels: int32, internalFormat: GLenum, width: int32, height: int32, memory: uint32, offset: uint64): void {.glew_lib, importc: "glTexStorageMem2DEXT".}
proc texStorageMem2DMultisampleEXT*(target: GLenum, samples: int32, internalFormat: GLenum, width: int32, height: int32, fixedSampleLocations: bool, memory: uint32, offset: uint64): void {.glew_lib, importc: "glTexStorageMem2DMultisampleEXT".}
proc texStorageMem3DEXT*(target: GLenum, levels: int32, internalFormat: GLenum, width: int32, height: int32, depth: int32, memory: uint32, offset: uint64): void {.glew_lib, importc: "glTexStorageMem3DEXT".}
proc texStorageMem3DMultisampleEXT*(target: GLenum, samples: int32, internalFormat: GLenum, width: int32, height: int32, depth: int32, fixedSampleLocations: bool, memory: uint32, offset: uint64): void {.glew_lib, importc: "glTexStorageMem3DMultisampleEXT".}
proc textureStorageMem1DEXT*(texture: uint32, levels: int32, internalFormat: GLenum, width: int32, memory: uint32, offset: uint64): void {.glew_lib, importc: "glTextureStorageMem1DEXT".}
proc textureStorageMem2DEXT*(texture: uint32, levels: int32, internalFormat: GLenum, width: int32, height: int32, memory: uint32, offset: uint64): void {.glew_lib, importc: "glTextureStorageMem2DEXT".}
proc textureStorageMem2DMultisampleEXT*(texture: uint32, samples: int32, internalFormat: GLenum, width: int32, height: int32, fixedSampleLocations: bool, memory: uint32, offset: uint64): void {.glew_lib, importc: "glTextureStorageMem2DMultisampleEXT".}
proc textureStorageMem3DEXT*(texture: uint32, levels: int32, internalFormat: GLenum, width: int32, height: int32, depth: int32, memory: uint32, offset: uint64): void {.glew_lib, importc: "glTextureStorageMem3DEXT".}
proc textureStorageMem3DMultisampleEXT*(texture: uint32, samples: int32, internalFormat: GLenum, width: int32, height: int32, depth: int32, fixedSampleLocations: bool, memory: uint32, offset: uint64): void {.glew_lib, importc: "glTextureStorageMem3DMultisampleEXT".}
proc importMemoryFdEXT*(memory: uint32, size: uint64, handleType: GLenum, fd: int32): void {.glew_lib, importc: "glImportMemoryFdEXT".}
proc importMemoryWin32HandleEXT*(memory: uint32, size: uint64, handleType: GLenum, handle: pointer): void {.glew_lib, importc: "glImportMemoryWin32HandleEXT".}
proc importMemoryWin32NameEXT*(memory: uint32, size: uint64, handleType: GLenum, name: pointer): void {.glew_lib, importc: "glImportMemoryWin32NameEXT".}
proc multiDrawArraysEXT*(mode: GLenum, first: ptr int32, count: ptr int32, primcount: int32): void {.glew_lib, importc: "glMultiDrawArraysEXT".}
proc multiDrawElementsEXT*(mode: GLenum, count: ptr int32, tipe: GLenum, indices: ptr void , primcount: int32): void {.glew_lib, importc: "glMultiDrawElementsEXT".}
proc multiDrawArraysIndirectEXT*(mode: GLenum, indirect: pointer, drawcount: int32, stride: int32): void {.glew_lib, importc: "glMultiDrawArraysIndirectEXT".}
proc multiDrawElementsIndirectEXT*(mode: GLenum, tipe: GLenum, indirect: pointer, drawcount: int32, stride: int32): void {.glew_lib, importc: "glMultiDrawElementsIndirectEXT".}
proc sampleMaskEXT*(value: float32, invert: bool): void {.glew_lib, importc: "glSampleMaskEXT".}
proc samplePatternEXT*(pattern: GLenum): void {.glew_lib, importc: "glSamplePatternEXT".}
proc framebufferTexture2DMultisampleEXT*(target: GLenum, attachment: GLenum, textarget: GLenum, texture: uint32, level: int32, samples: int32): void {.glew_lib, importc: "glFramebufferTexture2DMultisampleEXT".}
proc drawBuffersIndexedEXT*(n: int32, location: ptr GLenum, indices: ptr int32): void {.glew_lib, importc: "glDrawBuffersIndexedEXT".}
proc getIntegeri_vEXT*(target: GLenum, index: uint32, data: ptr int32): void {.glew_lib, importc: "glGetIntegeri_vEXT".}
proc readBufferIndexedEXT*(src: GLenum, index: int32): void {.glew_lib, importc: "glReadBufferIndexedEXT".}
proc colorTableEXT*(target: GLenum, internalFormat: GLenum, width: int32, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glColorTableEXT".}
proc getColorTableEXT*(target: GLenum, format: GLenum, tipe: GLenum, data: pointer): void {.glew_lib, importc: "glGetColorTableEXT".}
proc getColorTableParameterfvEXT*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetColorTableParameterfvEXT".}
proc getColorTableParameterivEXT*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetColorTableParameterivEXT".}
proc getPixelTransformParameterfvEXT*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetPixelTransformParameterfvEXT".}
proc getPixelTransformParameterivEXT*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetPixelTransformParameterivEXT".}
proc pixelTransformParameterfEXT*(target: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glPixelTransformParameterfEXT".}
proc pixelTransformParameterfvEXT*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glPixelTransformParameterfvEXT".}
proc pixelTransformParameteriEXT*(target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glPixelTransformParameteriEXT".}
proc pixelTransformParameterivEXT*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glPixelTransformParameterivEXT".}
proc pointParameterfEXT*(pname: GLenum, param: float32): void {.glew_lib, importc: "glPointParameterfEXT".}
proc pointParameterfvEXT*(pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glPointParameterfvEXT".}
proc polygonOffsetEXT*(factor: float32, bias: float32): void {.glew_lib, importc: "glPolygonOffsetEXT".}
proc polygonOffsetClampEXT*(factor: float32, units: float32, clamp: float32): void {.glew_lib, importc: "glPolygonOffsetClampEXT".}
proc provokingVertexEXT*(mode: GLenum): void {.glew_lib, importc: "glProvokingVertexEXT".}
proc coverageModulationNV*(components: GLenum): void {.glew_lib, importc: "glCoverageModulationNV".}
proc coverageModulationTableNV*(n: int32, v: ptr float32): void {.glew_lib, importc: "glCoverageModulationTableNV".}
proc getCoverageModulationTableNV*(bufsize: int32, v: ptr float32): void {.glew_lib, importc: "glGetCoverageModulationTableNV".}
proc rasterSamplesEXT*(samples: uint32, fixedsamplelocations: bool): void {.glew_lib, importc: "glRasterSamplesEXT".}
proc beginSceneEXT*(): void {.glew_lib, importc: "glBeginSceneEXT".}
proc endSceneEXT*(): void {.glew_lib, importc: "glEndSceneEXT".}
proc secondaryColor3bEXT*(red: int8, green: int8, blue: int8): void {.glew_lib, importc: "glSecondaryColor3bEXT".}
proc secondaryColor3bvEXT*(v: ptr int8): void {.glew_lib, importc: "glSecondaryColor3bvEXT".}
proc secondaryColor3dEXT*(red: float64, green: float64, blue: float64): void {.glew_lib, importc: "glSecondaryColor3dEXT".}
proc secondaryColor3dvEXT*(v: ptr float64): void {.glew_lib, importc: "glSecondaryColor3dvEXT".}
proc secondaryColor3fEXT*(red: float32, green: float32, blue: float32): void {.glew_lib, importc: "glSecondaryColor3fEXT".}
proc secondaryColor3fvEXT*(v: ptr float32): void {.glew_lib, importc: "glSecondaryColor3fvEXT".}
proc secondaryColor3iEXT*(red: int32, green: int32, blue: int32): void {.glew_lib, importc: "glSecondaryColor3iEXT".}
proc secondaryColor3ivEXT*(v: ptr int32): void {.glew_lib, importc: "glSecondaryColor3ivEXT".}
proc secondaryColor3sEXT*(red: int16, green: int16, blue: int16): void {.glew_lib, importc: "glSecondaryColor3sEXT".}
proc secondaryColor3svEXT*(v: ptr int16): void {.glew_lib, importc: "glSecondaryColor3svEXT".}
proc secondaryColor3ubEXT*(red: uint8, green: uint8, blue: uint8): void {.glew_lib, importc: "glSecondaryColor3ubEXT".}
proc secondaryColor3ubvEXT*(v: ptr uint8): void {.glew_lib, importc: "glSecondaryColor3ubvEXT".}
proc secondaryColor3uiEXT*(red: uint32, green: uint32, blue: uint32): void {.glew_lib, importc: "glSecondaryColor3uiEXT".}
proc secondaryColor3uivEXT*(v: ptr uint32): void {.glew_lib, importc: "glSecondaryColor3uivEXT".}
proc secondaryColor3usEXT*(red: uint16, green: uint16, blue: uint16): void {.glew_lib, importc: "glSecondaryColor3usEXT".}
proc secondaryColor3usvEXT*(v: ptr uint16): void {.glew_lib, importc: "glSecondaryColor3usvEXT".}
proc secondaryColorPointerEXT*(size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glSecondaryColorPointerEXT".}
proc deleteSemaphoresEXT*(n: int32, semaphores: ptr uint32): void {.glew_lib, importc: "glDeleteSemaphoresEXT".}
proc genSemaphoresEXT*(n: int32, semaphores: ptr uint32): void {.glew_lib, importc: "glGenSemaphoresEXT".}
proc getSemaphoreParameterui64vEXT*(semaphore: uint32, pname: GLenum, params: ptr uint64): void {.glew_lib, importc: "glGetSemaphoreParameterui64vEXT".}
proc isSemaphoreEXT*(semaphore: uint32): bool {.glew_lib, importc: "glIsSemaphoreEXT".}
proc semaphoreParameterui64vEXT*(semaphore: uint32, pname: GLenum, params: ptr uint64): void {.glew_lib, importc: "glSemaphoreParameterui64vEXT".}
proc signalSemaphoreEXT*(semaphore: uint32, numBufferBarriers: uint32, buffers: ptr uint32, numTextureBarriers: uint32, textures: ptr uint32, dstLayouts: ptr GLenum): void {.glew_lib, importc: "glSignalSemaphoreEXT".}
proc waitSemaphoreEXT*(semaphore: uint32, numBufferBarriers: uint32, buffers: ptr uint32, numTextureBarriers: uint32, textures: ptr uint32, srcLayouts: ptr GLenum): void {.glew_lib, importc: "glWaitSemaphoreEXT".}
proc importSemaphoreFdEXT*(semaphore: uint32, handleType: GLenum, fd: int32): void {.glew_lib, importc: "glImportSemaphoreFdEXT".}
proc importSemaphoreWin32HandleEXT*(semaphore: uint32, handleType: GLenum, handle: pointer): void {.glew_lib, importc: "glImportSemaphoreWin32HandleEXT".}
proc importSemaphoreWin32NameEXT*(semaphore: uint32, handleType: GLenum, name: pointer): void {.glew_lib, importc: "glImportSemaphoreWin32NameEXT".}
proc activeProgramEXT*(program: uint32): void {.glew_lib, importc: "glActiveProgramEXT".}
proc createShaderProgramEXT*(tipe: GLenum, stryng: cstring): uint32 {.glew_lib, importc: "glCreateShaderProgramEXT".}
proc useShaderProgramEXT*(tipe: GLenum, program: uint32): void {.glew_lib, importc: "glUseShaderProgramEXT".}
proc bindImageTextureEXT*(index: uint32, texture: uint32, level: int32, layered: bool, layer: int32, access: GLenum, format: int32): void {.glew_lib, importc: "glBindImageTextureEXT".}
proc memoryBarrierEXT*(barriers: uint32): void {.glew_lib, importc: "glMemoryBarrierEXT".}
proc clearPixelLocalStorageuiEXT*(offset: int32, n: int32, values: ptr uint32): void {.glew_lib, importc: "glClearPixelLocalStorageuiEXT".}
proc framebufferPixelLocalStorageSizeEXT*(target: uint32, size: int32): void {.glew_lib, importc: "glFramebufferPixelLocalStorageSizeEXT".}
proc getFramebufferPixelLocalStorageSizeEXT*(target: uint32): int32 {.glew_lib, importc: "glGetFramebufferPixelLocalStorageSizeEXT".}
proc texPageCommitmentEXT*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, commit: bool): void {.glew_lib, importc: "glTexPageCommitmentEXT".}
proc texturePageCommitmentEXT*(texture: uint32, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, commit: bool): void {.glew_lib, importc: "glTexturePageCommitmentEXT".}
proc activeStencilFaceEXT*(face: GLenum): void {.glew_lib, importc: "glActiveStencilFaceEXT".}
proc texSubImage1DEXT*(target: GLenum, level: int32, xoffset: int32, width: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexSubImage1DEXT".}
proc texSubImage2DEXT*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, width: int32, height: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexSubImage2DEXT".}
proc texSubImage3DEXT*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexSubImage3DEXT".}
proc texImage3DEXT*(target: GLenum, level: int32, internalformat: GLenum, width: int32, height: int32, depth: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexImage3DEXT".}
proc framebufferTextureLayerEXT*(target: GLenum, attachment: GLenum, texture: uint32, level: int32, layer: int32): void {.glew_lib, importc: "glFramebufferTextureLayerEXT".}
proc texBufferEXT*(target: GLenum, internalformat: GLenum, buffer: uint32): void {.glew_lib, importc: "glTexBufferEXT".}
proc clearColorIiEXT*(red: int32, green: int32, blue: int32, alpha: int32): void {.glew_lib, importc: "glClearColorIiEXT".}
proc clearColorIuiEXT*(red: uint32, green: uint32, blue: uint32, alpha: uint32): void {.glew_lib, importc: "glClearColorIuiEXT".}
proc getTexParameterIivEXT*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTexParameterIivEXT".}
proc getTexParameterIuivEXT*(target: GLenum, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetTexParameterIuivEXT".}
proc texParameterIivEXT*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glTexParameterIivEXT".}
proc texParameterIuivEXT*(target: GLenum, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glTexParameterIuivEXT".}
proc areTexturesResidentEXT*(n: int32, textures: ptr uint32, residences: ptr bool): bool {.glew_lib, importc: "glAreTexturesResidentEXT".}
proc bindTextureEXT*(target: GLenum, texture: uint32): void {.glew_lib, importc: "glBindTextureEXT".}
proc deleteTexturesEXT*(n: int32, textures: ptr uint32): void {.glew_lib, importc: "glDeleteTexturesEXT".}
proc genTexturesEXT*(n: int32, textures: ptr uint32): void {.glew_lib, importc: "glGenTexturesEXT".}
proc isTextureEXT*(texture: uint32): bool {.glew_lib, importc: "glIsTextureEXT".}
proc prioritizeTexturesEXT*(n: int32, textures: ptr uint32, priorities: ptr float32): void {.glew_lib, importc: "glPrioritizeTexturesEXT".}
proc textureNormalEXT*(mode: GLenum): void {.glew_lib, importc: "glTextureNormalEXT".}
proc texStorage1DEXT*(target: GLenum, levels: int32, internalformat: GLenum, width: int32): void {.glew_lib, importc: "glTexStorage1DEXT".}
proc texStorage2DEXT*(target: GLenum, levels: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glTexStorage2DEXT".}
proc texStorage3DEXT*(target: GLenum, levels: int32, internalformat: GLenum, width: int32, height: int32, depth: int32): void {.glew_lib, importc: "glTexStorage3DEXT".}
proc textureStorage1DEXT*(texture: uint32, target: GLenum, levels: int32, internalformat: GLenum, width: int32): void {.glew_lib, importc: "glTextureStorage1DEXT".}
proc textureStorage2DEXT*(texture: uint32, target: GLenum, levels: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glTextureStorage2DEXT".}
proc textureStorage3DEXT*(texture: uint32, target: GLenum, levels: int32, internalformat: GLenum, width: int32, height: int32, depth: int32): void {.glew_lib, importc: "glTextureStorage3DEXT".}
proc textureViewEXT*(texture: uint32, target: GLenum, origtexture: uint32, internalformat: GLenum, minlevel: uint32, numlevels: uint32, minlayer: uint32, numlayers: uint32): void {.glew_lib, importc: "glTextureViewEXT".}
proc getQueryObjecti64vEXT*(id: uint32, pname: GLenum, params: ptr int64): void {.glew_lib, importc: "glGetQueryObjecti64vEXT".}
proc getQueryObjectui64vEXT*(id: uint32, pname: GLenum, params: ptr uint64): void {.glew_lib, importc: "glGetQueryObjectui64vEXT".}
proc beginTransformFeedbackEXT*(primitiveMode: GLenum): void {.glew_lib, importc: "glBeginTransformFeedbackEXT".}
proc bindBufferBaseEXT*(target: GLenum, index: uint32, buffer: uint32): void {.glew_lib, importc: "glBindBufferBaseEXT".}
proc bindBufferOffsetEXT*(target: GLenum, index: uint32, buffer: uint32, offset: int32): void {.glew_lib, importc: "glBindBufferOffsetEXT".}
proc bindBufferRangeEXT*(target: GLenum, index: uint32, buffer: uint32, offset: int32, size: int32): void {.glew_lib, importc: "glBindBufferRangeEXT".}
proc endTransformFeedbackEXT*(): void {.glew_lib, importc: "glEndTransformFeedbackEXT".}
proc getTransformFeedbackVaryingEXT*(program: uint32, index: uint32, bufSize: int32, length: ptr int32, size: ptr int32, tipe: ptr GLenum, name: ptr char): void {.glew_lib, importc: "glGetTransformFeedbackVaryingEXT".}
proc transformFeedbackVaryingsEXT*(program: uint32, count: int32, varyings: ptr cstring, bufferMode: GLenum): void {.glew_lib, importc: "glTransformFeedbackVaryingsEXT".}
proc arrayElementEXT*(i: int32): void {.glew_lib, importc: "glArrayElementEXT".}
proc colorPointerEXT*(size: int32, tipe: GLenum, stride: int32, count: int32, poynter: pointer): void {.glew_lib, importc: "glColorPointerEXT".}
proc drawArraysEXT*(mode: GLenum, first: int32, count: int32): void {.glew_lib, importc: "glDrawArraysEXT".}
proc edgeFlagPointerEXT*(stride: int32, count: int32, poynter: ptr bool): void {.glew_lib, importc: "glEdgeFlagPointerEXT".}
proc indexPointerEXT*(tipe: GLenum, stride: int32, count: int32, poynter: pointer): void {.glew_lib, importc: "glIndexPointerEXT".}
proc normalPointerEXT*(tipe: GLenum, stride: int32, count: int32, poynter: pointer): void {.glew_lib, importc: "glNormalPointerEXT".}
proc texCoordPointerEXT*(size: int32, tipe: GLenum, stride: int32, count: int32, poynter: pointer): void {.glew_lib, importc: "glTexCoordPointerEXT".}
proc vertexPointerEXT*(size: int32, tipe: GLenum, stride: int32, count: int32, poynter: pointer): void {.glew_lib, importc: "glVertexPointerEXT".}
proc bindArraySetEXT*(arrayset: pointer): void {.glew_lib, importc: "glBindArraySetEXT".}
proc createArraySetExt*(): void {.glew_lib, importc: "glCreateArraySetExt".}
proc deleteArraySetsEXT*(n: int32, arrayset: ptr pointer): void {.glew_lib, importc: "glDeleteArraySetsEXT".}
proc getVertexAttribLdvEXT*(index: uint32, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glGetVertexAttribLdvEXT".}
proc vertexArrayVertexAttribLOffsetEXT*(vaobj: uint32, buffer: uint32, index: uint32, size: int32, tipe: GLenum, stride: int32, offset: int32): void {.glew_lib, importc: "glVertexArrayVertexAttribLOffsetEXT".}
proc vertexAttribL1dEXT*(index: uint32, x: float64): void {.glew_lib, importc: "glVertexAttribL1dEXT".}
proc vertexAttribL1dvEXT*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribL1dvEXT".}
proc vertexAttribL2dEXT*(index: uint32, x: float64, y: float64): void {.glew_lib, importc: "glVertexAttribL2dEXT".}
proc vertexAttribL2dvEXT*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribL2dvEXT".}
proc vertexAttribL3dEXT*(index: uint32, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glVertexAttribL3dEXT".}
proc vertexAttribL3dvEXT*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribL3dvEXT".}
proc vertexAttribL4dEXT*(index: uint32, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glVertexAttribL4dEXT".}
proc vertexAttribL4dvEXT*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribL4dvEXT".}
proc vertexAttribLPointerEXT*(index: uint32, size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glVertexAttribLPointerEXT".}
proc beginVertexShaderEXT*(): void {.glew_lib, importc: "glBeginVertexShaderEXT".}
proc bindLightParameterEXT*(light: GLenum, value: GLenum): uint32 {.glew_lib, importc: "glBindLightParameterEXT".}
proc bindMaterialParameterEXT*(face: GLenum, value: GLenum): uint32 {.glew_lib, importc: "glBindMaterialParameterEXT".}
proc bindParameterEXT*(value: GLenum): uint32 {.glew_lib, importc: "glBindParameterEXT".}
proc bindTexGenParameterEXT*(unit: GLenum, coord: GLenum, value: GLenum): uint32 {.glew_lib, importc: "glBindTexGenParameterEXT".}
proc bindTextureUnitParameterEXT*(unit: GLenum, value: GLenum): uint32 {.glew_lib, importc: "glBindTextureUnitParameterEXT".}
proc bindVertexShaderEXT*(id: uint32): void {.glew_lib, importc: "glBindVertexShaderEXT".}
proc deleteVertexShaderEXT*(id: uint32): void {.glew_lib, importc: "glDeleteVertexShaderEXT".}
proc disableVariantClientStateEXT*(id: uint32): void {.glew_lib, importc: "glDisableVariantClientStateEXT".}
proc enableVariantClientStateEXT*(id: uint32): void {.glew_lib, importc: "glEnableVariantClientStateEXT".}
proc endVertexShaderEXT*(): void {.glew_lib, importc: "glEndVertexShaderEXT".}
proc extractComponentEXT*(res: uint32, src: uint32, num: uint32): void {.glew_lib, importc: "glExtractComponentEXT".}
proc genSymbolsEXT*(dataType: GLenum, storageType: GLenum, rangee: GLenum, components: uint32): uint32 {.glew_lib, importc: "glGenSymbolsEXT".}
proc genVertexShadersEXT*(rangee: uint32): uint32 {.glew_lib, importc: "glGenVertexShadersEXT".}
proc getInvariantBooleanvEXT*(id: uint32, value: GLenum, data: ptr bool): void {.glew_lib, importc: "glGetInvariantBooleanvEXT".}
proc getInvariantFloatvEXT*(id: uint32, value: GLenum, data: ptr float32): void {.glew_lib, importc: "glGetInvariantFloatvEXT".}
proc getInvariantIntegervEXT*(id: uint32, value: GLenum, data: ptr int32): void {.glew_lib, importc: "glGetInvariantIntegervEXT".}
proc getLocalConstantBooleanvEXT*(id: uint32, value: GLenum, data: ptr bool): void {.glew_lib, importc: "glGetLocalConstantBooleanvEXT".}
proc getLocalConstantFloatvEXT*(id: uint32, value: GLenum, data: ptr float32): void {.glew_lib, importc: "glGetLocalConstantFloatvEXT".}
proc getLocalConstantIntegervEXT*(id: uint32, value: GLenum, data: ptr int32): void {.glew_lib, importc: "glGetLocalConstantIntegervEXT".}
proc getVariantBooleanvEXT*(id: uint32, value: GLenum, data: ptr bool): void {.glew_lib, importc: "glGetVariantBooleanvEXT".}
proc getVariantFloatvEXT*(id: uint32, value: GLenum, data: ptr float32): void {.glew_lib, importc: "glGetVariantFloatvEXT".}
proc getVariantIntegervEXT*(id: uint32, value: GLenum, data: ptr int32): void {.glew_lib, importc: "glGetVariantIntegervEXT".}
proc getVariantPointervEXT*(id: uint32, value: GLenum, data: ptr void ): void {.glew_lib, importc: "glGetVariantPointervEXT".}
proc insertComponentEXT*(res: uint32, src: uint32, num: uint32): void {.glew_lib, importc: "glInsertComponentEXT".}
proc isVariantEnabledEXT*(id: uint32, cap: GLenum): bool {.glew_lib, importc: "glIsVariantEnabledEXT".}
proc setInvariantEXT*(id: uint32, tipe: GLenum, adr: pointer): void {.glew_lib, importc: "glSetInvariantEXT".}
proc setLocalConstantEXT*(id: uint32, tipe: GLenum, adr: pointer): void {.glew_lib, importc: "glSetLocalConstantEXT".}
proc shaderOp1EXT*(op: GLenum, res: uint32, arg1: uint32): void {.glew_lib, importc: "glShaderOp1EXT".}
proc shaderOp2EXT*(op: GLenum, res: uint32, arg1: uint32, arg2: uint32): void {.glew_lib, importc: "glShaderOp2EXT".}
proc shaderOp3EXT*(op: GLenum, res: uint32, arg1: uint32, arg2: uint32, arg3: uint32): void {.glew_lib, importc: "glShaderOp3EXT".}
proc swizzleEXT*(res: uint32, inn: uint32, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum): void {.glew_lib, importc: "glSwizzleEXT".}
proc variantPointerEXT*(id: uint32, tipe: GLenum, stride: uint32, adr: pointer): void {.glew_lib, importc: "glVariantPointerEXT".}
proc variantbvEXT*(id: uint32, adr: ptr int8): void {.glew_lib, importc: "glVariantbvEXT".}
proc variantdvEXT*(id: uint32, adr: ptr float64): void {.glew_lib, importc: "glVariantdvEXT".}
proc variantfvEXT*(id: uint32, adr: ptr float32): void {.glew_lib, importc: "glVariantfvEXT".}
proc variantivEXT*(id: uint32, adr: ptr int32): void {.glew_lib, importc: "glVariantivEXT".}
proc variantsvEXT*(id: uint32, adr: ptr int16): void {.glew_lib, importc: "glVariantsvEXT".}
proc variantubvEXT*(id: uint32, adr: ptr uint8): void {.glew_lib, importc: "glVariantubvEXT".}
proc variantuivEXT*(id: uint32, adr: ptr uint32): void {.glew_lib, importc: "glVariantuivEXT".}
proc variantusvEXT*(id: uint32, adr: ptr uint16): void {.glew_lib, importc: "glVariantusvEXT".}
proc writeMaskEXT*(res: uint32, inn: uint32, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum): void {.glew_lib, importc: "glWriteMaskEXT".}
proc vertexWeightPointerEXT*(size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glVertexWeightPointerEXT".}
proc vertexWeightfEXT*(weight: float32): void {.glew_lib, importc: "glVertexWeightfEXT".}
proc vertexWeightfvEXT*(weight: ptr float32): void {.glew_lib, importc: "glVertexWeightfvEXT".}
proc acquireKeyedMutexWin32EXT*(memory: uint32, key: uint64, timeout: uint32): bool {.glew_lib, importc: "glAcquireKeyedMutexWin32EXT".}
proc releaseKeyedMutexWin32EXT*(memory: uint32, key: uint64): bool {.glew_lib, importc: "glReleaseKeyedMutexWin32EXT".}
proc windowRectanglesEXT*(mode: GLenum, count: int32, box: ptr int32): void {.glew_lib, importc: "glWindowRectanglesEXT".}
proc importSyncEXT*(external_sync_type: GLenum, external_sync: int32, flags: uint32): distinct pointer {.glew_lib, importc: "glImportSyncEXT".}
proc frameTerminatorGREMEDY*(): void {.glew_lib, importc: "glFrameTerminatorGREMEDY".}
proc stringMarkerGREMEDY*(len: int32, stryng: pointer): void {.glew_lib, importc: "glStringMarkerGREMEDY".}
proc getImageTransformParameterfvHP*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetImageTransformParameterfvHP".}
proc getImageTransformParameterivHP*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetImageTransformParameterivHP".}
proc imageTransformParameterfHP*(target: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glImageTransformParameterfHP".}
proc imageTransformParameterfvHP*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glImageTransformParameterfvHP".}
proc imageTransformParameteriHP*(target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glImageTransformParameteriHP".}
proc imageTransformParameterivHP*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glImageTransformParameterivHP".}
proc multiModeDrawArraysIBM*(mode: ptr GLenum, first: ptr int32, count: ptr int32, primcount: int32, modestride: int32): void {.glew_lib, importc: "glMultiModeDrawArraysIBM".}
proc multiModeDrawElementsIBM*(mode: ptr GLenum, count: ptr int32, tipe: GLenum, indices: ptr void , primcount: int32, modestride: int32): void {.glew_lib, importc: "glMultiModeDrawElementsIBM".}
proc colorPointerListIBM*(size: int32, tipe: GLenum, stride: int32, poynter: ptr void, ptrstride: int32): void {.glew_lib, importc: "glColorPointerListIBM".}
proc edgeFlagPointerListIBM*(stride: int32, poynter: ptr bool, ptrstride: int32): void {.glew_lib, importc: "glEdgeFlagPointerListIBM".}
proc fogCoordPointerListIBM*(tipe: GLenum, stride: int32, poynter: ptr void, ptrstride: int32): void {.glew_lib, importc: "glFogCoordPointerListIBM".}
proc indexPointerListIBM*(tipe: GLenum, stride: int32, poynter: ptr void, ptrstride: int32): void {.glew_lib, importc: "glIndexPointerListIBM".}
proc normalPointerListIBM*(tipe: GLenum, stride: int32, poynter: ptr void, ptrstride: int32): void {.glew_lib, importc: "glNormalPointerListIBM".}
proc secondaryColorPointerListIBM*(size: int32, tipe: GLenum, stride: int32, poynter: ptr void, ptrstride: int32): void {.glew_lib, importc: "glSecondaryColorPointerListIBM".}
proc texCoordPointerListIBM*(size: int32, tipe: GLenum, stride: int32, poynter: ptr void, ptrstride: int32): void {.glew_lib, importc: "glTexCoordPointerListIBM".}
proc vertexPointerListIBM*(size: int32, tipe: GLenum, stride: int32, poynter: ptr void, ptrstride: int32): void {.glew_lib, importc: "glVertexPointerListIBM".}
proc mapTexture2DINTEL*(texture: uint32, level: int32, access: uint32, stride: ptr int32, layout: ptr GLenum): void {.glew_lib, importc: "glMapTexture2DINTEL".}
proc syncTextureINTEL*(texture: uint32): void {.glew_lib, importc: "glSyncTextureINTEL".}
proc unmapTexture2DINTEL*(texture: uint32, level: int32): void {.glew_lib, importc: "glUnmapTexture2DINTEL".}
proc colorPointervINTEL*(size: int32, tipe: GLenum, poynter: ptr void): void {.glew_lib, importc: "glColorPointervINTEL".}
proc normalPointervINTEL*(tipe: GLenum, poynter: ptr void): void {.glew_lib, importc: "glNormalPointervINTEL".}
proc texCoordPointervINTEL*(size: int32, tipe: GLenum, poynter: ptr void): void {.glew_lib, importc: "glTexCoordPointervINTEL".}
proc vertexPointervINTEL*(size: int32, tipe: GLenum, poynter: ptr void): void {.glew_lib, importc: "glVertexPointervINTEL".}
proc beginPerfQueryINTEL*(queryHandle: uint32): void {.glew_lib, importc: "glBeginPerfQueryINTEL".}
proc createPerfQueryINTEL*(queryId: uint32, queryHandle: ptr uint32): void {.glew_lib, importc: "glCreatePerfQueryINTEL".}
proc deletePerfQueryINTEL*(queryHandle: uint32): void {.glew_lib, importc: "glDeletePerfQueryINTEL".}
proc endPerfQueryINTEL*(queryHandle: uint32): void {.glew_lib, importc: "glEndPerfQueryINTEL".}
proc getFirstPerfQueryIdINTEL*(queryId: ptr uint32): void {.glew_lib, importc: "glGetFirstPerfQueryIdINTEL".}
proc getNextPerfQueryIdINTEL*(queryId: uint32, nextQueryId: ptr uint32): void {.glew_lib, importc: "glGetNextPerfQueryIdINTEL".}
proc getPerfCounterInfoINTEL*(queryId: uint32, counterId: uint32, counterNameLength: uint32, counterName: ptr char, counterDescLength: uint32, counterDesc: ptr char, counterOffset: ptr uint32, counterDataSize: ptr uint32, counterTypeEnum: ptr uint32, counterDataTypeEnum: ptr uint32, rawCounterMaxValue: ptr uint64): void {.glew_lib, importc: "glGetPerfCounterInfoINTEL".}
proc getPerfQueryDataINTEL*(queryHandle: uint32, flags: uint32, dataSize: int32, data: pointer, bytesWritten: ptr uint32): void {.glew_lib, importc: "glGetPerfQueryDataINTEL".}
proc getPerfQueryIdByNameINTEL*(queryName: ptr char, queryId: ptr uint32): void {.glew_lib, importc: "glGetPerfQueryIdByNameINTEL".}
proc getPerfQueryInfoINTEL*(queryId: uint32, queryNameLength: uint32, queryName: ptr char, dataSize: ptr uint32, noCounters: ptr uint32, noInstances: ptr uint32, capsMask: ptr uint32): void {.glew_lib, importc: "glGetPerfQueryInfoINTEL".}
proc texScissorFuncINTEL*(target: GLenum, lfunc: GLenum, hfunc: GLenum): void {.glew_lib, importc: "glTexScissorFuncINTEL".}
proc texScissorINTEL*(target: GLenum, tlow: float32, thigh: float32): void {.glew_lib, importc: "glTexScissorINTEL".}
proc blendBarrierKHR*(): void {.glew_lib, importc: "glBlendBarrierKHR".}
proc debugMessageControl*(source: GLenum, tipe: GLenum, severity: GLenum, count: int32, ids: ptr uint32, enabled: bool): void {.glew_lib, importc: "glDebugMessageControl".}
proc debugMessageInsert*(source: GLenum, tipe: GLenum, id: uint32, severity: GLenum, length: int32, buf: cstring): void {.glew_lib, importc: "glDebugMessageInsert".}
proc getDebugMessageLog*(count: uint32, bufSize: int32, sources: ptr GLenum, types: ptr GLenum, ids: ptr uint32, severities: ptr GLenum, lengths: ptr int32, messageLog: ptr char): uint32 {.glew_lib, importc: "glGetDebugMessageLog".}
proc getObjectLabel*(identifier: GLenum, name: uint32, bufSize: int32, length: ptr int32, label: ptr char): void {.glew_lib, importc: "glGetObjectLabel".}
proc getObjectPtrLabel*(poiinter: pointer, bufSize: int32, length: ptr int32, label: ptr char): void {.glew_lib, importc: "glGetObjectPtrLabel".}
proc objectLabel*(identifier: GLenum, name: uint32, length: int32, label: cstring): void {.glew_lib, importc: "glObjectLabel".}
proc objectPtrLabel*(poiinter: pointer, length: int32, label: cstring): void {.glew_lib, importc: "glObjectPtrLabel".}
proc popDebugGroup*(): void {.glew_lib, importc: "glPopDebugGroup".}
proc pushDebugGroup*(source: GLenum, id: uint32, length: int32, message: cstring): void {.glew_lib, importc: "glPushDebugGroup".}
proc maxShaderCompilerThreadsKHR*(count: uint32): void {.glew_lib, importc: "glMaxShaderCompilerThreadsKHR".}
proc getnUniformfv*(program: uint32, location: int32, bufSize: int32, params: ptr float32): void {.glew_lib, importc: "glGetnUniformfv".}
proc getnUniformiv*(program: uint32, location: int32, bufSize: int32, params: ptr int32): void {.glew_lib, importc: "glGetnUniformiv".}
proc getnUniformuiv*(program: uint32, location: int32, bufSize: int32, params: ptr uint32): void {.glew_lib, importc: "glGetnUniformuiv".}
proc readnPixels*(x: int32, y: int32, width: int32, height: int32, format: GLenum, tipe: GLenum, bufSize: int32, data: pointer): void {.glew_lib, importc: "glReadnPixels".}
proc bufferRegionEnabled*(): uint32 {.glew_lib, importc: "glBufferRegionEnabled".}
proc deleteBufferRegion*(region: GLenum): void {.glew_lib, importc: "glDeleteBufferRegion".}
proc drawBufferRegion*(region: uint32, x: int32, y: int32, width: int32, height: int32, xDest: int32, yDest: int32): void {.glew_lib, importc: "glDrawBufferRegion".}
proc newBufferRegion*(region: GLenum): uint32 {.glew_lib, importc: "glNewBufferRegion".}
proc readBufferRegion*(region: uint32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glReadBufferRegion".}
proc resizeBuffersMESA*(): void {.glew_lib, importc: "glResizeBuffersMESA".}
proc windowPos2dMESA*(x: float64, y: float64): void {.glew_lib, importc: "glWindowPos2dMESA".}
proc windowPos2dvMESA*(p: ptr float64): void {.glew_lib, importc: "glWindowPos2dvMESA".}
proc windowPos2fMESA*(x: float32, y: float32): void {.glew_lib, importc: "glWindowPos2fMESA".}
proc windowPos2fvMESA*(p: ptr float32): void {.glew_lib, importc: "glWindowPos2fvMESA".}
proc windowPos2iMESA*(x: int32, y: int32): void {.glew_lib, importc: "glWindowPos2iMESA".}
proc windowPos2ivMESA*(p: ptr int32): void {.glew_lib, importc: "glWindowPos2ivMESA".}
proc windowPos2sMESA*(x: int16, y: int16): void {.glew_lib, importc: "glWindowPos2sMESA".}
proc windowPos2svMESA*(p: ptr int16): void {.glew_lib, importc: "glWindowPos2svMESA".}
proc windowPos3dMESA*(x: float64, y: float64, z: float64): void {.glew_lib, importc: "glWindowPos3dMESA".}
proc windowPos3dvMESA*(p: ptr float64): void {.glew_lib, importc: "glWindowPos3dvMESA".}
proc windowPos3fMESA*(x: float32, y: float32, z: float32): void {.glew_lib, importc: "glWindowPos3fMESA".}
proc windowPos3fvMESA*(p: ptr float32): void {.glew_lib, importc: "glWindowPos3fvMESA".}
proc windowPos3iMESA*(x: int32, y: int32, z: int32): void {.glew_lib, importc: "glWindowPos3iMESA".}
proc windowPos3ivMESA*(p: ptr int32): void {.glew_lib, importc: "glWindowPos3ivMESA".}
proc windowPos3sMESA*(x: int16, y: int16, z: int16): void {.glew_lib, importc: "glWindowPos3sMESA".}
proc windowPos3svMESA*(p: ptr int16): void {.glew_lib, importc: "glWindowPos3svMESA".}
proc windowPos4dMESA*(x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glWindowPos4dMESA".}
proc windowPos4dvMESA*(p: ptr float64): void {.glew_lib, importc: "glWindowPos4dvMESA".}
proc windowPos4fMESA*(x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glWindowPos4fMESA".}
proc windowPos4fvMESA*(p: ptr float32): void {.glew_lib, importc: "glWindowPos4fvMESA".}
proc windowPos4iMESA*(x: int32, y: int32, z: int32, w: int32): void {.glew_lib, importc: "glWindowPos4iMESA".}
proc windowPos4ivMESA*(p: ptr int32): void {.glew_lib, importc: "glWindowPos4ivMESA".}
proc windowPos4sMESA*(x: int16, y: int16, z: int16, w: int16): void {.glew_lib, importc: "glWindowPos4sMESA".}
proc windowPos4svMESA*(p: ptr int16): void {.glew_lib, importc: "glWindowPos4svMESA".}
proc beginConditionalRenderNVX*(id: uint32): void {.glew_lib, importc: "glBeginConditionalRenderNVX".}
proc endConditionalRenderNVX*(): void {.glew_lib, importc: "glEndConditionalRenderNVX".}
proc lGPUCopyImageSubDataNVX*(sourceGpu: uint32, destinationGpuMask: uint32, srcName: uint32, srcTarget: GLenum, srcLevel: int32, srcX: int32, srxY: int32, srcZ: int32, dstName: uint32, dstTarget: GLenum, dstLevel: int32, dstX: int32, dstY: int32, dstZ: int32, width: int32, height: int32, depth: int32): void {.glew_lib, importc: "glLGPUCopyImageSubDataNVX".}
proc lGPUInterlockNVX*(): void {.glew_lib, importc: "glLGPUInterlockNVX".}
proc lGPUNamedBufferSubDataNVX*(gpuMask: uint32, buffer: uint32, offset: int32, size: int32, data: pointer): void {.glew_lib, importc: "glLGPUNamedBufferSubDataNVX".}
proc stereoParameterfNV*(pname: GLenum, param: float32): void {.glew_lib, importc: "glStereoParameterfNV".}
proc stereoParameteriNV*(pname: GLenum, param: int32): void {.glew_lib, importc: "glStereoParameteriNV".}
proc multiDrawArraysIndirectBindlessNV*(mode: GLenum, indirect: pointer, drawCount: int32, stride: int32, vertexBufferCount: int32): void {.glew_lib, importc: "glMultiDrawArraysIndirectBindlessNV".}
proc multiDrawElementsIndirectBindlessNV*(mode: GLenum, tipe: GLenum, indirect: pointer, drawCount: int32, stride: int32, vertexBufferCount: int32): void {.glew_lib, importc: "glMultiDrawElementsIndirectBindlessNV".}
proc multiDrawArraysIndirectBindlessCountNV*(mode: GLenum, indirect: pointer, drawCount: int32, maxDrawCount: int32, stride: int32, vertexBufferCount: int32): void {.glew_lib, importc: "glMultiDrawArraysIndirectBindlessCountNV".}
proc multiDrawElementsIndirectBindlessCountNV*(mode: GLenum, tipe: GLenum, indirect: pointer, drawCount: int32, maxDrawCount: int32, stride: int32, vertexBufferCount: int32): void {.glew_lib, importc: "glMultiDrawElementsIndirectBindlessCountNV".}
proc getImageHandleNV*(texture: uint32, level: int32, layered: bool, layer: int32, format: GLenum): uint64 {.glew_lib, importc: "glGetImageHandleNV".}
proc getTextureHandleNV*(texture: uint32): uint64 {.glew_lib, importc: "glGetTextureHandleNV".}
proc getTextureSamplerHandleNV*(texture: uint32, sampler: uint32): uint64 {.glew_lib, importc: "glGetTextureSamplerHandleNV".}
proc isImageHandleResidentNV*(handle: uint64): bool {.glew_lib, importc: "glIsImageHandleResidentNV".}
proc isTextureHandleResidentNV*(handle: uint64): bool {.glew_lib, importc: "glIsTextureHandleResidentNV".}
proc makeImageHandleNonResidentNV*(handle: uint64): void {.glew_lib, importc: "glMakeImageHandleNonResidentNV".}
proc makeImageHandleResidentNV*(handle: uint64, access: GLenum): void {.glew_lib, importc: "glMakeImageHandleResidentNV".}
proc makeTextureHandleNonResidentNV*(handle: uint64): void {.glew_lib, importc: "glMakeTextureHandleNonResidentNV".}
proc makeTextureHandleResidentNV*(handle: uint64): void {.glew_lib, importc: "glMakeTextureHandleResidentNV".}
proc programUniformHandleui64NV*(program: uint32, location: int32, value: uint64): void {.glew_lib, importc: "glProgramUniformHandleui64NV".}
proc programUniformHandleui64vNV*(program: uint32, location: int32, count: int32, values: ptr uint64): void {.glew_lib, importc: "glProgramUniformHandleui64vNV".}
proc uniformHandleui64NV*(location: int32, value: uint64): void {.glew_lib, importc: "glUniformHandleui64NV".}
proc uniformHandleui64vNV*(location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glUniformHandleui64vNV".}
proc blendBarrierNV*(): void {.glew_lib, importc: "glBlendBarrierNV".}
proc blendParameteriNV*(pname: GLenum, value: int32): void {.glew_lib, importc: "glBlendParameteriNV".}
proc viewportPositionWScaleNV*(index: uint32, xcoeff: float32, ycoeff: float32): void {.glew_lib, importc: "glViewportPositionWScaleNV".}
proc callCommandListNV*(list: uint32): void {.glew_lib, importc: "glCallCommandListNV".}
proc commandListSegmentsNV*(list: uint32, segments: uint32): void {.glew_lib, importc: "glCommandListSegmentsNV".}
proc compileCommandListNV*(list: uint32): void {.glew_lib, importc: "glCompileCommandListNV".}
proc createCommandListsNV*(n: int32, lists: ptr uint32): void {.glew_lib, importc: "glCreateCommandListsNV".}
proc createStatesNV*(n: int32, states: ptr uint32): void {.glew_lib, importc: "glCreateStatesNV".}
proc deleteCommandListsNV*(n: int32, lists: ptr uint32): void {.glew_lib, importc: "glDeleteCommandListsNV".}
proc deleteStatesNV*(n: int32, states: ptr uint32): void {.glew_lib, importc: "glDeleteStatesNV".}
proc drawCommandsAddressNV*(primitiveMode: GLenum, indirects: ptr uint64, sizes: ptr int32, count: uint32): void {.glew_lib, importc: "glDrawCommandsAddressNV".}
proc drawCommandsNV*(primitiveMode: GLenum, buffer: uint32, indirects: ptr int32, sizes: ptr int32, count: uint32): void {.glew_lib, importc: "glDrawCommandsNV".}
proc drawCommandsStatesAddressNV*(indirects: ptr uint64, sizes: ptr int32, states: ptr uint32, fbos: ptr uint32, count: uint32): void {.glew_lib, importc: "glDrawCommandsStatesAddressNV".}
proc drawCommandsStatesNV*(buffer: uint32, indirects: ptr int32, sizes: ptr int32, states: ptr uint32, fbos: ptr uint32, count: uint32): void {.glew_lib, importc: "glDrawCommandsStatesNV".}
proc getCommandHeaderNV*(tokenID: GLenum, size: uint32): uint32 {.glew_lib, importc: "glGetCommandHeaderNV".}
proc getStageIndexNV*(shadertype: GLenum): uint16 {.glew_lib, importc: "glGetStageIndexNV".}
proc isCommandListNV*(list: uint32): bool {.glew_lib, importc: "glIsCommandListNV".}
proc isStateNV*(state: uint32): bool {.glew_lib, importc: "glIsStateNV".}
proc listDrawCommandsStatesClientNV*(list: uint32, segment: uint32, indirects: ptr void, sizes: ptr int32, states: ptr uint32, fbos: ptr uint32, count: uint32): void {.glew_lib, importc: "glListDrawCommandsStatesClientNV".}
proc stateCaptureNV*(state: uint32, mode: GLenum): void {.glew_lib, importc: "glStateCaptureNV".}
proc beginConditionalRenderNV*(id: uint32, mode: GLenum): void {.glew_lib, importc: "glBeginConditionalRenderNV".}
proc endConditionalRenderNV*(): void {.glew_lib, importc: "glEndConditionalRenderNV".}
proc subpixelPrecisionBiasNV*(xbits: uint32, ybits: uint32): void {.glew_lib, importc: "glSubpixelPrecisionBiasNV".}
proc conservativeRasterParameterfNV*(pname: GLenum, value: float32): void {.glew_lib, importc: "glConservativeRasterParameterfNV".}
proc conservativeRasterParameteriNV*(pname: GLenum, param: int32): void {.glew_lib, importc: "glConservativeRasterParameteriNV".}
proc copyBufferSubDataNV*(readtarget: GLenum, writetarget: GLenum, readoffset: int32, writeoffset: int32, size: int32): void {.glew_lib, importc: "glCopyBufferSubDataNV".}
proc copyImageSubDataNV*(srcName: uint32, srcTarget: GLenum, srcLevel: int32, srcX: int32, srcY: int32, srcZ: int32, dstName: uint32, dstTarget: GLenum, dstLevel: int32, dstX: int32, dstY: int32, dstZ: int32, width: int32, height: int32, depth: int32): void {.glew_lib, importc: "glCopyImageSubDataNV".}
proc clearDepthdNV*(depth: float64): void {.glew_lib, importc: "glClearDepthdNV".}
proc depthBoundsdNV*(zmin: float64, zmax: float64): void {.glew_lib, importc: "glDepthBoundsdNV".}
proc depthRangedNV*(zNear: float64, zFar: float64): void {.glew_lib, importc: "glDepthRangedNV".}
proc drawBuffersNV*(n: int32, bufs: ptr GLenum): void {.glew_lib, importc: "glDrawBuffersNV".}
proc drawArraysInstancedNV*(mode: GLenum, first: int32, count: int32, primcount: int32): void {.glew_lib, importc: "glDrawArraysInstancedNV".}
proc drawElementsInstancedNV*(mode: GLenum, count: int32, tipe: GLenum, indices: pointer, primcount: int32): void {.glew_lib, importc: "glDrawElementsInstancedNV".}
proc drawTextureNV*(texture: uint32, sampler: uint32, x0: float32, y0: float32, x1: float32, y1: float32, z: float32, s0: float32, t0: float32, s1: float32, t1: float32): void {.glew_lib, importc: "glDrawTextureNV".}
proc drawVkImageNV*(vkImage: uint64, sampler: uint32, x0: float32, y0: float32, x1: float32, y1: float32, z: float32, s0: float32, t0: float32, s1: float32, t1: float32): void {.glew_lib, importc: "glDrawVkImageNV".}
proc evalMapsNV*(target: GLenum, mode: GLenum): void {.glew_lib, importc: "glEvalMapsNV".}
proc getMapAttribParameterfvNV*(target: GLenum, index: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetMapAttribParameterfvNV".}
proc getMapAttribParameterivNV*(target: GLenum, index: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMapAttribParameterivNV".}
proc getMapControlPointsNV*(target: GLenum, index: uint32, tipe: GLenum, ustride: int32, vstride: int32, packed: bool, points: pointer): void {.glew_lib, importc: "glGetMapControlPointsNV".}
proc getMapParameterfvNV*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetMapParameterfvNV".}
proc getMapParameterivNV*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMapParameterivNV".}
proc mapControlPointsNV*(target: GLenum, index: uint32, tipe: GLenum, ustride: int32, vstride: int32, uorder: int32, vorder: int32, packed: bool, points: pointer): void {.glew_lib, importc: "glMapControlPointsNV".}
proc mapParameterfvNV*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glMapParameterfvNV".}
proc mapParameterivNV*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glMapParameterivNV".}
proc getMultisamplefvNV*(pname: GLenum, index: uint32, val: ptr float32): void {.glew_lib, importc: "glGetMultisamplefvNV".}
proc sampleMaskIndexedNV*(index: uint32, mask: uint32): void {.glew_lib, importc: "glSampleMaskIndexedNV".}
proc texRenderbufferNV*(target: GLenum, renderbuffer: uint32): void {.glew_lib, importc: "glTexRenderbufferNV".}
proc deleteFencesNV*(n: int32, fences: ptr uint32): void {.glew_lib, importc: "glDeleteFencesNV".}
proc finishFenceNV*(fence: uint32): void {.glew_lib, importc: "glFinishFenceNV".}
proc genFencesNV*(n: int32, fences: ptr uint32): void {.glew_lib, importc: "glGenFencesNV".}
proc getFenceivNV*(fence: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetFenceivNV".}
proc isFenceNV*(fence: uint32): bool {.glew_lib, importc: "glIsFenceNV".}
proc setFenceNV*(fence: uint32, condition: GLenum): void {.glew_lib, importc: "glSetFenceNV".}
proc testFenceNV*(fence: uint32): bool {.glew_lib, importc: "glTestFenceNV".}
proc fragmentCoverageColorNV*(color: uint32): void {.glew_lib, importc: "glFragmentCoverageColorNV".}
proc getProgramNamedParameterdvNV*(id: uint32, len: int32, name: ptr uint8, params: ptr float64): void {.glew_lib, importc: "glGetProgramNamedParameterdvNV".}
proc getProgramNamedParameterfvNV*(id: uint32, len: int32, name: ptr uint8, params: ptr float32): void {.glew_lib, importc: "glGetProgramNamedParameterfvNV".}
proc programNamedParameter4dNV*(id: uint32, len: int32, name: ptr uint8, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glProgramNamedParameter4dNV".}
proc programNamedParameter4dvNV*(id: uint32, len: int32, name: ptr uint8, v: ptr float64): void {.glew_lib, importc: "glProgramNamedParameter4dvNV".}
proc programNamedParameter4fNV*(id: uint32, len: int32, name: ptr uint8, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glProgramNamedParameter4fNV".}
proc programNamedParameter4fvNV*(id: uint32, len: int32, name: ptr uint8, v: ptr float32): void {.glew_lib, importc: "glProgramNamedParameter4fvNV".}
proc blitFramebufferNV*(srcX0: int32, srcY0: int32, srcX1: int32, srcY1: int32, dstX0: int32, dstY0: int32, dstX1: int32, dstY1: int32, mask: uint32, filter: GLenum): void {.glew_lib, importc: "glBlitFramebufferNV".}
proc renderbufferStorageMultisampleNV*(target: GLenum, samples: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glRenderbufferStorageMultisampleNV".}
proc renderbufferStorageMultisampleCoverageNV*(target: GLenum, coverageSamples: int32, colorSamples: int32, internalformat: GLenum, width: int32, height: int32): void {.glew_lib, importc: "glRenderbufferStorageMultisampleCoverageNV".}
proc programVertexLimitNV*(target: GLenum, limit: int32): void {.glew_lib, importc: "glProgramVertexLimitNV".}
proc multicastBarrierNV*(): void {.glew_lib, importc: "glMulticastBarrierNV".}
proc multicastBlitFramebufferNV*(srcGpu: uint32, dstGpu: uint32, srcX0: int32, srcY0: int32, srcX1: int32, srcY1: int32, dstX0: int32, dstY0: int32, dstX1: int32, dstY1: int32, mask: uint32, filter: GLenum): void {.glew_lib, importc: "glMulticastBlitFramebufferNV".}
proc multicastBufferSubDataNV*(gpuMask: uint32, buffer: uint32, offset: int32, size: int32, data: pointer): void {.glew_lib, importc: "glMulticastBufferSubDataNV".}
proc multicastCopyBufferSubDataNV*(readGpu: uint32, writeGpuMask: uint32, readBuffer: uint32, writeBuffer: uint32, readOffset: int32, writeOffset: int32, size: int32): void {.glew_lib, importc: "glMulticastCopyBufferSubDataNV".}
proc multicastCopyImageSubDataNV*(srcGpu: uint32, dstGpuMask: uint32, srcName: uint32, srcTarget: GLenum, srcLevel: int32, srcX: int32, srcY: int32, srcZ: int32, dstName: uint32, dstTarget: GLenum, dstLevel: int32, dstX: int32, dstY: int32, dstZ: int32, srcWidth: int32, srcHeight: int32, srcDepth: int32): void {.glew_lib, importc: "glMulticastCopyImageSubDataNV".}
proc multicastFramebufferSampleLocationsfvNV*(gpu: uint32, framebuffer: uint32, start: uint32, count: int32, v: ptr float32): void {.glew_lib, importc: "glMulticastFramebufferSampleLocationsfvNV".}
proc multicastGetQueryObjecti64vNV*(gpu: uint32, id: uint32, pname: GLenum, params: ptr int64): void {.glew_lib, importc: "glMulticastGetQueryObjecti64vNV".}
proc multicastGetQueryObjectivNV*(gpu: uint32, id: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glMulticastGetQueryObjectivNV".}
proc multicastGetQueryObjectui64vNV*(gpu: uint32, id: uint32, pname: GLenum, params: ptr uint64): void {.glew_lib, importc: "glMulticastGetQueryObjectui64vNV".}
proc multicastGetQueryObjectuivNV*(gpu: uint32, id: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glMulticastGetQueryObjectuivNV".}
proc multicastWaitSyncNV*(signalGpu: uint32, waitGpuMask: uint32): void {.glew_lib, importc: "glMulticastWaitSyncNV".}
proc renderGpuMaskNV*(mask: uint32): void {.glew_lib, importc: "glRenderGpuMaskNV".}
proc programEnvParameterI4iNV*(target: GLenum, index: uint32, x: int32, y: int32, z: int32, w: int32): void {.glew_lib, importc: "glProgramEnvParameterI4iNV".}
proc programEnvParameterI4ivNV*(target: GLenum, index: uint32, params: ptr int32): void {.glew_lib, importc: "glProgramEnvParameterI4ivNV".}
proc programEnvParameterI4uiNV*(target: GLenum, index: uint32, x: uint32, y: uint32, z: uint32, w: uint32): void {.glew_lib, importc: "glProgramEnvParameterI4uiNV".}
proc programEnvParameterI4uivNV*(target: GLenum, index: uint32, params: ptr uint32): void {.glew_lib, importc: "glProgramEnvParameterI4uivNV".}
proc programEnvParametersI4ivNV*(target: GLenum, index: uint32, count: int32, params: ptr int32): void {.glew_lib, importc: "glProgramEnvParametersI4ivNV".}
proc programEnvParametersI4uivNV*(target: GLenum, index: uint32, count: int32, params: ptr uint32): void {.glew_lib, importc: "glProgramEnvParametersI4uivNV".}
proc programLocalParameterI4iNV*(target: GLenum, index: uint32, x: int32, y: int32, z: int32, w: int32): void {.glew_lib, importc: "glProgramLocalParameterI4iNV".}
proc programLocalParameterI4ivNV*(target: GLenum, index: uint32, params: ptr int32): void {.glew_lib, importc: "glProgramLocalParameterI4ivNV".}
proc programLocalParameterI4uiNV*(target: GLenum, index: uint32, x: uint32, y: uint32, z: uint32, w: uint32): void {.glew_lib, importc: "glProgramLocalParameterI4uiNV".}
proc programLocalParameterI4uivNV*(target: GLenum, index: uint32, params: ptr uint32): void {.glew_lib, importc: "glProgramLocalParameterI4uivNV".}
proc programLocalParametersI4ivNV*(target: GLenum, index: uint32, count: int32, params: ptr int32): void {.glew_lib, importc: "glProgramLocalParametersI4ivNV".}
proc programLocalParametersI4uivNV*(target: GLenum, index: uint32, count: int32, params: ptr uint32): void {.glew_lib, importc: "glProgramLocalParametersI4uivNV".}
proc getUniformi64vNV*(program: uint32, location: int32, params: ptr int64): void {.glew_lib, importc: "glGetUniformi64vNV".}
proc getUniformui64vNV*(program: uint32, location: int32, params: ptr uint64): void {.glew_lib, importc: "glGetUniformui64vNV".}
proc programUniform1i64NV*(program: uint32, location: int32, x: int64): void {.glew_lib, importc: "glProgramUniform1i64NV".}
proc programUniform1i64vNV*(program: uint32, location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glProgramUniform1i64vNV".}
proc programUniform1ui64NV*(program: uint32, location: int32, x: uint64): void {.glew_lib, importc: "glProgramUniform1ui64NV".}
proc programUniform1ui64vNV*(program: uint32, location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glProgramUniform1ui64vNV".}
proc programUniform2i64NV*(program: uint32, location: int32, x: int64, y: int64): void {.glew_lib, importc: "glProgramUniform2i64NV".}
proc programUniform2i64vNV*(program: uint32, location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glProgramUniform2i64vNV".}
proc programUniform2ui64NV*(program: uint32, location: int32, x: uint64, y: uint64): void {.glew_lib, importc: "glProgramUniform2ui64NV".}
proc programUniform2ui64vNV*(program: uint32, location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glProgramUniform2ui64vNV".}
proc programUniform3i64NV*(program: uint32, location: int32, x: int64, y: int64, z: int64): void {.glew_lib, importc: "glProgramUniform3i64NV".}
proc programUniform3i64vNV*(program: uint32, location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glProgramUniform3i64vNV".}
proc programUniform3ui64NV*(program: uint32, location: int32, x: uint64, y: uint64, z: uint64): void {.glew_lib, importc: "glProgramUniform3ui64NV".}
proc programUniform3ui64vNV*(program: uint32, location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glProgramUniform3ui64vNV".}
proc programUniform4i64NV*(program: uint32, location: int32, x: int64, y: int64, z: int64, w: int64): void {.glew_lib, importc: "glProgramUniform4i64NV".}
proc programUniform4i64vNV*(program: uint32, location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glProgramUniform4i64vNV".}
proc programUniform4ui64NV*(program: uint32, location: int32, x: uint64, y: uint64, z: uint64, w: uint64): void {.glew_lib, importc: "glProgramUniform4ui64NV".}
proc programUniform4ui64vNV*(program: uint32, location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glProgramUniform4ui64vNV".}
proc uniform1i64NV*(location: int32, x: int64): void {.glew_lib, importc: "glUniform1i64NV".}
proc uniform1i64vNV*(location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glUniform1i64vNV".}
proc uniform1ui64NV*(location: int32, x: uint64): void {.glew_lib, importc: "glUniform1ui64NV".}
proc uniform1ui64vNV*(location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glUniform1ui64vNV".}
proc uniform2i64NV*(location: int32, x: int64, y: int64): void {.glew_lib, importc: "glUniform2i64NV".}
proc uniform2i64vNV*(location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glUniform2i64vNV".}
proc uniform2ui64NV*(location: int32, x: uint64, y: uint64): void {.glew_lib, importc: "glUniform2ui64NV".}
proc uniform2ui64vNV*(location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glUniform2ui64vNV".}
proc uniform3i64NV*(location: int32, x: int64, y: int64, z: int64): void {.glew_lib, importc: "glUniform3i64NV".}
proc uniform3i64vNV*(location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glUniform3i64vNV".}
proc uniform3ui64NV*(location: int32, x: uint64, y: uint64, z: uint64): void {.glew_lib, importc: "glUniform3ui64NV".}
proc uniform3ui64vNV*(location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glUniform3ui64vNV".}
proc uniform4i64NV*(location: int32, x: int64, y: int64, z: int64, w: int64): void {.glew_lib, importc: "glUniform4i64NV".}
proc uniform4i64vNV*(location: int32, count: int32, value: ptr int64): void {.glew_lib, importc: "glUniform4i64vNV".}
proc uniform4ui64NV*(location: int32, x: uint64, y: uint64, z: uint64, w: uint64): void {.glew_lib, importc: "glUniform4ui64NV".}
proc uniform4ui64vNV*(location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glUniform4ui64vNV".}
proc color3hNV*(red: uint16, green: uint16, blue: uint16): void {.glew_lib, importc: "glColor3hNV".}
proc color3hvNV*(v: ptr uint16): void {.glew_lib, importc: "glColor3hvNV".}
proc color4hNV*(red: uint16, green: uint16, blue: uint16, alpha: uint16): void {.glew_lib, importc: "glColor4hNV".}
proc color4hvNV*(v: ptr uint16): void {.glew_lib, importc: "glColor4hvNV".}
proc fogCoordhNV*(fog: uint16): void {.glew_lib, importc: "glFogCoordhNV".}
proc fogCoordhvNV*(fog: ptr uint16): void {.glew_lib, importc: "glFogCoordhvNV".}
proc multiTexCoord1hNV*(target: GLenum, s: uint16): void {.glew_lib, importc: "glMultiTexCoord1hNV".}
proc multiTexCoord1hvNV*(target: GLenum, v: ptr uint16): void {.glew_lib, importc: "glMultiTexCoord1hvNV".}
proc multiTexCoord2hNV*(target: GLenum, s: uint16, t: uint16): void {.glew_lib, importc: "glMultiTexCoord2hNV".}
proc multiTexCoord2hvNV*(target: GLenum, v: ptr uint16): void {.glew_lib, importc: "glMultiTexCoord2hvNV".}
proc multiTexCoord3hNV*(target: GLenum, s: uint16, t: uint16, r: uint16): void {.glew_lib, importc: "glMultiTexCoord3hNV".}
proc multiTexCoord3hvNV*(target: GLenum, v: ptr uint16): void {.glew_lib, importc: "glMultiTexCoord3hvNV".}
proc multiTexCoord4hNV*(target: GLenum, s: uint16, t: uint16, r: uint16, q: uint16): void {.glew_lib, importc: "glMultiTexCoord4hNV".}
proc multiTexCoord4hvNV*(target: GLenum, v: ptr uint16): void {.glew_lib, importc: "glMultiTexCoord4hvNV".}
proc normal3hNV*(nx: uint16, ny: uint16, nz: uint16): void {.glew_lib, importc: "glNormal3hNV".}
proc normal3hvNV*(v: ptr uint16): void {.glew_lib, importc: "glNormal3hvNV".}
proc secondaryColor3hNV*(red: uint16, green: uint16, blue: uint16): void {.glew_lib, importc: "glSecondaryColor3hNV".}
proc secondaryColor3hvNV*(v: ptr uint16): void {.glew_lib, importc: "glSecondaryColor3hvNV".}
proc texCoord1hNV*(s: uint16): void {.glew_lib, importc: "glTexCoord1hNV".}
proc texCoord1hvNV*(v: ptr uint16): void {.glew_lib, importc: "glTexCoord1hvNV".}
proc texCoord2hNV*(s: uint16, t: uint16): void {.glew_lib, importc: "glTexCoord2hNV".}
proc texCoord2hvNV*(v: ptr uint16): void {.glew_lib, importc: "glTexCoord2hvNV".}
proc texCoord3hNV*(s: uint16, t: uint16, r: uint16): void {.glew_lib, importc: "glTexCoord3hNV".}
proc texCoord3hvNV*(v: ptr uint16): void {.glew_lib, importc: "glTexCoord3hvNV".}
proc texCoord4hNV*(s: uint16, t: uint16, r: uint16, q: uint16): void {.glew_lib, importc: "glTexCoord4hNV".}
proc texCoord4hvNV*(v: ptr uint16): void {.glew_lib, importc: "glTexCoord4hvNV".}
proc vertex2hNV*(x: uint16, y: uint16): void {.glew_lib, importc: "glVertex2hNV".}
proc vertex2hvNV*(v: ptr uint16): void {.glew_lib, importc: "glVertex2hvNV".}
proc vertex3hNV*(x: uint16, y: uint16, z: uint16): void {.glew_lib, importc: "glVertex3hNV".}
proc vertex3hvNV*(v: ptr uint16): void {.glew_lib, importc: "glVertex3hvNV".}
proc vertex4hNV*(x: uint16, y: uint16, z: uint16, w: uint16): void {.glew_lib, importc: "glVertex4hNV".}
proc vertex4hvNV*(v: ptr uint16): void {.glew_lib, importc: "glVertex4hvNV".}
proc vertexAttrib1hNV*(index: uint32, x: uint16): void {.glew_lib, importc: "glVertexAttrib1hNV".}
proc vertexAttrib1hvNV*(index: uint32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttrib1hvNV".}
proc vertexAttrib2hNV*(index: uint32, x: uint16, y: uint16): void {.glew_lib, importc: "glVertexAttrib2hNV".}
proc vertexAttrib2hvNV*(index: uint32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttrib2hvNV".}
proc vertexAttrib3hNV*(index: uint32, x: uint16, y: uint16, z: uint16): void {.glew_lib, importc: "glVertexAttrib3hNV".}
proc vertexAttrib3hvNV*(index: uint32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttrib3hvNV".}
proc vertexAttrib4hNV*(index: uint32, x: uint16, y: uint16, z: uint16, w: uint16): void {.glew_lib, importc: "glVertexAttrib4hNV".}
proc vertexAttrib4hvNV*(index: uint32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttrib4hvNV".}
proc vertexAttribs1hvNV*(index: uint32, n: int32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttribs1hvNV".}
proc vertexAttribs2hvNV*(index: uint32, n: int32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttribs2hvNV".}
proc vertexAttribs3hvNV*(index: uint32, n: int32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttribs3hvNV".}
proc vertexAttribs4hvNV*(index: uint32, n: int32, v: ptr uint16): void {.glew_lib, importc: "glVertexAttribs4hvNV".}
proc vertexWeighthNV*(weight: uint16): void {.glew_lib, importc: "glVertexWeighthNV".}
proc vertexWeighthvNV*(weight: ptr uint16): void {.glew_lib, importc: "glVertexWeighthvNV".}
proc vertexAttribDivisorNV*(index: uint32, divisor: uint32): void {.glew_lib, importc: "glVertexAttribDivisorNV".}
proc getInternalformatSampleivNV*(target: GLenum, internalformat: GLenum, samples: int32, pname: GLenum, bufSize: int32, params: ptr int32): void {.glew_lib, importc: "glGetInternalformatSampleivNV".}
proc uniformMatrix2x3fvNV*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix2x3fvNV".}
proc uniformMatrix2x4fvNV*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix2x4fvNV".}
proc uniformMatrix3x2fvNV*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix3x2fvNV".}
proc uniformMatrix3x4fvNV*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix3x4fvNV".}
proc uniformMatrix4x2fvNV*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix4x2fvNV".}
proc uniformMatrix4x3fvNV*(location: int32, count: int32, transpose: bool, value: ptr float32): void {.glew_lib, importc: "glUniformMatrix4x3fvNV".}
proc beginOcclusionQueryNV*(id: uint32): void {.glew_lib, importc: "glBeginOcclusionQueryNV".}
proc deleteOcclusionQueriesNV*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glDeleteOcclusionQueriesNV".}
proc endOcclusionQueryNV*(): void {.glew_lib, importc: "glEndOcclusionQueryNV".}
proc genOcclusionQueriesNV*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glGenOcclusionQueriesNV".}
proc getOcclusionQueryivNV*(id: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetOcclusionQueryivNV".}
proc getOcclusionQueryuivNV*(id: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetOcclusionQueryuivNV".}
proc isOcclusionQueryNV*(id: uint32): bool {.glew_lib, importc: "glIsOcclusionQueryNV".}
proc programBufferParametersIivNV*(target: GLenum, buffer: uint32, index: uint32, count: int32, params: ptr int32): void {.glew_lib, importc: "glProgramBufferParametersIivNV".}
proc programBufferParametersIuivNV*(target: GLenum, buffer: uint32, index: uint32, count: int32, params: ptr uint32): void {.glew_lib, importc: "glProgramBufferParametersIuivNV".}
proc programBufferParametersfvNV*(target: GLenum, buffer: uint32, index: uint32, count: int32, params: ptr float32): void {.glew_lib, importc: "glProgramBufferParametersfvNV".}
proc copyPathNV*(resultPath: uint32, srcPath: uint32): void {.glew_lib, importc: "glCopyPathNV".}
proc coverFillPathInstancedNV*(numPaths: int32, pathNameType: GLenum, paths: pointer, pathBase: uint32, coverMode: GLenum, transformType: GLenum, transformValues: ptr float32): void {.glew_lib, importc: "glCoverFillPathInstancedNV".}
proc coverFillPathNV*(path: uint32, coverMode: GLenum): void {.glew_lib, importc: "glCoverFillPathNV".}
proc coverStrokePathInstancedNV*(numPaths: int32, pathNameType: GLenum, paths: pointer, pathBase: uint32, coverMode: GLenum, transformType: GLenum, transformValues: ptr float32): void {.glew_lib, importc: "glCoverStrokePathInstancedNV".}
proc coverStrokePathNV*(path: uint32, coverMode: GLenum): void {.glew_lib, importc: "glCoverStrokePathNV".}
proc deletePathsNV*(path: uint32, rangee: int32): void {.glew_lib, importc: "glDeletePathsNV".}
proc genPathsNV*(rangee: int32): uint32 {.glew_lib, importc: "glGenPathsNV".}
proc getPathColorGenfvNV*(color: GLenum, pname: GLenum, value: ptr float32): void {.glew_lib, importc: "glGetPathColorGenfvNV".}
proc getPathColorGenivNV*(color: GLenum, pname: GLenum, value: ptr int32): void {.glew_lib, importc: "glGetPathColorGenivNV".}
proc getPathCommandsNV*(path: uint32, commands: ptr uint8): void {.glew_lib, importc: "glGetPathCommandsNV".}
proc getPathCoordsNV*(path: uint32, coords: ptr float32): void {.glew_lib, importc: "glGetPathCoordsNV".}
proc getPathDashArrayNV*(path: uint32, dashArray: ptr float32): void {.glew_lib, importc: "glGetPathDashArrayNV".}
proc getPathLengthNV*(path: uint32, startSegment: int32, numSegments: int32): float32 {.glew_lib, importc: "glGetPathLengthNV".}
proc getPathMetricRangeNV*(metricQueryMask: uint32, firstPathName: uint32, numPaths: int32, stride: int32, metrics: ptr float32): void {.glew_lib, importc: "glGetPathMetricRangeNV".}
proc getPathMetricsNV*(metricQueryMask: uint32, numPaths: int32, pathNameType: GLenum, paths: pointer, pathBase: uint32, stride: int32, metrics: ptr float32): void {.glew_lib, importc: "glGetPathMetricsNV".}
proc getPathParameterfvNV*(path: uint32, pname: GLenum, value: ptr float32): void {.glew_lib, importc: "glGetPathParameterfvNV".}
proc getPathParameterivNV*(path: uint32, pname: GLenum, value: ptr int32): void {.glew_lib, importc: "glGetPathParameterivNV".}
proc getPathSpacingNV*(pathListMode: GLenum, numPaths: int32, pathNameType: GLenum, paths: pointer, pathBase: uint32, advanceScale: float32, kerningScale: float32, transformType: GLenum, returnedSpacing: ptr float32): void {.glew_lib, importc: "glGetPathSpacingNV".}
proc getPathTexGenfvNV*(texCoordSet: GLenum, pname: GLenum, value: ptr float32): void {.glew_lib, importc: "glGetPathTexGenfvNV".}
proc getPathTexGenivNV*(texCoordSet: GLenum, pname: GLenum, value: ptr int32): void {.glew_lib, importc: "glGetPathTexGenivNV".}
proc getProgramResourcefvNV*(program: uint32, programInterface: GLenum, index: uint32, propCount: int32, props: ptr GLenum, bufSize: int32, length: ptr int32, params: ptr float32): void {.glew_lib, importc: "glGetProgramResourcefvNV".}
proc interpolatePathsNV*(resultPath: uint32, pathA: uint32, pathB: uint32, weight: float32): void {.glew_lib, importc: "glInterpolatePathsNV".}
proc isPathNV*(path: uint32): bool {.glew_lib, importc: "glIsPathNV".}
proc isPointInFillPathNV*(path: uint32, mask: uint32, x: float32, y: float32): bool {.glew_lib, importc: "glIsPointInFillPathNV".}
proc isPointInStrokePathNV*(path: uint32, x: float32, y: float32): bool {.glew_lib, importc: "glIsPointInStrokePathNV".}
proc matrixLoad3x2fNV*(matrixMode: GLenum, m: ptr float32): void {.glew_lib, importc: "glMatrixLoad3x2fNV".}
proc matrixLoad3x3fNV*(matrixMode: GLenum, m: ptr float32): void {.glew_lib, importc: "glMatrixLoad3x3fNV".}
proc matrixLoadTranspose3x3fNV*(matrixMode: GLenum, m: ptr float32): void {.glew_lib, importc: "glMatrixLoadTranspose3x3fNV".}
proc matrixMult3x2fNV*(matrixMode: GLenum, m: ptr float32): void {.glew_lib, importc: "glMatrixMult3x2fNV".}
proc matrixMult3x3fNV*(matrixMode: GLenum, m: ptr float32): void {.glew_lib, importc: "glMatrixMult3x3fNV".}
proc matrixMultTranspose3x3fNV*(matrixMode: GLenum, m: ptr float32): void {.glew_lib, importc: "glMatrixMultTranspose3x3fNV".}
proc pathColorGenNV*(color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: ptr float32): void {.glew_lib, importc: "glPathColorGenNV".}
proc pathCommandsNV*(path: uint32, numCommands: int32, commands: ptr uint8, numCoords: int32, coordType: GLenum, coords: pointer): void {.glew_lib, importc: "glPathCommandsNV".}
proc pathCoordsNV*(path: uint32, numCoords: int32, coordType: GLenum, coords: pointer): void {.glew_lib, importc: "glPathCoordsNV".}
proc pathCoverDepthFuncNV*(zfunc: GLenum): void {.glew_lib, importc: "glPathCoverDepthFuncNV".}
proc pathDashArrayNV*(path: uint32, dashCount: int32, dashArray: ptr float32): void {.glew_lib, importc: "glPathDashArrayNV".}
proc pathFogGenNV*(genMode: GLenum): void {.glew_lib, importc: "glPathFogGenNV".}
proc pathGlyphIndexArrayNV*(firstPathName: uint32, fontTarget: GLenum, fontName: pointer, fontStyle: uint32, firstGlyphIndex: uint32, numGlyphs: int32, pathParameterTemplate: uint32, emScale: float32): GLenum {.glew_lib, importc: "glPathGlyphIndexArrayNV".}
proc pathGlyphIndexRangeNV*(fontTarget: GLenum, fontName: pointer, fontStyle: uint32, pathParameterTemplate: uint32, emScale: float32, baseAndCount: ptr uint32): GLenum {.glew_lib, importc: "glPathGlyphIndexRangeNV".}
proc pathGlyphRangeNV*(firstPathName: uint32, fontTarget: GLenum, fontName: pointer, fontStyle: uint32, firstGlyph: uint32, numGlyphs: int32, handleMissingGlyphs: GLenum, pathParameterTemplate: uint32, emScale: float32): void {.glew_lib, importc: "glPathGlyphRangeNV".}
proc pathGlyphsNV*(firstPathName: uint32, fontTarget: GLenum, fontName: pointer, fontStyle: uint32, numGlyphs: int32, tipe: GLenum, charcodes: pointer, handleMissingGlyphs: GLenum, pathParameterTemplate: uint32, emScale: float32): void {.glew_lib, importc: "glPathGlyphsNV".}
proc pathMemoryGlyphIndexArrayNV*(firstPathName: uint32, fontTarget: GLenum, fontSize: int32, fontData: pointer, faceIndex: int32, firstGlyphIndex: uint32, numGlyphs: int32, pathParameterTemplate: uint32, emScale: float32): GLenum {.glew_lib, importc: "glPathMemoryGlyphIndexArrayNV".}
proc pathParameterfNV*(path: uint32, pname: GLenum, value: float32): void {.glew_lib, importc: "glPathParameterfNV".}
proc pathParameterfvNV*(path: uint32, pname: GLenum, value: ptr float32): void {.glew_lib, importc: "glPathParameterfvNV".}
proc pathParameteriNV*(path: uint32, pname: GLenum, value: int32): void {.glew_lib, importc: "glPathParameteriNV".}
proc pathParameterivNV*(path: uint32, pname: GLenum, value: ptr int32): void {.glew_lib, importc: "glPathParameterivNV".}
proc pathStencilDepthOffsetNV*(factor: float32, units: float32): void {.glew_lib, importc: "glPathStencilDepthOffsetNV".}
proc pathStencilFuncNV*(fun: GLenum, reff: int32, mask: uint32): void {.glew_lib, importc: "glPathStencilFuncNV".}
proc pathStringNV*(path: uint32, format: GLenum, length: int32, pathString: pointer): void {.glew_lib, importc: "glPathStringNV".}
proc pathSubCommandsNV*(path: uint32, commandStart: int32, commandsToDelete: int32, numCommands: int32, commands: ptr uint8, numCoords: int32, coordType: GLenum, coords: pointer): void {.glew_lib, importc: "glPathSubCommandsNV".}
proc pathSubCoordsNV*(path: uint32, coordStart: int32, numCoords: int32, coordType: GLenum, coords: pointer): void {.glew_lib, importc: "glPathSubCoordsNV".}
proc pathTexGenNV*(texCoordSet: GLenum, genMode: GLenum, components: int32, coeffs: ptr float32): void {.glew_lib, importc: "glPathTexGenNV".}
proc pointAlongPathNV*(path: uint32, startSegment: int32, numSegments: int32, distance: float32, x: ptr float32, y: ptr float32, tangentX: ptr float32, tangentY: ptr float32): bool {.glew_lib, importc: "glPointAlongPathNV".}
proc programPathFragmentInputGenNV*(program: uint32, location: int32, genMode: GLenum, components: int32, coeffs: ptr float32): void {.glew_lib, importc: "glProgramPathFragmentInputGenNV".}
proc stencilFillPathInstancedNV*(numPaths: int32, pathNameType: GLenum, paths: pointer, pathBase: uint32, fillMode: GLenum, mask: uint32, transformType: GLenum, transformValues: ptr float32): void {.glew_lib, importc: "glStencilFillPathInstancedNV".}
proc stencilFillPathNV*(path: uint32, fillMode: GLenum, mask: uint32): void {.glew_lib, importc: "glStencilFillPathNV".}
proc stencilStrokePathInstancedNV*(numPaths: int32, pathNameType: GLenum, paths: pointer, pathBase: uint32, reference: int32, mask: uint32, transformType: GLenum, transformValues: ptr float32): void {.glew_lib, importc: "glStencilStrokePathInstancedNV".}
proc stencilStrokePathNV*(path: uint32, reference: int32, mask: uint32): void {.glew_lib, importc: "glStencilStrokePathNV".}
proc stencilThenCoverFillPathInstancedNV*(numPaths: int32, pathNameType: GLenum, paths: pointer, pathBase: uint32, fillMode: GLenum, mask: uint32, coverMode: GLenum, transformType: GLenum, transformValues: ptr float32): void {.glew_lib, importc: "glStencilThenCoverFillPathInstancedNV".}
proc stencilThenCoverFillPathNV*(path: uint32, fillMode: GLenum, mask: uint32, coverMode: GLenum): void {.glew_lib, importc: "glStencilThenCoverFillPathNV".}
proc stencilThenCoverStrokePathInstancedNV*(numPaths: int32, pathNameType: GLenum, paths: pointer, pathBase: uint32, reference: int32, mask: uint32, coverMode: GLenum, transformType: GLenum, transformValues: ptr float32): void {.glew_lib, importc: "glStencilThenCoverStrokePathInstancedNV".}
proc stencilThenCoverStrokePathNV*(path: uint32, reference: int32, mask: uint32, coverMode: GLenum): void {.glew_lib, importc: "glStencilThenCoverStrokePathNV".}
proc transformPathNV*(resultPath: uint32, srcPath: uint32, transformType: GLenum, transformValues: ptr float32): void {.glew_lib, importc: "glTransformPathNV".}
proc weightPathsNV*(resultPath: uint32, numPaths: int32, paths: ptr uint32, weights: ptr float32): void {.glew_lib, importc: "glWeightPathsNV".}
proc flushPixelDataRangeNV*(target: GLenum): void {.glew_lib, importc: "glFlushPixelDataRangeNV".}
proc pixelDataRangeNV*(target: GLenum, length: int32, poynter: pointer): void {.glew_lib, importc: "glPixelDataRangeNV".}
proc pointParameteriNV*(pname: GLenum, param: int32): void {.glew_lib, importc: "glPointParameteriNV".}
proc pointParameterivNV*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glPointParameterivNV".}
proc polygonModeNV*(face: GLenum, mode: GLenum): void {.glew_lib, importc: "glPolygonModeNV".}
proc getVideoi64vNV*(video_slot: uint32, pname: GLenum, params: ptr int64): void {.glew_lib, importc: "glGetVideoi64vNV".}
proc getVideoivNV*(video_slot: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetVideoivNV".}
proc getVideoui64vNV*(video_slot: uint32, pname: GLenum, params: ptr uint64): void {.glew_lib, importc: "glGetVideoui64vNV".}
proc getVideouivNV*(video_slot: uint32, pname: GLenum, params: ptr uint32): void {.glew_lib, importc: "glGetVideouivNV".}
proc presentFrameDualFillNV*(video_slot: uint32, minPresentTime: uint64, beginPresentTimeId: uint32, presentDurationId: uint32, tipe: GLenum, target0: GLenum, fill0: uint32, target1: GLenum, fill1: uint32, target2: GLenum, fill2: uint32, target3: GLenum, fill3: uint32): void {.glew_lib, importc: "glPresentFrameDualFillNV".}
proc presentFrameKeyedNV*(video_slot: uint32, minPresentTime: uint64, beginPresentTimeId: uint32, presentDurationId: uint32, tipe: GLenum, target0: GLenum, fill0: uint32, key0: uint32, target1: GLenum, fill1: uint32, key1: uint32): void {.glew_lib, importc: "glPresentFrameKeyedNV".}
proc primitiveRestartIndexNV*(index: uint32): void {.glew_lib, importc: "glPrimitiveRestartIndexNV".}
proc primitiveRestartNV*(): void {.glew_lib, importc: "glPrimitiveRestartNV".}
proc combinerInputNV*(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum): void {.glew_lib, importc: "glCombinerInputNV".}
proc combinerOutputNV*(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: bool, cdDotProduct: bool, muxSum: bool): void {.glew_lib, importc: "glCombinerOutputNV".}
proc combinerParameterfNV*(pname: GLenum, param: float32): void {.glew_lib, importc: "glCombinerParameterfNV".}
proc combinerParameterfvNV*(pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glCombinerParameterfvNV".}
proc combinerParameteriNV*(pname: GLenum, param: int32): void {.glew_lib, importc: "glCombinerParameteriNV".}
proc combinerParameterivNV*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glCombinerParameterivNV".}
proc finalCombinerInputNV*(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum): void {.glew_lib, importc: "glFinalCombinerInputNV".}
proc getCombinerInputParameterfvNV*(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetCombinerInputParameterfvNV".}
proc getCombinerInputParameterivNV*(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetCombinerInputParameterivNV".}
proc getCombinerOutputParameterfvNV*(stage: GLenum, portion: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetCombinerOutputParameterfvNV".}
proc getCombinerOutputParameterivNV*(stage: GLenum, portion: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetCombinerOutputParameterivNV".}
proc getFinalCombinerInputParameterfvNV*(variable: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetFinalCombinerInputParameterfvNV".}
proc getFinalCombinerInputParameterivNV*(variable: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetFinalCombinerInputParameterivNV".}
proc combinerStageParameterfvNV*(stage: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glCombinerStageParameterfvNV".}
proc getCombinerStageParameterfvNV*(stage: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetCombinerStageParameterfvNV".}
proc framebufferSampleLocationsfvNV*(target: GLenum, start: uint32, count: int32, v: ptr float32): void {.glew_lib, importc: "glFramebufferSampleLocationsfvNV".}
proc namedFramebufferSampleLocationsfvNV*(framebuffer: uint32, start: uint32, count: int32, v: ptr float32): void {.glew_lib, importc: "glNamedFramebufferSampleLocationsfvNV".}
proc getBufferParameterui64vNV*(target: GLenum, pname: GLenum, params: ptr uint64): void {.glew_lib, importc: "glGetBufferParameterui64vNV".}
proc getIntegerui64vNV*(value: GLenum, result: ptr uint64): void {.glew_lib, importc: "glGetIntegerui64vNV".}
proc getNamedBufferParameterui64vNV*(buffer: uint32, pname: GLenum, params: ptr uint64): void {.glew_lib, importc: "glGetNamedBufferParameterui64vNV".}
proc isBufferResidentNV*(target: GLenum): bool {.glew_lib, importc: "glIsBufferResidentNV".}
proc isNamedBufferResidentNV*(buffer: uint32): bool {.glew_lib, importc: "glIsNamedBufferResidentNV".}
proc makeBufferNonResidentNV*(target: GLenum): void {.glew_lib, importc: "glMakeBufferNonResidentNV".}
proc makeBufferResidentNV*(target: GLenum, access: GLenum): void {.glew_lib, importc: "glMakeBufferResidentNV".}
proc makeNamedBufferNonResidentNV*(buffer: uint32): void {.glew_lib, importc: "glMakeNamedBufferNonResidentNV".}
proc makeNamedBufferResidentNV*(buffer: uint32, access: GLenum): void {.glew_lib, importc: "glMakeNamedBufferResidentNV".}
proc programUniformui64NV*(program: uint32, location: int32, value: uint64): void {.glew_lib, importc: "glProgramUniformui64NV".}
proc programUniformui64vNV*(program: uint32, location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glProgramUniformui64vNV".}
proc uniformui64NV*(location: int32, value: uint64): void {.glew_lib, importc: "glUniformui64NV".}
proc uniformui64vNV*(location: int32, count: int32, value: ptr uint64): void {.glew_lib, importc: "glUniformui64vNV".}
proc compressedTexImage3DNV*(target: GLenum, level: int32, internalformat: GLenum, width: int32, height: int32, depth: int32, border: int32, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexImage3DNV".}
proc compressedTexSubImage3DNV*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, imageSize: int32, data: pointer): void {.glew_lib, importc: "glCompressedTexSubImage3DNV".}
proc copyTexSubImage3DNV*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glCopyTexSubImage3DNV".}
proc framebufferTextureLayerNV*(target: GLenum, attachment: GLenum, texture: uint32, level: int32, layer: int32): void {.glew_lib, importc: "glFramebufferTextureLayerNV".}
proc texImage3DNV*(target: GLenum, level: int32, internalFormat: GLenum, width: int32, height: int32, depth: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexImage3DNV".}
proc texSubImage3DNV*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexSubImage3DNV".}
proc textureBarrierNV*(): void {.glew_lib, importc: "glTextureBarrierNV".}
proc texImage2DMultisampleCoverageNV*(target: GLenum, coverageSamples: int32, colorSamples: int32, internalFormat: int32, width: int32, height: int32, fixedSampleLocations: bool): void {.glew_lib, importc: "glTexImage2DMultisampleCoverageNV".}
proc texImage3DMultisampleCoverageNV*(target: GLenum, coverageSamples: int32, colorSamples: int32, internalFormat: int32, width: int32, height: int32, depth: int32, fixedSampleLocations: bool): void {.glew_lib, importc: "glTexImage3DMultisampleCoverageNV".}
proc textureImage2DMultisampleCoverageNV*(texture: uint32, target: GLenum, coverageSamples: int32, colorSamples: int32, internalFormat: int32, width: int32, height: int32, fixedSampleLocations: bool): void {.glew_lib, importc: "glTextureImage2DMultisampleCoverageNV".}
proc textureImage2DMultisampleNV*(texture: uint32, target: GLenum, samples: int32, internalFormat: int32, width: int32, height: int32, fixedSampleLocations: bool): void {.glew_lib, importc: "glTextureImage2DMultisampleNV".}
proc textureImage3DMultisampleCoverageNV*(texture: uint32, target: GLenum, coverageSamples: int32, colorSamples: int32, internalFormat: int32, width: int32, height: int32, depth: int32, fixedSampleLocations: bool): void {.glew_lib, importc: "glTextureImage3DMultisampleCoverageNV".}
proc textureImage3DMultisampleNV*(texture: uint32, target: GLenum, samples: int32, internalFormat: int32, width: int32, height: int32, depth: int32, fixedSampleLocations: bool): void {.glew_lib, importc: "glTextureImage3DMultisampleNV".}
proc activeVaryingNV*(program: uint32, name: cstring): void {.glew_lib, importc: "glActiveVaryingNV".}
proc beginTransformFeedbackNV*(primitiveMode: GLenum): void {.glew_lib, importc: "glBeginTransformFeedbackNV".}
proc bindBufferBaseNV*(target: GLenum, index: uint32, buffer: uint32): void {.glew_lib, importc: "glBindBufferBaseNV".}
proc bindBufferOffsetNV*(target: GLenum, index: uint32, buffer: uint32, offset: int32): void {.glew_lib, importc: "glBindBufferOffsetNV".}
proc bindBufferRangeNV*(target: GLenum, index: uint32, buffer: uint32, offset: int32, size: int32): void {.glew_lib, importc: "glBindBufferRangeNV".}
proc endTransformFeedbackNV*(): void {.glew_lib, importc: "glEndTransformFeedbackNV".}
proc getActiveVaryingNV*(program: uint32, index: uint32, bufSize: int32, length: ptr int32, size: ptr int32, tipe: ptr GLenum, name: ptr char): void {.glew_lib, importc: "glGetActiveVaryingNV".}
proc getTransformFeedbackVaryingNV*(program: uint32, index: uint32, location: ptr int32): void {.glew_lib, importc: "glGetTransformFeedbackVaryingNV".}
proc getVaryingLocationNV*(program: uint32, name: cstring): int32 {.glew_lib, importc: "glGetVaryingLocationNV".}
proc transformFeedbackAttribsNV*(count: uint32, attribs: ptr int32, bufferMode: GLenum): void {.glew_lib, importc: "glTransformFeedbackAttribsNV".}
proc transformFeedbackVaryingsNV*(program: uint32, count: int32, locations: ptr int32, bufferMode: GLenum): void {.glew_lib, importc: "glTransformFeedbackVaryingsNV".}
proc bindTransformFeedbackNV*(target: GLenum, id: uint32): void {.glew_lib, importc: "glBindTransformFeedbackNV".}
proc deleteTransformFeedbacksNV*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glDeleteTransformFeedbacksNV".}
proc drawTransformFeedbackNV*(mode: GLenum, id: uint32): void {.glew_lib, importc: "glDrawTransformFeedbackNV".}
proc genTransformFeedbacksNV*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glGenTransformFeedbacksNV".}
proc isTransformFeedbackNV*(id: uint32): bool {.glew_lib, importc: "glIsTransformFeedbackNV".}
proc pauseTransformFeedbackNV*(): void {.glew_lib, importc: "glPauseTransformFeedbackNV".}
proc resumeTransformFeedbackNV*(): void {.glew_lib, importc: "glResumeTransformFeedbackNV".}
proc vDPAUFiniNV*(): void {.glew_lib, importc: "glVDPAUFiniNV".}
proc vDPAUGetSurfaceivNV*(surface: int32, pname: GLenum, bufSize: int32, length: ptr int32, values: ptr int32): void {.glew_lib, importc: "glVDPAUGetSurfaceivNV".}
proc vDPAUInitNV*(vdpDevice: pointer, getProcAddress: pointer): void {.glew_lib, importc: "glVDPAUInitNV".}
proc vDPAUIsSurfaceNV*(surface: int32): void {.glew_lib, importc: "glVDPAUIsSurfaceNV".}
proc vDPAUMapSurfacesNV*(numSurfaces: int32, surfaces: ptr int32): void {.glew_lib, importc: "glVDPAUMapSurfacesNV".}
proc vDPAURegisterOutputSurfaceNV*(vdpSurface: pointer, target: GLenum, numTextureNames: int32, textureNames: ptr uint32): int32 {.glew_lib, importc: "glVDPAURegisterOutputSurfaceNV".}
proc vDPAURegisterVideoSurfaceNV*(vdpSurface: pointer, target: GLenum, numTextureNames: int32, textureNames: ptr uint32): int32 {.glew_lib, importc: "glVDPAURegisterVideoSurfaceNV".}
proc vDPAUSurfaceAccessNV*(surface: int32, access: GLenum): void {.glew_lib, importc: "glVDPAUSurfaceAccessNV".}
proc vDPAUUnmapSurfacesNV*(numSurface: int32, surfaces: ptr int32): void {.glew_lib, importc: "glVDPAUUnmapSurfacesNV".}
proc vDPAUUnregisterSurfaceNV*(surface: int32): void {.glew_lib, importc: "glVDPAUUnregisterSurfaceNV".}
proc flushVertexArrayRangeNV*(): void {.glew_lib, importc: "glFlushVertexArrayRangeNV".}
proc vertexArrayRangeNV*(length: int32, poynter: pointer): void {.glew_lib, importc: "glVertexArrayRangeNV".}
proc getVertexAttribLi64vNV*(index: uint32, pname: GLenum, params: ptr int64): void {.glew_lib, importc: "glGetVertexAttribLi64vNV".}
proc getVertexAttribLui64vNV*(index: uint32, pname: GLenum, params: ptr uint64): void {.glew_lib, importc: "glGetVertexAttribLui64vNV".}
proc vertexAttribL1i64NV*(index: uint32, x: int64): void {.glew_lib, importc: "glVertexAttribL1i64NV".}
proc vertexAttribL1i64vNV*(index: uint32, v: ptr int64): void {.glew_lib, importc: "glVertexAttribL1i64vNV".}
proc vertexAttribL1ui64NV*(index: uint32, x: uint64): void {.glew_lib, importc: "glVertexAttribL1ui64NV".}
proc vertexAttribL1ui64vNV*(index: uint32, v: ptr uint64): void {.glew_lib, importc: "glVertexAttribL1ui64vNV".}
proc vertexAttribL2i64NV*(index: uint32, x: int64, y: int64): void {.glew_lib, importc: "glVertexAttribL2i64NV".}
proc vertexAttribL2i64vNV*(index: uint32, v: ptr int64): void {.glew_lib, importc: "glVertexAttribL2i64vNV".}
proc vertexAttribL2ui64NV*(index: uint32, x: uint64, y: uint64): void {.glew_lib, importc: "glVertexAttribL2ui64NV".}
proc vertexAttribL2ui64vNV*(index: uint32, v: ptr uint64): void {.glew_lib, importc: "glVertexAttribL2ui64vNV".}
proc vertexAttribL3i64NV*(index: uint32, x: int64, y: int64, z: int64): void {.glew_lib, importc: "glVertexAttribL3i64NV".}
proc vertexAttribL3i64vNV*(index: uint32, v: ptr int64): void {.glew_lib, importc: "glVertexAttribL3i64vNV".}
proc vertexAttribL3ui64NV*(index: uint32, x: uint64, y: uint64, z: uint64): void {.glew_lib, importc: "glVertexAttribL3ui64NV".}
proc vertexAttribL3ui64vNV*(index: uint32, v: ptr uint64): void {.glew_lib, importc: "glVertexAttribL3ui64vNV".}
proc vertexAttribL4i64NV*(index: uint32, x: int64, y: int64, z: int64, w: int64): void {.glew_lib, importc: "glVertexAttribL4i64NV".}
proc vertexAttribL4i64vNV*(index: uint32, v: ptr int64): void {.glew_lib, importc: "glVertexAttribL4i64vNV".}
proc vertexAttribL4ui64NV*(index: uint32, x: uint64, y: uint64, z: uint64, w: uint64): void {.glew_lib, importc: "glVertexAttribL4ui64NV".}
proc vertexAttribL4ui64vNV*(index: uint32, v: ptr uint64): void {.glew_lib, importc: "glVertexAttribL4ui64vNV".}
proc vertexAttribLFormatNV*(index: uint32, size: int32, tipe: GLenum, stride: int32): void {.glew_lib, importc: "glVertexAttribLFormatNV".}
proc bufferAddressRangeNV*(pname: GLenum, index: uint32, address: uint64, length: int32): void {.glew_lib, importc: "glBufferAddressRangeNV".}
proc colorFormatNV*(size: int32, tipe: GLenum, stride: int32): void {.glew_lib, importc: "glColorFormatNV".}
proc edgeFlagFormatNV*(stride: int32): void {.glew_lib, importc: "glEdgeFlagFormatNV".}
proc fogCoordFormatNV*(tipe: GLenum, stride: int32): void {.glew_lib, importc: "glFogCoordFormatNV".}
proc getIntegerui64i_vNV*(value: GLenum, index: uint32, result: ptr uint64): void {.glew_lib, importc: "glGetIntegerui64i_vNV".}
proc indexFormatNV*(tipe: GLenum, stride: int32): void {.glew_lib, importc: "glIndexFormatNV".}
proc normalFormatNV*(tipe: GLenum, stride: int32): void {.glew_lib, importc: "glNormalFormatNV".}
proc secondaryColorFormatNV*(size: int32, tipe: GLenum, stride: int32): void {.glew_lib, importc: "glSecondaryColorFormatNV".}
proc texCoordFormatNV*(size: int32, tipe: GLenum, stride: int32): void {.glew_lib, importc: "glTexCoordFormatNV".}
proc vertexAttribFormatNV*(index: uint32, size: int32, tipe: GLenum, normalized: bool, stride: int32): void {.glew_lib, importc: "glVertexAttribFormatNV".}
proc vertexAttribIFormatNV*(index: uint32, size: int32, tipe: GLenum, stride: int32): void {.glew_lib, importc: "glVertexAttribIFormatNV".}
proc vertexFormatNV*(size: int32, tipe: GLenum, stride: int32): void {.glew_lib, importc: "glVertexFormatNV".}
proc areProgramsResidentNV*(n: int32, ids: ptr uint32, residences: ptr bool): bool {.glew_lib, importc: "glAreProgramsResidentNV".}
proc bindProgramNV*(target: GLenum, id: uint32): void {.glew_lib, importc: "glBindProgramNV".}
proc deleteProgramsNV*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glDeleteProgramsNV".}
proc executeProgramNV*(target: GLenum, id: uint32, params: ptr float32): void {.glew_lib, importc: "glExecuteProgramNV".}
proc genProgramsNV*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glGenProgramsNV".}
proc getProgramParameterdvNV*(target: GLenum, index: uint32, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glGetProgramParameterdvNV".}
proc getProgramParameterfvNV*(target: GLenum, index: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetProgramParameterfvNV".}
proc getProgramStringNV*(id: uint32, pname: GLenum, program: ptr uint8): void {.glew_lib, importc: "glGetProgramStringNV".}
proc getProgramivNV*(id: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetProgramivNV".}
proc getTrackMatrixivNV*(target: GLenum, address: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTrackMatrixivNV".}
proc getVertexAttribPointervNV*(index: uint32, pname: GLenum, poynter: ptr void): void {.glew_lib, importc: "glGetVertexAttribPointervNV".}
proc getVertexAttribdvNV*(index: uint32, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glGetVertexAttribdvNV".}
proc getVertexAttribfvNV*(index: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetVertexAttribfvNV".}
proc getVertexAttribivNV*(index: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetVertexAttribivNV".}
proc isProgramNV*(id: uint32): bool {.glew_lib, importc: "glIsProgramNV".}
proc loadProgramNV*(target: GLenum, id: uint32, len: int32, program: ptr uint8): void {.glew_lib, importc: "glLoadProgramNV".}
proc programParameter4dNV*(target: GLenum, index: uint32, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glProgramParameter4dNV".}
proc programParameter4dvNV*(target: GLenum, index: uint32, params: ptr float64): void {.glew_lib, importc: "glProgramParameter4dvNV".}
proc programParameter4fNV*(target: GLenum, index: uint32, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glProgramParameter4fNV".}
proc programParameter4fvNV*(target: GLenum, index: uint32, params: ptr float32): void {.glew_lib, importc: "glProgramParameter4fvNV".}
proc programParameters4dvNV*(target: GLenum, index: uint32, num: int32, params: ptr float64): void {.glew_lib, importc: "glProgramParameters4dvNV".}
proc programParameters4fvNV*(target: GLenum, index: uint32, num: int32, params: ptr float32): void {.glew_lib, importc: "glProgramParameters4fvNV".}
proc requestResidentProgramsNV*(n: int32, ids: ptr uint32): void {.glew_lib, importc: "glRequestResidentProgramsNV".}
proc trackMatrixNV*(target: GLenum, address: uint32, matrix: GLenum, transform: GLenum): void {.glew_lib, importc: "glTrackMatrixNV".}
proc vertexAttrib1dNV*(index: uint32, x: float64): void {.glew_lib, importc: "glVertexAttrib1dNV".}
proc vertexAttrib1dvNV*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib1dvNV".}
proc vertexAttrib1fNV*(index: uint32, x: float32): void {.glew_lib, importc: "glVertexAttrib1fNV".}
proc vertexAttrib1fvNV*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib1fvNV".}
proc vertexAttrib1sNV*(index: uint32, x: int16): void {.glew_lib, importc: "glVertexAttrib1sNV".}
proc vertexAttrib1svNV*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib1svNV".}
proc vertexAttrib2dNV*(index: uint32, x: float64, y: float64): void {.glew_lib, importc: "glVertexAttrib2dNV".}
proc vertexAttrib2dvNV*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib2dvNV".}
proc vertexAttrib2fNV*(index: uint32, x: float32, y: float32): void {.glew_lib, importc: "glVertexAttrib2fNV".}
proc vertexAttrib2fvNV*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib2fvNV".}
proc vertexAttrib2sNV*(index: uint32, x: int16, y: int16): void {.glew_lib, importc: "glVertexAttrib2sNV".}
proc vertexAttrib2svNV*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib2svNV".}
proc vertexAttrib3dNV*(index: uint32, x: float64, y: float64, z: float64): void {.glew_lib, importc: "glVertexAttrib3dNV".}
proc vertexAttrib3dvNV*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib3dvNV".}
proc vertexAttrib3fNV*(index: uint32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glVertexAttrib3fNV".}
proc vertexAttrib3fvNV*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib3fvNV".}
proc vertexAttrib3sNV*(index: uint32, x: int16, y: int16, z: int16): void {.glew_lib, importc: "glVertexAttrib3sNV".}
proc vertexAttrib3svNV*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib3svNV".}
proc vertexAttrib4dNV*(index: uint32, x: float64, y: float64, z: float64, w: float64): void {.glew_lib, importc: "glVertexAttrib4dNV".}
proc vertexAttrib4dvNV*(index: uint32, v: ptr float64): void {.glew_lib, importc: "glVertexAttrib4dvNV".}
proc vertexAttrib4fNV*(index: uint32, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glVertexAttrib4fNV".}
proc vertexAttrib4fvNV*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glVertexAttrib4fvNV".}
proc vertexAttrib4sNV*(index: uint32, x: int16, y: int16, z: int16, w: int16): void {.glew_lib, importc: "glVertexAttrib4sNV".}
proc vertexAttrib4svNV*(index: uint32, v: ptr int16): void {.glew_lib, importc: "glVertexAttrib4svNV".}
proc vertexAttrib4ubNV*(index: uint32, x: uint8, y: uint8, z: uint8, w: uint8): void {.glew_lib, importc: "glVertexAttrib4ubNV".}
proc vertexAttrib4ubvNV*(index: uint32, v: ptr uint8): void {.glew_lib, importc: "glVertexAttrib4ubvNV".}
proc vertexAttribPointerNV*(index: uint32, size: int32, tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glVertexAttribPointerNV".}
proc vertexAttribs1dvNV*(index: uint32, n: int32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribs1dvNV".}
proc vertexAttribs1fvNV*(index: uint32, n: int32, v: ptr float32): void {.glew_lib, importc: "glVertexAttribs1fvNV".}
proc vertexAttribs1svNV*(index: uint32, n: int32, v: ptr int16): void {.glew_lib, importc: "glVertexAttribs1svNV".}
proc vertexAttribs2dvNV*(index: uint32, n: int32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribs2dvNV".}
proc vertexAttribs2fvNV*(index: uint32, n: int32, v: ptr float32): void {.glew_lib, importc: "glVertexAttribs2fvNV".}
proc vertexAttribs2svNV*(index: uint32, n: int32, v: ptr int16): void {.glew_lib, importc: "glVertexAttribs2svNV".}
proc vertexAttribs3dvNV*(index: uint32, n: int32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribs3dvNV".}
proc vertexAttribs3fvNV*(index: uint32, n: int32, v: ptr float32): void {.glew_lib, importc: "glVertexAttribs3fvNV".}
proc vertexAttribs3svNV*(index: uint32, n: int32, v: ptr int16): void {.glew_lib, importc: "glVertexAttribs3svNV".}
proc vertexAttribs4dvNV*(index: uint32, n: int32, v: ptr float64): void {.glew_lib, importc: "glVertexAttribs4dvNV".}
proc vertexAttribs4fvNV*(index: uint32, n: int32, v: ptr float32): void {.glew_lib, importc: "glVertexAttribs4fvNV".}
proc vertexAttribs4svNV*(index: uint32, n: int32, v: ptr int16): void {.glew_lib, importc: "glVertexAttribs4svNV".}
proc vertexAttribs4ubvNV*(index: uint32, n: int32, v: ptr uint8): void {.glew_lib, importc: "glVertexAttribs4ubvNV".}
proc beginVideoCaptureNV*(video_capture_slot: uint32): void {.glew_lib, importc: "glBeginVideoCaptureNV".}
proc bindVideoCaptureStreamBufferNV*(video_capture_slot: uint32, stream: uint32, frame_region: GLenum, offset: int32): void {.glew_lib, importc: "glBindVideoCaptureStreamBufferNV".}
proc bindVideoCaptureStreamTextureNV*(video_capture_slot: uint32, stream: uint32, frame_region: GLenum, target: GLenum, texture: uint32): void {.glew_lib, importc: "glBindVideoCaptureStreamTextureNV".}
proc endVideoCaptureNV*(video_capture_slot: uint32): void {.glew_lib, importc: "glEndVideoCaptureNV".}
proc getVideoCaptureStreamdvNV*(video_capture_slot: uint32, stream: uint32, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glGetVideoCaptureStreamdvNV".}
proc getVideoCaptureStreamfvNV*(video_capture_slot: uint32, stream: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetVideoCaptureStreamfvNV".}
proc getVideoCaptureStreamivNV*(video_capture_slot: uint32, stream: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetVideoCaptureStreamivNV".}
proc getVideoCaptureivNV*(video_capture_slot: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetVideoCaptureivNV".}
proc videoCaptureNV*(video_capture_slot: uint32, sequence_num: ptr uint32, capture_time: ptr uint64): GLenum {.glew_lib, importc: "glVideoCaptureNV".}
proc videoCaptureStreamParameterdvNV*(video_capture_slot: uint32, stream: uint32, pname: GLenum, params: ptr float64): void {.glew_lib, importc: "glVideoCaptureStreamParameterdvNV".}
proc videoCaptureStreamParameterfvNV*(video_capture_slot: uint32, stream: uint32, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glVideoCaptureStreamParameterfvNV".}
proc videoCaptureStreamParameterivNV*(video_capture_slot: uint32, stream: uint32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glVideoCaptureStreamParameterivNV".}
proc depthRangeArrayfvNV*(first: uint32, count: int32, v: ptr float32): void {.glew_lib, importc: "glDepthRangeArrayfvNV".}
proc depthRangeIndexedfNV*(index: uint32, n: float32, f: float32): void {.glew_lib, importc: "glDepthRangeIndexedfNV".}
proc disableiNV*(target: GLenum, index: uint32): void {.glew_lib, importc: "glDisableiNV".}
proc enableiNV*(target: GLenum, index: uint32): void {.glew_lib, importc: "glEnableiNV".}
proc getFloati_vNV*(target: GLenum, index: uint32, data: ptr float32): void {.glew_lib, importc: "glGetFloati_vNV".}
proc isEnablediNV*(target: GLenum, index: uint32): bool {.glew_lib, importc: "glIsEnablediNV".}
proc scissorArrayvNV*(first: uint32, count: int32, v: ptr int32): void {.glew_lib, importc: "glScissorArrayvNV".}
proc scissorIndexedNV*(index: uint32, left: int32, bottom: int32, width: int32, height: int32): void {.glew_lib, importc: "glScissorIndexedNV".}
proc scissorIndexedvNV*(index: uint32, v: ptr int32): void {.glew_lib, importc: "glScissorIndexedvNV".}
proc viewportArrayvNV*(first: uint32, count: int32, v: ptr float32): void {.glew_lib, importc: "glViewportArrayvNV".}
proc viewportIndexedfNV*(index: uint32, x: float32, y: float32, w: float32, h: float32): void {.glew_lib, importc: "glViewportIndexedfNV".}
proc viewportIndexedfvNV*(index: uint32, v: ptr float32): void {.glew_lib, importc: "glViewportIndexedfvNV".}
proc viewportSwizzleNV*(index: uint32, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum): void {.glew_lib, importc: "glViewportSwizzleNV".}
proc framebufferTextureMultiviewOVR*(target: GLenum, attachment: GLenum, texture: uint32, level: int32, baseViewIndex: int32, numViews: int32): void {.glew_lib, importc: "glFramebufferTextureMultiviewOVR".}
proc framebufferTextureMultisampleMultiviewOVR*(target: GLenum, attachment: GLenum, texture: uint32, level: int32, samples: int32, baseViewIndex: int32, numViews: int32): void {.glew_lib, importc: "glFramebufferTextureMultisampleMultiviewOVR".}
proc alphaFuncQCOM*(fun: GLenum, reff: float32): void {.glew_lib, importc: "glAlphaFuncQCOM".}
proc disableDriverControlQCOM*(driverControl: uint32): void {.glew_lib, importc: "glDisableDriverControlQCOM".}
proc enableDriverControlQCOM*(driverControl: uint32): void {.glew_lib, importc: "glEnableDriverControlQCOM".}
proc getDriverControlStringQCOM*(driverControl: uint32, bufSize: int32, length: ptr int32, driverControlString: ptr char): void {.glew_lib, importc: "glGetDriverControlStringQCOM".}
proc getDriverControlsQCOM*(num: ptr int32, size: int32, driverControls: ptr uint32): void {.glew_lib, importc: "glGetDriverControlsQCOM".}
proc extGetBufferPointervQCOM*(target: GLenum, params: ptr void): void {.glew_lib, importc: "glExtGetBufferPointervQCOM".}
proc extGetBuffersQCOM*(buffers: ptr uint32, maxBuffers: int32, numBuffers: ptr int32): void {.glew_lib, importc: "glExtGetBuffersQCOM".}
proc extGetFramebuffersQCOM*(framebuffers: ptr uint32, maxFramebuffers: int32, numFramebuffers: ptr int32): void {.glew_lib, importc: "glExtGetFramebuffersQCOM".}
proc extGetRenderbuffersQCOM*(renderbuffers: ptr uint32, maxRenderbuffers: int32, numRenderbuffers: ptr int32): void {.glew_lib, importc: "glExtGetRenderbuffersQCOM".}
proc extGetTexLevelParameterivQCOM*(texture: uint32, face: GLenum, level: int32, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glExtGetTexLevelParameterivQCOM".}
proc extGetTexSubImageQCOM*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, width: int32, height: int32, depth: int32, format: GLenum, tipe: GLenum, texels: pointer): void {.glew_lib, importc: "glExtGetTexSubImageQCOM".}
proc extGetTexturesQCOM*(textures: ptr uint32, maxTextures: int32, numTextures: ptr int32): void {.glew_lib, importc: "glExtGetTexturesQCOM".}
proc extTexObjectStateOverrideiQCOM*(target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glExtTexObjectStateOverrideiQCOM".}
proc extGetProgramBinarySourceQCOM*(program: uint32, shadertype: GLenum, source: ptr char, length: ptr int32): void {.glew_lib, importc: "glExtGetProgramBinarySourceQCOM".}
proc extGetProgramsQCOM*(programs: ptr uint32, maxPrograms: int32, numPrograms: ptr int32): void {.glew_lib, importc: "glExtGetProgramsQCOM".}
proc extGetShadersQCOM*(shaders: ptr uint32, maxShaders: int32, numShaders: ptr int32): void {.glew_lib, importc: "glExtGetShadersQCOM".}
proc extIsProgramBinaryQCOM*(program: uint32): bool {.glew_lib, importc: "glExtIsProgramBinaryQCOM".}
proc framebufferFoveationConfigQCOM*(fbo: uint32, numLayers: uint32, focalPointsPerLayer: uint32, requestedFeatures: uint32, providedFeatures: ptr uint32): void {.glew_lib, importc: "glFramebufferFoveationConfigQCOM".}
proc framebufferFoveationParametersQCOM*(fbo: uint32, layer: uint32, focalPoint: uint32, focalX: float32, focalY: float32, gainX: float32, gainY: float32, foveaArea: float32): void {.glew_lib, importc: "glFramebufferFoveationParametersQCOM".}
proc framebufferFetchBarrierQCOM*(): void {.glew_lib, importc: "glFramebufferFetchBarrierQCOM".}
proc endTilingQCOM*(preserveMask: uint32): void {.glew_lib, importc: "glEndTilingQCOM".}
proc startTilingQCOM*(x: uint32, y: uint32, width: uint32, height: uint32, preserveMask: uint32): void {.glew_lib, importc: "glStartTilingQCOM".}
proc alphaFuncx*(fun: GLenum, reff: int32): void {.glew_lib, importc: "glAlphaFuncx".}
proc clearColorx*(red: int32, green: int32, blue: int32, alpha: int32): void {.glew_lib, importc: "glClearColorx".}
proc clearDepthx*(depth: int32): void {.glew_lib, importc: "glClearDepthx".}
proc color4x*(red: int32, green: int32, blue: int32, alpha: int32): void {.glew_lib, importc: "glColor4x".}
proc depthRangex*(zNear: int32, zFar: int32): void {.glew_lib, importc: "glDepthRangex".}
proc fogx*(pname: GLenum, param: int32): void {.glew_lib, importc: "glFogx".}
proc fogxv*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glFogxv".}
proc frustumf*(left: float32, right: float32, bottom: float32, top: float32, zNear: float32, zFar: float32): void {.glew_lib, importc: "glFrustumf".}
proc frustumx*(left: int32, right: int32, bottom: int32, top: int32, zNear: int32, zFar: int32): void {.glew_lib, importc: "glFrustumx".}
proc lightModelx*(pname: GLenum, param: int32): void {.glew_lib, importc: "glLightModelx".}
proc lightModelxv*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glLightModelxv".}
proc lightx*(light: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glLightx".}
proc lightxv*(light: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glLightxv".}
proc lineWidthx*(width: int32): void {.glew_lib, importc: "glLineWidthx".}
proc loadMatrixx*(m: ptr int32): void {.glew_lib, importc: "glLoadMatrixx".}
proc materialx*(face: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glMaterialx".}
proc materialxv*(face: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glMaterialxv".}
proc multMatrixx*(m: ptr int32): void {.glew_lib, importc: "glMultMatrixx".}
proc multiTexCoord4x*(target: GLenum, s: int32, t: int32, r: int32, q: int32): void {.glew_lib, importc: "glMultiTexCoord4x".}
proc normal3x*(nx: int32, ny: int32, nz: int32): void {.glew_lib, importc: "glNormal3x".}
proc orthof*(left: float32, right: float32, bottom: float32, top: float32, zNear: float32, zFar: float32): void {.glew_lib, importc: "glOrthof".}
proc orthox*(left: int32, right: int32, bottom: int32, top: int32, zNear: int32, zFar: int32): void {.glew_lib, importc: "glOrthox".}
proc pointSizex*(size: int32): void {.glew_lib, importc: "glPointSizex".}
proc polygonOffsetx*(factor: int32, units: int32): void {.glew_lib, importc: "glPolygonOffsetx".}
proc rotatex*(angle: int32, x: int32, y: int32, z: int32): void {.glew_lib, importc: "glRotatex".}
proc sampleCoveragex*(value: int32, invert: bool): void {.glew_lib, importc: "glSampleCoveragex".}
proc scalex*(x: int32, y: int32, z: int32): void {.glew_lib, importc: "glScalex".}
proc texEnvx*(target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glTexEnvx".}
proc texEnvxv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glTexEnvxv".}
proc texParameterx*(target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glTexParameterx".}
proc translatex*(x: int32, y: int32, z: int32): void {.glew_lib, importc: "glTranslatex".}
proc clipPlanef*(plane: GLenum, equation: ptr float32): void {.glew_lib, importc: "glClipPlanef".}
proc clipPlanex*(plane: GLenum, equation: ptr int32): void {.glew_lib, importc: "glClipPlanex".}
proc getClipPlanef*(pname: GLenum, eqn: ptr float32): void {.glew_lib, importc: "glGetClipPlanef".}
proc getClipPlanex*(pname: GLenum, eqn: ptr int32): void {.glew_lib, importc: "glGetClipPlanex".}
proc getFixedv*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetFixedv".}
proc getLightxv*(light: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetLightxv".}
proc getMaterialxv*(face: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMaterialxv".}
proc getTexEnvxv*(env: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTexEnvxv".}
proc getTexParameterxv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetTexParameterxv".}
proc pointParameterx*(pname: GLenum, param: int32): void {.glew_lib, importc: "glPointParameterx".}
proc pointParameterxv*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glPointParameterxv".}
proc pointSizePointerOES*(tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glPointSizePointerOES".}
proc texParameterxv*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glTexParameterxv".}
proc errorStringREGAL*(error: GLenum): ptr char {.glew_lib, importc: "glErrorStringREGAL".}
proc getExtensionREGAL*(ext: cstring): bool {.glew_lib, importc: "glGetExtensionREGAL".}
proc isSupportedREGAL*(ext: cstring): bool {.glew_lib, importc: "glIsSupportedREGAL".}
proc getProcAddressREGAL*(name: cstring): void {.glew_lib, importc: "glGetProcAddressREGAL".}
proc detailTexFuncSGIS*(target: GLenum, n: int32, points: ptr float32): void {.glew_lib, importc: "glDetailTexFuncSGIS".}
proc getDetailTexFuncSGIS*(target: GLenum, points: ptr float32): void {.glew_lib, importc: "glGetDetailTexFuncSGIS".}
proc fogFuncSGIS*(n: int32, points: ptr float32): void {.glew_lib, importc: "glFogFuncSGIS".}
proc getFogFuncSGIS*(points: ptr float32): void {.glew_lib, importc: "glGetFogFuncSGIS".}
proc sampleMaskSGIS*(value: float32, invert: bool): void {.glew_lib, importc: "glSampleMaskSGIS".}
proc samplePatternSGIS*(pattern: GLenum): void {.glew_lib, importc: "glSamplePatternSGIS".}
proc interleavedTextureCoordSetsSGIS*(factor: int32): void {.glew_lib, importc: "glInterleavedTextureCoordSetsSGIS".}
proc selectTextureCoordSetSGIS*(target: GLenum): void {.glew_lib, importc: "glSelectTextureCoordSetSGIS".}
proc selectTextureSGIS*(target: GLenum): void {.glew_lib, importc: "glSelectTextureSGIS".}
proc selectTextureTransformSGIS*(target: GLenum): void {.glew_lib, importc: "glSelectTextureTransformSGIS".}
proc multisampleSubRectPosSGIS*(x: int32, y: int32): void {.glew_lib, importc: "glMultisampleSubRectPosSGIS".}
proc getSharpenTexFuncSGIS*(target: GLenum, points: ptr float32): void {.glew_lib, importc: "glGetSharpenTexFuncSGIS".}
proc sharpenTexFuncSGIS*(target: GLenum, n: int32, points: ptr float32): void {.glew_lib, importc: "glSharpenTexFuncSGIS".}
proc texImage4DSGIS*(target: GLenum, level: int32, internalformat: GLenum, width: int32, height: int32, depth: int32, extent: int32, border: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexImage4DSGIS".}
proc texSubImage4DSGIS*(target: GLenum, level: int32, xoffset: int32, yoffset: int32, zoffset: int32, woffset: int32, width: int32, height: int32, depth: int32, extent: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glTexSubImage4DSGIS".}
proc getTexFilterFuncSGIS*(target: GLenum, filter: GLenum, weights: ptr float32): void {.glew_lib, importc: "glGetTexFilterFuncSGIS".}
proc texFilterFuncSGIS*(target: GLenum, filter: GLenum, n: int32, weights: ptr float32): void {.glew_lib, importc: "glTexFilterFuncSGIS".}
proc asyncMarkerSGIX*(marker: uint32): void {.glew_lib, importc: "glAsyncMarkerSGIX".}
proc deleteAsyncMarkersSGIX*(marker: uint32, rangee: int32): void {.glew_lib, importc: "glDeleteAsyncMarkersSGIX".}
proc finishAsyncSGIX*(markerp: ptr uint32): int32 {.glew_lib, importc: "glFinishAsyncSGIX".}
proc genAsyncMarkersSGIX*(rangee: int32): uint32 {.glew_lib, importc: "glGenAsyncMarkersSGIX".}
proc isAsyncMarkerSGIX*(marker: uint32): bool {.glew_lib, importc: "glIsAsyncMarkerSGIX".}
proc pollAsyncSGIX*(markerp: ptr uint32): int32 {.glew_lib, importc: "glPollAsyncSGIX".}
proc addressSpace*(space: GLenum, mask: uint32): void {.glew_lib, importc: "glAddressSpace".}
proc dataPipe*(space: GLenum): int32 {.glew_lib, importc: "glDataPipe".}
proc flushRasterSGIX*(): void {.glew_lib, importc: "glFlushRasterSGIX".}
proc fogLayersSGIX*(n: int32, points: ptr float32): void {.glew_lib, importc: "glFogLayersSGIX".}
proc getFogLayersSGIX*(points: ptr float32): void {.glew_lib, importc: "glGetFogLayersSGIX".}
proc textureFogSGIX*(pname: GLenum): void {.glew_lib, importc: "glTextureFogSGIX".}
proc fragmentColorMaterialSGIX*(face: GLenum, mode: GLenum): void {.glew_lib, importc: "glFragmentColorMaterialSGIX".}
proc fragmentLightModelfSGIX*(pname: GLenum, param: float32): void {.glew_lib, importc: "glFragmentLightModelfSGIX".}
proc fragmentLightModelfvSGIX*(pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glFragmentLightModelfvSGIX".}
proc fragmentLightModeliSGIX*(pname: GLenum, param: int32): void {.glew_lib, importc: "glFragmentLightModeliSGIX".}
proc fragmentLightModelivSGIX*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glFragmentLightModelivSGIX".}
proc fragmentLightfSGIX*(light: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glFragmentLightfSGIX".}
proc fragmentLightfvSGIX*(light: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glFragmentLightfvSGIX".}
proc fragmentLightiSGIX*(light: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glFragmentLightiSGIX".}
proc fragmentLightivSGIX*(light: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glFragmentLightivSGIX".}
proc fragmentMaterialfSGIX*(face: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glFragmentMaterialfSGIX".}
proc fragmentMaterialfvSGIX*(face: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glFragmentMaterialfvSGIX".}
proc fragmentMaterialiSGIX*(face: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glFragmentMaterialiSGIX".}
proc fragmentMaterialivSGIX*(face: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glFragmentMaterialivSGIX".}
proc getFragmentLightfvSGIX*(light: GLenum, value: GLenum, data: ptr float32): void {.glew_lib, importc: "glGetFragmentLightfvSGIX".}
proc getFragmentLightivSGIX*(light: GLenum, value: GLenum, data: ptr int32): void {.glew_lib, importc: "glGetFragmentLightivSGIX".}
proc getFragmentMaterialfvSGIX*(face: GLenum, pname: GLenum, data: ptr float32): void {.glew_lib, importc: "glGetFragmentMaterialfvSGIX".}
proc getFragmentMaterialivSGIX*(face: GLenum, pname: GLenum, data: ptr int32): void {.glew_lib, importc: "glGetFragmentMaterialivSGIX".}
proc frameZoomSGIX*(factor: int32): void {.glew_lib, importc: "glFrameZoomSGIX".}
proc iglooInterfaceSGIX*(pname: GLenum, param: pointer): void {.glew_lib, importc: "glIglooInterfaceSGIX".}
proc allocMPEGPredictorsSGIX*(width: int32, height: int32, n: int32, predictors: ptr uint32): void {.glew_lib, importc: "glAllocMPEGPredictorsSGIX".}
proc deleteMPEGPredictorsSGIX*(n: int32, predictors: ptr uint32): void {.glew_lib, importc: "glDeleteMPEGPredictorsSGIX".}
proc genMPEGPredictorsSGIX*(n: int32, predictors: ptr uint32): void {.glew_lib, importc: "glGenMPEGPredictorsSGIX".}
proc getMPEGParameterfvSGIX*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetMPEGParameterfvSGIX".}
proc getMPEGParameterivSGIX*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetMPEGParameterivSGIX".}
proc getMPEGPredictorSGIX*(target: GLenum, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glGetMPEGPredictorSGIX".}
proc getMPEGQuantTableubv*(target: GLenum, values: ptr uint8): void {.glew_lib, importc: "glGetMPEGQuantTableubv".}
proc isMPEGPredictorSGIX*(predictor: uint32): bool {.glew_lib, importc: "glIsMPEGPredictorSGIX".}
proc mPEGPredictorSGIX*(target: GLenum, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glMPEGPredictorSGIX".}
proc mPEGQuantTableubv*(target: GLenum, values: ptr uint8): void {.glew_lib, importc: "glMPEGQuantTableubv".}
proc swapMPEGPredictorsSGIX*(target0: GLenum, target1: GLenum): void {.glew_lib, importc: "glSwapMPEGPredictorsSGIX".}
proc getNonlinLightfvSGIX*(light: GLenum, pname: GLenum, terms: ptr int32, data: ptr float32): void {.glew_lib, importc: "glGetNonlinLightfvSGIX".}
proc getNonlinMaterialfvSGIX*(face: GLenum, pname: GLenum, terms: ptr int32, data: ptr float32): void {.glew_lib, importc: "glGetNonlinMaterialfvSGIX".}
proc nonlinLightfvSGIX*(light: GLenum, pname: GLenum, terms: int32, params: ptr float32): void {.glew_lib, importc: "glNonlinLightfvSGIX".}
proc nonlinMaterialfvSGIX*(face: GLenum, pname: GLenum, terms: int32, params: ptr float32): void {.glew_lib, importc: "glNonlinMaterialfvSGIX".}
proc pixelTexGenSGIX*(mode: GLenum): void {.glew_lib, importc: "glPixelTexGenSGIX".}
proc deformSGIX*(mask: uint32): void {.glew_lib, importc: "glDeformSGIX".}
proc loadIdentityDeformationMapSGIX*(mask: uint32): void {.glew_lib, importc: "glLoadIdentityDeformationMapSGIX".}
proc meshBreadthSGIX*(breadth: int32): void {.glew_lib, importc: "glMeshBreadthSGIX".}
proc meshStrideSGIX*(stride: int32): void {.glew_lib, importc: "glMeshStrideSGIX".}
proc referencePlaneSGIX*(equation: ptr float64): void {.glew_lib, importc: "glReferencePlaneSGIX".}
proc spriteParameterfSGIX*(pname: GLenum, param: float32): void {.glew_lib, importc: "glSpriteParameterfSGIX".}
proc spriteParameterfvSGIX*(pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glSpriteParameterfvSGIX".}
proc spriteParameteriSGIX*(pname: GLenum, param: int32): void {.glew_lib, importc: "glSpriteParameteriSGIX".}
proc spriteParameterivSGIX*(pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glSpriteParameterivSGIX".}
proc tagSampleBufferSGIX*(): void {.glew_lib, importc: "glTagSampleBufferSGIX".}
proc getVectorOperationSGIX*(operation: GLenum): void {.glew_lib, importc: "glGetVectorOperationSGIX".}
proc vectorOperationSGIX*(operation: GLenum): void {.glew_lib, importc: "glVectorOperationSGIX".}
proc areVertexArraysResidentSGIX*(n: int32, arrays: ptr uint32, residences: ptr bool): bool {.glew_lib, importc: "glAreVertexArraysResidentSGIX".}
proc bindVertexArraySGIX*(arrai: uint32): void {.glew_lib, importc: "glBindVertexArraySGIX".}
proc deleteVertexArraysSGIX*(n: int32, arrays: ptr uint32): void {.glew_lib, importc: "glDeleteVertexArraysSGIX".}
proc genVertexArraysSGIX*(n: int32, arrays: ptr uint32): void {.glew_lib, importc: "glGenVertexArraysSGIX".}
proc isVertexArraySGIX*(arrai: uint32): bool {.glew_lib, importc: "glIsVertexArraySGIX".}
proc prioritizeVertexArraysSGIX*(n: int32, arrays: ptr uint32, priorities: ptr float32): void {.glew_lib, importc: "glPrioritizeVertexArraysSGIX".}
proc colorTableParameterfvSGI*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glColorTableParameterfvSGI".}
proc colorTableParameterivSGI*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glColorTableParameterivSGI".}
proc colorTableSGI*(target: GLenum, internalformat: GLenum, width: int32, format: GLenum, tipe: GLenum, table: pointer): void {.glew_lib, importc: "glColorTableSGI".}
proc copyColorTableSGI*(target: GLenum, internalformat: GLenum, x: int32, y: int32, width: int32): void {.glew_lib, importc: "glCopyColorTableSGI".}
proc getColorTableParameterfvSGI*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetColorTableParameterfvSGI".}
proc getColorTableParameterivSGI*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetColorTableParameterivSGI".}
proc getColorTableSGI*(target: GLenum, format: GLenum, tipe: GLenum, table: pointer): void {.glew_lib, importc: "glGetColorTableSGI".}
proc getPixelTransformParameterfvSGI*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glGetPixelTransformParameterfvSGI".}
proc getPixelTransformParameterivSGI*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glGetPixelTransformParameterivSGI".}
proc pixelTransformParameterfSGI*(target: GLenum, pname: GLenum, param: float32): void {.glew_lib, importc: "glPixelTransformParameterfSGI".}
proc pixelTransformParameterfvSGI*(target: GLenum, pname: GLenum, params: ptr float32): void {.glew_lib, importc: "glPixelTransformParameterfvSGI".}
proc pixelTransformParameteriSGI*(target: GLenum, pname: GLenum, param: int32): void {.glew_lib, importc: "glPixelTransformParameteriSGI".}
proc pixelTransformParameterivSGI*(target: GLenum, pname: GLenum, params: ptr int32): void {.glew_lib, importc: "glPixelTransformParameterivSGI".}
proc pixelTransformSGI*(target: GLenum): void {.glew_lib, importc: "glPixelTransformSGI".}
proc finishTextureSUNX*(): void {.glew_lib, importc: "glFinishTextureSUNX".}
proc globalAlphaFactorbSUN*(factor: int8): void {.glew_lib, importc: "glGlobalAlphaFactorbSUN".}
proc globalAlphaFactordSUN*(factor: float64): void {.glew_lib, importc: "glGlobalAlphaFactordSUN".}
proc globalAlphaFactorfSUN*(factor: float32): void {.glew_lib, importc: "glGlobalAlphaFactorfSUN".}
proc globalAlphaFactoriSUN*(factor: int32): void {.glew_lib, importc: "glGlobalAlphaFactoriSUN".}
proc globalAlphaFactorsSUN*(factor: int16): void {.glew_lib, importc: "glGlobalAlphaFactorsSUN".}
proc globalAlphaFactorubSUN*(factor: uint8): void {.glew_lib, importc: "glGlobalAlphaFactorubSUN".}
proc globalAlphaFactoruiSUN*(factor: uint32): void {.glew_lib, importc: "glGlobalAlphaFactoruiSUN".}
proc globalAlphaFactorusSUN*(factor: uint16): void {.glew_lib, importc: "glGlobalAlphaFactorusSUN".}
proc readVideoPixelsSUN*(x: int32, y: int32, width: int32, height: int32, format: GLenum, tipe: GLenum, pixels: pointer): void {.glew_lib, importc: "glReadVideoPixelsSUN".}
proc replacementCodePointerSUN*(tipe: GLenum, stride: int32, poynter: pointer): void {.glew_lib, importc: "glReplacementCodePointerSUN".}
proc replacementCodeubSUN*(code: uint8): void {.glew_lib, importc: "glReplacementCodeubSUN".}
proc replacementCodeubvSUN*(code: ptr uint8): void {.glew_lib, importc: "glReplacementCodeubvSUN".}
proc replacementCodeuiSUN*(code: uint32): void {.glew_lib, importc: "glReplacementCodeuiSUN".}
proc replacementCodeuivSUN*(code: ptr uint32): void {.glew_lib, importc: "glReplacementCodeuivSUN".}
proc replacementCodeusSUN*(code: uint16): void {.glew_lib, importc: "glReplacementCodeusSUN".}
proc replacementCodeusvSUN*(code: ptr uint16): void {.glew_lib, importc: "glReplacementCodeusvSUN".}
proc color3fVertex3fSUN*(r: float32, g: float32, b: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glColor3fVertex3fSUN".}
proc color3fVertex3fvSUN*(c: ptr float32, v: ptr float32): void {.glew_lib, importc: "glColor3fVertex3fvSUN".}
proc color4fNormal3fVertex3fSUN*(r: float32, g: float32, b: float32, a: float32, nx: float32, ny: float32, nz: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glColor4fNormal3fVertex3fSUN".}
proc color4fNormal3fVertex3fvSUN*(c: ptr float32, n: ptr float32, v: ptr float32): void {.glew_lib, importc: "glColor4fNormal3fVertex3fvSUN".}
proc color4ubVertex2fSUN*(r: uint8, g: uint8, b: uint8, a: uint8, x: float32, y: float32): void {.glew_lib, importc: "glColor4ubVertex2fSUN".}
proc color4ubVertex2fvSUN*(c: ptr uint8, v: ptr float32): void {.glew_lib, importc: "glColor4ubVertex2fvSUN".}
proc color4ubVertex3fSUN*(r: uint8, g: uint8, b: uint8, a: uint8, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glColor4ubVertex3fSUN".}
proc color4ubVertex3fvSUN*(c: ptr uint8, v: ptr float32): void {.glew_lib, importc: "glColor4ubVertex3fvSUN".}
proc normal3fVertex3fSUN*(nx: float32, ny: float32, nz: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glNormal3fVertex3fSUN".}
proc normal3fVertex3fvSUN*(n: ptr float32, v: ptr float32): void {.glew_lib, importc: "glNormal3fVertex3fvSUN".}
proc replacementCodeuiColor3fVertex3fSUN*(rc: uint32, r: float32, g: float32, b: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glReplacementCodeuiColor3fVertex3fSUN".}
proc replacementCodeuiColor3fVertex3fvSUN*(rc: ptr uint32, c: ptr float32, v: ptr float32): void {.glew_lib, importc: "glReplacementCodeuiColor3fVertex3fvSUN".}
proc replacementCodeuiColor4fNormal3fVertex3fSUN*(rc: uint32, r: float32, g: float32, b: float32, a: float32, nx: float32, ny: float32, nz: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glReplacementCodeuiColor4fNormal3fVertex3fSUN".}
proc replacementCodeuiColor4fNormal3fVertex3fvSUN*(rc: ptr uint32, c: ptr float32, n: ptr float32, v: ptr float32): void {.glew_lib, importc: "glReplacementCodeuiColor4fNormal3fVertex3fvSUN".}
proc replacementCodeuiColor4ubVertex3fSUN*(rc: uint32, r: uint8, g: uint8, b: uint8, a: uint8, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glReplacementCodeuiColor4ubVertex3fSUN".}
proc replacementCodeuiColor4ubVertex3fvSUN*(rc: ptr uint32, c: ptr uint8, v: ptr float32): void {.glew_lib, importc: "glReplacementCodeuiColor4ubVertex3fvSUN".}
proc replacementCodeuiNormal3fVertex3fSUN*(rc: uint32, nx: float32, ny: float32, nz: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glReplacementCodeuiNormal3fVertex3fSUN".}
proc replacementCodeuiNormal3fVertex3fvSUN*(rc: ptr uint32, n: ptr float32, v: ptr float32): void {.glew_lib, importc: "glReplacementCodeuiNormal3fVertex3fvSUN".}
proc replacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN*(rc: uint32, s: float32, t: float32, r: float32, g: float32, b: float32, a: float32, nx: float32, ny: float32, nz: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN".}
proc replacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN*(rc: ptr uint32, tc: ptr float32, c: ptr float32, n: ptr float32, v: ptr float32): void {.glew_lib, importc: "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN".}
proc replacementCodeuiTexCoord2fNormal3fVertex3fSUN*(rc: uint32, s: float32, t: float32, nx: float32, ny: float32, nz: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN".}
proc replacementCodeuiTexCoord2fNormal3fVertex3fvSUN*(rc: ptr uint32, tc: ptr float32, n: ptr float32, v: ptr float32): void {.glew_lib, importc: "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN".}
proc replacementCodeuiTexCoord2fVertex3fSUN*(rc: uint32, s: float32, t: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glReplacementCodeuiTexCoord2fVertex3fSUN".}
proc replacementCodeuiTexCoord2fVertex3fvSUN*(rc: ptr uint32, tc: ptr float32, v: ptr float32): void {.glew_lib, importc: "glReplacementCodeuiTexCoord2fVertex3fvSUN".}
proc replacementCodeuiVertex3fSUN*(rc: uint32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glReplacementCodeuiVertex3fSUN".}
proc replacementCodeuiVertex3fvSUN*(rc: ptr uint32, v: ptr float32): void {.glew_lib, importc: "glReplacementCodeuiVertex3fvSUN".}
proc texCoord2fColor3fVertex3fSUN*(s: float32, t: float32, r: float32, g: float32, b: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glTexCoord2fColor3fVertex3fSUN".}
proc texCoord2fColor3fVertex3fvSUN*(tc: ptr float32, c: ptr float32, v: ptr float32): void {.glew_lib, importc: "glTexCoord2fColor3fVertex3fvSUN".}
proc texCoord2fColor4fNormal3fVertex3fSUN*(s: float32, t: float32, r: float32, g: float32, b: float32, a: float32, nx: float32, ny: float32, nz: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glTexCoord2fColor4fNormal3fVertex3fSUN".}
proc texCoord2fColor4fNormal3fVertex3fvSUN*(tc: ptr float32, c: ptr float32, n: ptr float32, v: ptr float32): void {.glew_lib, importc: "glTexCoord2fColor4fNormal3fVertex3fvSUN".}
proc texCoord2fColor4ubVertex3fSUN*(s: float32, t: float32, r: uint8, g: uint8, b: uint8, a: uint8, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glTexCoord2fColor4ubVertex3fSUN".}
proc texCoord2fColor4ubVertex3fvSUN*(tc: ptr float32, c: ptr uint8, v: ptr float32): void {.glew_lib, importc: "glTexCoord2fColor4ubVertex3fvSUN".}
proc texCoord2fNormal3fVertex3fSUN*(s: float32, t: float32, nx: float32, ny: float32, nz: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glTexCoord2fNormal3fVertex3fSUN".}
proc texCoord2fNormal3fVertex3fvSUN*(tc: ptr float32, n: ptr float32, v: ptr float32): void {.glew_lib, importc: "glTexCoord2fNormal3fVertex3fvSUN".}
proc texCoord2fVertex3fSUN*(s: float32, t: float32, x: float32, y: float32, z: float32): void {.glew_lib, importc: "glTexCoord2fVertex3fSUN".}
proc texCoord2fVertex3fvSUN*(tc: ptr float32, v: ptr float32): void {.glew_lib, importc: "glTexCoord2fVertex3fvSUN".}
proc texCoord4fColor4fNormal3fVertex4fSUN*(s: float32, t: float32, p: float32, q: float32, r: float32, g: float32, b: float32, a: float32, nx: float32, ny: float32, nz: float32, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glTexCoord4fColor4fNormal3fVertex4fSUN".}
proc texCoord4fColor4fNormal3fVertex4fvSUN*(tc: ptr float32, c: ptr float32, n: ptr float32, v: ptr float32): void {.glew_lib, importc: "glTexCoord4fColor4fNormal3fVertex4fvSUN".}
proc texCoord4fVertex4fSUN*(s: float32, t: float32, p: float32, q: float32, x: float32, y: float32, z: float32, w: float32): void {.glew_lib, importc: "glTexCoord4fVertex4fSUN".}
proc texCoord4fVertex4fvSUN*(tc: ptr float32, v: ptr float32): void {.glew_lib, importc: "glTexCoord4fVertex4fvSUN".}
proc addSwapHintRectWIN*(x: int32, y: int32, width: int32, height: int32): void {.glew_lib, importc: "glAddSwapHintRectWIN".}
